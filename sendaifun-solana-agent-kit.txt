Directory structure:
└── sendaifun-solana-agent-kit/
    ├── README.md
    ├── CITATION.cff
    ├── CONTRIBUTING.md
    ├── LICENSE
    ├── SECURITY.md
    ├── package.json
    ├── pnpm-lock.yaml
    ├── tsconfig.json
    ├── .env.example
    ├── .eslintrc
    ├── .lintstagedrc
    ├── .prettierignore
    ├── .prettierrc
    ├── docs/
    │   ├── index.html
    │   ├── modules.html
    │   ├── .nojekyll
    │   ├── assets/
    │   │   ├── hierarchy.js
    │   │   ├── highlight.css
    │   │   ├── icons.js
    │   │   ├── main.js
    │   │   ├── navigation.js
    │   │   ├── search.js
    │   │   └── style.css
    │   ├── classes/
    │   │   └── SolanaAgentKit.html
    │   ├── functions/
    │   │   ├── createSolanaTools.html
    │   │   ├── createVercelAITools.html
    │   │   ├── executeAction.html
    │   │   ├── findAction.html
    │   │   └── getActionExamples.html
    │   ├── interfaces/
    │   │   ├── Action.html
    │   │   ├── ActionExample.html
    │   │   ├── BatchOrderPattern.html
    │   │   ├── CollectionDeployment.html
    │   │   ├── CollectionOptions.html
    │   │   ├── Config.html
    │   │   ├── Creator.html
    │   │   ├── FetchPriceResponse.html
    │   │   ├── FlashCloseTradeParams.html
    │   │   ├── FlashTradeParams.html
    │   │   ├── GibworkCreateTaskReponse.html
    │   │   ├── HeliusWebhookIdResponse.html
    │   │   ├── HeliusWebhookResponse.html
    │   │   ├── JupiterTokenData.html
    │   │   ├── LuloAccountDetailsResponse.html
    │   │   ├── MintCollectionNFTResponse.html
    │   │   ├── OrderParams.html
    │   │   ├── PriorityFeeResponse.html
    │   │   ├── PumpFunTokenOptions.html
    │   │   ├── PumpfunLaunchResponse.html
    │   │   ├── PythFetchPriceResponse.html
    │   │   ├── PythPriceFeedIDItem.html
    │   │   ├── PythPriceItem.html
    │   │   └── TokenCheck.html
    │   ├── media/
    │   │   └── CONTRIBUTING.md
    │   ├── types/
    │   │   └── Handler.html
    │   └── variables/
    │       └── actions.html
    ├── examples/
    │   ├── agent-kit-langgraph/
    │   │   ├── README.md
    │   │   ├── langgraph.json
    │   │   ├── package.json
    │   │   ├── pnpm-lock.yaml
    │   │   ├── tsconfig.json
    │   │   ├── .env.example
    │   │   ├── .gitignore
    │   │   ├── assets/
    │   │   └── src/
    │   │       ├── index.ts
    │   │       ├── agents/
    │   │       │   ├── generalAgent.ts
    │   │       │   ├── manager.ts
    │   │       │   ├── readAgent.ts
    │   │       │   └── transferOrSwap.ts
    │   │       ├── helper/
    │   │       │   ├── examples.ts
    │   │       │   └── tokenList.ts
    │   │       ├── prompts/
    │   │       │   ├── manager.ts
    │   │       │   └── transferSwap.ts
    │   │       ├── tools/
    │   │       │   └── swap.ts
    │   │       └── utils/
    │   │           ├── model.ts
    │   │           ├── route.ts
    │   │           ├── solanaAgent.ts
    │   │           └── state.ts
    │   ├── agent-kit-nextjs-langchain/
    │   │   ├── README.md
    │   │   ├── LICENSE
    │   │   ├── next.config.js
    │   │   ├── package.json
    │   │   ├── pnpm-lock.yaml
    │   │   ├── postcss.config.js
    │   │   ├── tailwind.config.js
    │   │   ├── tsconfig.json
    │   │   ├── .env.example
    │   │   ├── .eslintrc.json
    │   │   ├── .gitignore
    │   │   ├── .prettierrc.json
    │   │   ├── app/
    │   │   │   ├── globals.css
    │   │   │   ├── layout.tsx
    │   │   │   ├── page.tsx
    │   │   │   └── api/
    │   │   │       └── chat/
    │   │   │           └── route.ts
    │   │   ├── components/
    │   │   │   ├── ChatMessageBubble.tsx
    │   │   │   ├── ChatWindow.tsx
    │   │   │   └── IntermediateStep.tsx
    │   │   ├── data/
    │   │   │   └── DefaultRetrievalText.ts
    │   │   ├── public/
    │   │   │   └── images/
    │   │   └── utils/
    │   │       └── markdownToHTML.ts
    │   ├── discord-bot-starter/
    │   │   ├── README.md
    │   │   ├── package.json
    │   │   ├── pnpm-lock.yaml
    │   │   ├── tsconfig.json
    │   │   ├── .env.template
    │   │   ├── .eslintrc.ts
    │   │   ├── .gitignore
    │   │   ├── .prettierrc
    │   │   └── src/
    │   │       └── index.ts
    │   ├── market-making-agent/
    │   │   ├── README.md
    │   │   ├── index.ts
    │   │   ├── package.json
    │   │   ├── pnpm-lock.yaml
    │   │   └── .env.example
    │   ├── persistent-agent/
    │   │   ├── README.md
    │   │   ├── index.ts
    │   │   ├── package.json
    │   │   ├── pnpm-lock.yaml
    │   │   └── .env.example
    │   └── tg-bot-starter/
    │       ├── README.md
    │       ├── advanced-tg-bot/
    │       │   ├── README.md
    │       │   ├── next.config.ts
    │       │   ├── package.json
    │       │   ├── pnpm-lock.yaml
    │       │   ├── postcss.config.mjs
    │       │   ├── tailwind.config.ts
    │       │   ├── tsconfig.json
    │       │   ├── .env.example
    │       │   ├── .gitignore
    │       │   ├── public/
    │       │   └── src/
    │       │       └── app/
    │       │           ├── globals.css
    │       │           ├── layout.tsx
    │       │           ├── page.tsx
    │       │           └── api/
    │       │               └── bot/
    │       │                   └── route.ts
    │       ├── basic-tg-bot/
    │       │   ├── README.md
    │       │   ├── next.config.ts
    │       │   ├── package.json
    │       │   ├── pnpm-lock.yaml
    │       │   ├── postcss.config.mjs
    │       │   ├── tailwind.config.ts
    │       │   ├── tsconfig.json
    │       │   ├── .env.example
    │       │   ├── .gitignore
    │       │   ├── public/
    │       │   └── src/
    │       │       └── app/
    │       │           ├── globals.css
    │       │           ├── layout.tsx
    │       │           ├── page.tsx
    │       │           └── api/
    │       │               └── bot/
    │       │                   └── route.ts
    │       └── group-tg-bot/
    │           ├── README.md
    │           ├── next.config.ts
    │           ├── package.json
    │           ├── pnpm-lock.yaml
    │           ├── postcss.config.mjs
    │           ├── tailwind.config.ts
    │           ├── tsconfig.json
    │           ├── .env.example
    │           ├── .gitignore
    │           ├── public/
    │           └── src/
    │               └── app/
    │                   ├── globals.css
    │                   ├── layout.tsx
    │                   ├── page.tsx
    │                   └── api/
    │                       └── bot/
    │                           └── route.ts
    ├── guides/
    │   ├── add_your_own_tool.md
    │   ├── setup_locally.md
    │   └── test_it_out.md
    ├── src/
    │   ├── index.ts
    │   ├── actions/
    │   │   ├── index.ts
    │   │   ├── tokenBalances.ts
    │   │   ├── agent/
    │   │   │   ├── createImage.ts
    │   │   │   ├── getWalletAddress.ts
    │   │   │   └── get_info.ts
    │   │   ├── alldomains/
    │   │   │   ├── getAllDomainsTLDs.ts
    │   │   │   ├── getOwnedAllDomains.ts
    │   │   │   ├── getOwnedDomainsForTLD.ts
    │   │   │   └── resolveDomain.ts
    │   │   ├── allora/
    │   │   │   ├── getAllTopics.ts
    │   │   │   ├── getInferenceByTopicId.ts
    │   │   │   └── getPriceInference.ts
    │   │   ├── dexscreener/
    │   │   │   └── tokenDataByTicker.ts
    │   │   ├── drift/
    │   │   │   ├── availableMarkets.ts
    │   │   │   ├── createDriftUserAccount.ts
    │   │   │   ├── createVault.ts
    │   │   │   ├── depositIntoVault.ts
    │   │   │   ├── depositToDriftUserAccount.ts
    │   │   │   ├── deriveVaultAddress.ts
    │   │   │   ├── doesUserHaveDriftAccount.ts
    │   │   │   ├── driftUserAccountInfo.ts
    │   │   │   ├── entryQuoteOfPerpTrade.ts
    │   │   │   ├── getLendAndBorrowAPY.ts
    │   │   │   ├── perpMarketFundingRate.ts
    │   │   │   ├── requestUnstakeFromDriftInsuranceFund.ts
    │   │   │   ├── requestWithdrawalFromVault.ts
    │   │   │   ├── stakeToDriftInsuranceFund.ts
    │   │   │   ├── swapSpotToken.ts
    │   │   │   ├── tradeDelegatedDriftVault.ts
    │   │   │   ├── tradePerpAccount.ts
    │   │   │   ├── unstakeFromDriftInsuranceFund.ts
    │   │   │   ├── updateDriftVaultDelegate.ts
    │   │   │   ├── updateVault.ts
    │   │   │   ├── vaultInfo.ts
    │   │   │   ├── withdrawFromDriftAccount.ts
    │   │   │   └── withdrawFromVault.ts
    │   │   ├── flash/
    │   │   │   ├── flashCloseTrade.ts
    │   │   │   └── flashOpenTrade.ts
    │   │   ├── gibwork/
    │   │   │   └── createGibworkTask.ts
    │   │   ├── helius/
    │   │   │   ├── createWebhook.ts
    │   │   │   ├── deleteWebhook.ts
    │   │   │   ├── getAssetsbyOwner.ts
    │   │   │   ├── getWebhook.ts
    │   │   │   ├── parseTransaction.ts
    │   │   │   └── sendTransactionWithPriority.ts
    │   │   ├── jupiter/
    │   │   │   ├── fetchPrice.ts
    │   │   │   ├── getTokenData.ts
    │   │   │   ├── stakeWithJup.ts
    │   │   │   └── trade.ts
    │   │   ├── lightprotocol/
    │   │   │   └── compressedAirdrop.ts
    │   │   ├── lulo/
    │   │   │   ├── lendAsset.ts
    │   │   │   ├── luloLend.ts
    │   │   │   └── luloWithdraw.ts
    │   │   ├── metaplex/
    │   │   │   ├── deployCollection.ts
    │   │   │   ├── deployToken.ts
    │   │   │   ├── getAsset.ts
    │   │   │   ├── getAssetsByAuthority.ts
    │   │   │   ├── getAssetsByCreator.ts
    │   │   │   └── mintNFT.ts
    │   │   ├── openbook/
    │   │   │   └── createOpenbookMarket.ts
    │   │   ├── orca/
    │   │   │   └── createOrcaSingleSidedWhirlpool.ts
    │   │   ├── pumpfun/
    │   │   │   └── launchPumpfunToken.ts
    │   │   ├── pyth/
    │   │   │   └── pythFetchPrice.ts
    │   │   ├── raydium/
    │   │   │   ├── raydiumCreateAmmV4.ts
    │   │   │   ├── raydiumCreateClmm.ts
    │   │   │   └── raydiumCreateCpmm.ts
    │   │   ├── sns/
    │   │   │   ├── getAllRegisteredAllDomains.ts
    │   │   │   ├── getMainAllDomainsDomain.ts
    │   │   │   ├── getPrimaryDomain.ts
    │   │   │   ├── registerDomain.ts
    │   │   │   └── resolveSolDomain.ts
    │   │   ├── solana/
    │   │   │   ├── balance.ts
    │   │   │   ├── closeEmptyTokenAccounts.ts
    │   │   │   ├── getTPS.ts
    │   │   │   ├── requestFunds.ts
    │   │   │   └── transfer.ts
    │   │   ├── solayer/
    │   │   │   └── stakeWithSolayer.ts
    │   │   ├── squads/
    │   │   │   ├── approveMultisigProposal.ts
    │   │   │   ├── createMultisig.ts
    │   │   │   ├── createMultisigProposal.ts
    │   │   │   ├── depositToMultisigTreasury.ts
    │   │   │   ├── executeMultisigProposal.ts
    │   │   │   ├── rejectMultisigProposal.ts
    │   │   │   └── transferFromMultisigTreasury.ts
    │   │   └── voltr/
    │   │       ├── depositStrategy.ts
    │   │       ├── getPositionValues.ts
    │   │       └── withdrawStrategy.ts
    │   ├── agent/
    │   │   └── index.ts
    │   ├── constants/
    │   │   └── index.ts
    │   ├── idls/
    │   │   └── adrena.ts
    │   ├── langchain/
    │   │   ├── index.ts
    │   │   ├── 3land/
    │   │   │   ├── create_collection.ts
    │   │   │   ├── create_single.ts
    │   │   │   └── index.ts
    │   │   ├── adrena/
    │   │   │   ├── close_trade.ts
    │   │   │   ├── index.ts
    │   │   │   └── open_trade.ts
    │   │   ├── agent/
    │   │   │   ├── create_image.ts
    │   │   │   ├── get_info.ts
    │   │   │   ├── index.ts
    │   │   │   └── wallet_address.ts
    │   │   ├── alldomains/
    │   │   │   ├── get_all_tld.ts
    │   │   │   ├── index.ts
    │   │   │   ├── owned_domains.ts
    │   │   │   ├── resolve_all_domains.ts
    │   │   │   └── tld_domains.ts
    │   │   ├── allora/
    │   │   │   ├── get_all_topics.ts
    │   │   │   ├── get_inference_by_topic_id.ts
    │   │   │   ├── get_price_inference.ts
    │   │   │   └── index.ts
    │   │   ├── dexscreener/
    │   │   │   ├── index.ts
    │   │   │   └── token_data_ticker.ts
    │   │   ├── drift/
    │   │   │   ├── create_user_account.ts
    │   │   │   ├── create_vault.ts
    │   │   │   ├── deposit_into_vault.ts
    │   │   │   ├── deposit_to_user_account.ts
    │   │   │   ├── derive_vault_address.ts
    │   │   │   ├── does_user_have_drift_account.ts
    │   │   │   ├── drift_user_account_info.ts
    │   │   │   ├── entry_quote_of_perp_trade.ts
    │   │   │   ├── index.ts
    │   │   │   ├── lend_and_borrow_apy.ts
    │   │   │   ├── perp_market_funding_rate.ts
    │   │   │   ├── request_unstake_from_insurance_fund.ts
    │   │   │   ├── request_withdrawal.ts
    │   │   │   ├── stake_to_insurance_fund.ts
    │   │   │   ├── swap_spot_token.ts
    │   │   │   ├── trade_delegated_vault.ts
    │   │   │   ├── trade_perp_account.ts
    │   │   │   ├── unstake_from_insurance_fund.ts
    │   │   │   ├── update_drift_vault_delegate.ts
    │   │   │   ├── update_vault.ts
    │   │   │   ├── vault_info.ts
    │   │   │   ├── withdraw_from_account.ts
    │   │   │   └── withdraw_from_vault.ts
    │   │   ├── flash/
    │   │   │   ├── flash_close.ts
    │   │   │   ├── flash_open.ts
    │   │   │   └── index.ts
    │   │   ├── gibwork/
    │   │   │   ├── create_task.ts
    │   │   │   └── index.ts
    │   │   ├── helius/
    │   │   │   ├── create_webhook.ts
    │   │   │   ├── delete_webhook.ts
    │   │   │   ├── get_all_assets.ts
    │   │   │   ├── get_webhook.ts
    │   │   │   ├── index.ts
    │   │   │   ├── parse_transaction.ts
    │   │   │   └── send_transaction_priority.ts
    │   │   ├── jupiter/
    │   │   │   ├── fetch_price.ts
    │   │   │   ├── index.ts
    │   │   │   ├── stake.ts
    │   │   │   ├── token_data.ts
    │   │   │   └── trade.ts
    │   │   ├── lightprotocol/
    │   │   │   ├── compressed_airdrop.ts
    │   │   │   └── index.ts
    │   │   ├── lulo/
    │   │   │   ├── index.ts
    │   │   │   ├── lend_asset.ts
    │   │   │   ├── lulo_lend.ts
    │   │   │   └── lulo_withdraw.ts
    │   │   ├── manifest/
    │   │   │   ├── batch_order.ts
    │   │   │   ├── cancel_orders.ts
    │   │   │   ├── index.ts
    │   │   │   ├── limit_order.ts
    │   │   │   ├── manifest_market.ts
    │   │   │   └── withdraw.ts
    │   │   ├── metaplex/
    │   │   │   ├── deploy_collection.ts
    │   │   │   ├── deploy_token.ts
    │   │   │   ├── get_asset.ts
    │   │   │   ├── get_assets_by_authority.ts
    │   │   │   ├── get_assets_by_creator.ts
    │   │   │   ├── index.ts
    │   │   │   └── mint_nft.ts
    │   │   ├── meteora/
    │   │   │   ├── index.ts
    │   │   │   ├── meteora_dlmm_pool.ts
    │   │   │   └── meteora_dynamic_pool.ts
    │   │   ├── openbook/
    │   │   │   ├── index.ts
    │   │   │   └── openbook_market.ts
    │   │   ├── orca/
    │   │   │   ├── index.ts
    │   │   │   ├── orca_centered_position.ts
    │   │   │   ├── orca_clmm.ts
    │   │   │   ├── orca_fetch_positions.ts
    │   │   │   ├── orca_position.ts
    │   │   │   ├── orca_single_sided_pool.ts
    │   │   │   └── orca_single_sided_position.ts
    │   │   ├── pumpfun/
    │   │   │   ├── index.ts
    │   │   │   └── launch_pumpfun_token.ts
    │   │   ├── pyth/
    │   │   │   ├── index.ts
    │   │   │   └── pyth_price.ts
    │   │   ├── raydium/
    │   │   │   ├── index.ts
    │   │   │   ├── raydium_amm.ts
    │   │   │   ├── raydium_clmm.ts
    │   │   │   ├── raydium_cpmm.ts
    │   │   │   └── types.ts
    │   │   ├── rugcheck/
    │   │   │   ├── index.ts
    │   │   │   ├── token_report_detailed.ts
    │   │   │   └── token_report_summary.ts
    │   │   ├── sendarcade/
    │   │   │   ├── index.ts
    │   │   │   └── rock_paper_scissors.ts
    │   │   ├── sns/
    │   │   │   ├── get_domain.ts
    │   │   │   ├── index.ts
    │   │   │   ├── main_domain.ts
    │   │   │   ├── register_domain.ts
    │   │   │   └── resolve_domain.ts
    │   │   ├── solana/
    │   │   │   ├── balance.ts
    │   │   │   ├── balance_other.ts
    │   │   │   ├── close_empty_accounts.ts
    │   │   │   ├── get_tps.ts
    │   │   │   ├── index.ts
    │   │   │   ├── request_funds.ts
    │   │   │   └── transfer.ts
    │   │   ├── solayer/
    │   │   │   ├── index.ts
    │   │   │   └── restake.ts
    │   │   ├── squads/
    │   │   │   ├── approve_proposal.ts
    │   │   │   ├── create_multisig.ts
    │   │   │   ├── create_proposal.ts
    │   │   │   ├── deposit_to_multisig.ts
    │   │   │   ├── execute_proposal.ts
    │   │   │   ├── index.ts
    │   │   │   ├── reject_proposal.ts
    │   │   │   └── transfer_from_multisig.ts
    │   │   ├── tensor/
    │   │   │   ├── cancel_listing.ts
    │   │   │   ├── index.ts
    │   │   │   └── list_nft.ts
    │   │   ├── tiplink/
    │   │   │   ├── index.ts
    │   │   │   └── tiplink.ts
    │   │   └── voltr/
    │   │       ├── deposit_strategy.ts
    │   │       ├── get_position_values.ts
    │   │       ├── index.ts
    │   │       └── withdraw_strategy.ts
    │   ├── tools/
    │   │   ├── index.ts
    │   │   ├── 3land/
    │   │   │   ├── create_3land_collectible.ts
    │   │   │   └── index.ts
    │   │   ├── adrena/
    │   │   │   ├── adrena_perp_trading.ts
    │   │   │   └── index.ts
    │   │   ├── agent/
    │   │   │   ├── create_image.ts
    │   │   │   ├── get_info.ts
    │   │   │   ├── get_wallet_address.ts
    │   │   │   └── index.ts
    │   │   ├── alldomains/
    │   │   │   ├── get_all_domains_tlds.ts
    │   │   │   ├── get_owned_all_domains.ts
    │   │   │   ├── get_owned_domains_for_tld.ts
    │   │   │   ├── index.ts
    │   │   │   └── resolve_domain.ts
    │   │   ├── allora/
    │   │   │   ├── get_all_topics.ts
    │   │   │   ├── get_inference_by_topic_id.ts
    │   │   │   ├── get_price_inference.ts
    │   │   │   └── index.ts
    │   │   ├── dexscreener/
    │   │   │   ├── get_token_data.ts
    │   │   │   └── index.ts
    │   │   ├── drift/
    │   │   │   ├── drift.ts
    │   │   │   ├── drift_vault.ts
    │   │   │   ├── index.ts
    │   │   │   └── types.ts
    │   │   ├── flash/
    │   │   │   ├── flash_close_trade.ts
    │   │   │   ├── flash_open_trade.ts
    │   │   │   └── index.ts
    │   │   ├── gibwork/
    │   │   │   ├── create_gibwork_task.ts
    │   │   │   └── index.ts
    │   │   ├── helius/
    │   │   │   ├── get_assets_by_owner.ts
    │   │   │   ├── helius_transaction_parsing.ts
    │   │   │   ├── helius_webhooks.ts
    │   │   │   ├── index.ts
    │   │   │   └── send_transaction_with_priority.ts
    │   │   ├── jupiter/
    │   │   │   ├── fetch_price.ts
    │   │   │   ├── index.ts
    │   │   │   ├── stake_with_jup.ts
    │   │   │   └── trade.ts
    │   │   ├── lightprotocol/
    │   │   │   ├── index.ts
    │   │   │   └── send_compressed_airdrop.ts
    │   │   ├── lulo/
    │   │   │   ├── index.ts
    │   │   │   ├── lend.ts
    │   │   │   ├── lulo_lend.ts
    │   │   │   └── lulo_withdraw.ts
    │   │   ├── manifest/
    │   │   │   ├── index.ts
    │   │   │   └── manifest_trade.ts
    │   │   ├── metaplex/
    │   │   │   ├── deploy_collection.ts
    │   │   │   ├── deploy_token.ts
    │   │   │   ├── get_asset.ts
    │   │   │   ├── get_assets_by_authority.ts
    │   │   │   ├── get_assets_by_creator.ts
    │   │   │   ├── index.ts
    │   │   │   └── mint_nft.ts
    │   │   ├── meteora/
    │   │   │   ├── create_meteora_dlmm_pool.ts
    │   │   │   ├── create_meteora_dynamic_amm_pool.ts
    │   │   │   └── index.ts
    │   │   ├── openbook/
    │   │   │   ├── index.ts
    │   │   │   └── openbook_create_market.ts
    │   │   ├── orca/
    │   │   │   ├── index.ts
    │   │   │   ├── orca_close_position.ts
    │   │   │   ├── orca_create_clmm.ts
    │   │   │   ├── orca_create_single_sided_liquidity_pool.ts
    │   │   │   ├── orca_fetch_positions.ts
    │   │   │   ├── orca_open_centered_position_with_liquidity.ts
    │   │   │   └── orca_open_single_sided_position.ts
    │   │   ├── pumpfun/
    │   │   │   ├── index.ts
    │   │   │   └── launch_pumpfun_token.ts
    │   │   ├── pyth/
    │   │   │   ├── index.ts
    │   │   │   └── pyth_fetch_price.ts
    │   │   ├── raydium/
    │   │   │   ├── index.ts
    │   │   │   ├── raydium_create_ammV4.ts
    │   │   │   ├── raydium_create_clmm.ts
    │   │   │   └── raydium_create_cpmm.ts
    │   │   ├── rugcheck/
    │   │   │   ├── index.ts
    │   │   │   └── rugcheck.ts
    │   │   ├── sendarcade/
    │   │   │   ├── index.ts
    │   │   │   └── rock_paper_scissor.ts
    │   │   ├── sns/
    │   │   │   ├── get_all_registered_all_domains.ts
    │   │   │   ├── get_main_all_domains_domain.ts
    │   │   │   ├── get_primary_domain.ts
    │   │   │   ├── index.ts
    │   │   │   ├── register_domain.ts
    │   │   │   └── resolve_sol_domain.ts
    │   │   ├── solana/
    │   │   │   ├── close_empty_token_accounts.ts
    │   │   │   ├── get_balance.ts
    │   │   │   ├── get_balance_other.ts
    │   │   │   ├── get_token_balances.ts
    │   │   │   ├── get_tps.ts
    │   │   │   ├── index.ts
    │   │   │   ├── request_faucet_funds.ts
    │   │   │   └── transfer.ts
    │   │   ├── solayer/
    │   │   │   ├── index.ts
    │   │   │   └── stake_with_solayer.ts
    │   │   ├── squads/
    │   │   │   ├── approve_proposal.ts
    │   │   │   ├── create_multisig.ts
    │   │   │   ├── create_proposal.ts
    │   │   │   ├── deposit_to_treasury.ts
    │   │   │   ├── execute_proposal.ts
    │   │   │   ├── index.ts
    │   │   │   ├── reject_proposal.ts
    │   │   │   └── transfer_from_treasury.ts
    │   │   ├── tensor/
    │   │   │   ├── index.ts
    │   │   │   └── tensor_trade.ts
    │   │   ├── tiplink/
    │   │   │   ├── create_tiplinks.ts
    │   │   │   └── index.ts
    │   │   └── voltr/
    │   │       ├── index.ts
    │   │       ├── voltr_deposit_strategy.ts
    │   │       ├── voltr_get_position_values.ts
    │   │       └── voltr_withdraw_strategy.ts
    │   ├── types/
    │   │   ├── action.ts
    │   │   └── index.ts
    │   ├── utils/
    │   │   ├── AdrenaClient.ts
    │   │   ├── actionExecutor.ts
    │   │   ├── flashUtils.ts
    │   │   ├── keypair.ts
    │   │   ├── send_tx.ts
    │   │   └── tokenMetadata.ts
    │   └── vercel-ai/
    │       └── index.ts
    ├── test/
    │   ├── index.ts
    │   ├── agent_sdks/
    │   │   └── vercel_ai.ts
    │   └── tools/
    │       ├── 3land.ts
    │       ├── create_meteora_dlmm_pool.ts
    │       └── create_meteora_dynamic_amm_pool.ts
    ├── .github/
    │   ├── pull_request_template.md
    │   ├── ISSUE_TEMPLATE/
    │   │   ├── bug_report.md
    │   │   └── feature_request.md
    │   └── workflows/
    │       └── build.yml
    └── .husky/
        └── pre-commit

================================================
File: README.md
================================================
<div align="center">

# Solana Agent Kit

![Solana Agent Kit Cover 1 (3)](https://github.com/user-attachments/assets/cfa380f6-79d9-474d-9852-3e1976c6de70)

![NPM Downloads](https://img.shields.io/npm/dm/solana-agent-kit?style=for-the-badge)
![GitHub forks](https://img.shields.io/github/forks/sendaifun/solana-agent-kit?style=for-the-badge)
![GitHub License](https://img.shields.io/github/license/sendaifun/solana-agent-kit?style=for-the-badge)

</div>

An open-source toolkit for connecting AI agents to Solana protocols. Now, any agent, using any model can autonomously perform 60+ Solana actions:

- Trade tokens
- Launch new tokens
- Lend assets
- Send compressed airdrops
- Execute blinks
- Launch tokens on AMMs
- And more...

Anyone - whether an SF-based AI researcher or a crypto-native builder - can bring their AI agents trained with any model and seamlessly integrate with Solana.

[![Run on Repl.it](https://replit.com/badge/github/sendaifun/solana-agent-kit)](https://replit.com/@sendaifun/Solana-Agent-Kit)
> Replit template created by [Arpit Singh](https://github.com/The-x-35)

## 🔧 Core Blockchain Features

- **Token Operations**
  - Deploy SPL tokens by Metaplex
  - Transfer assets
  - Balance checks
  - Stake SOL
  - Zk compressed Airdrop by Light Protocol and Helius
- **NFTs on 3.Land**
  - Create your own collection
  - NFT creation and automatic listing on 3.land
  - List your NFT for sale in any SPL token
- **NFT Management via Metaplex**
  - Collection deployment
  - NFT minting
  - Metadata management
  - Royalty configuration

- **DeFi Integration**
  - Jupiter Exchange swaps
  - Launch on Pump via PumpPortal
  - Raydium pool creation (CPMM, CLMM, AMMv4)
  - Orca Whirlpool integration
  - Manifest market creation, and limit orders
  - Meteora Dynamic AMM, DLMM Pool, and Alpha Vault
  - Openbook market creation
  - Register and Resolve SNS
  - Jito Bundles
  - Pyth Price feeds for fetching Asset Prices
  - Register/resolve Alldomains
  - Perpetuals Trading with Adrena Protocol
  - Drift Vaults, Perps, Lending and Borrowing

- **Solana Blinks**
   - Lending by Lulo (Best APR for USDC)
   - Send Arcade Games
   - JupSOL staking
   - Solayer SOL (sSOL)staking

- **Non-Financial Actions**
  - Gib Work for registering bounties

## 🤖 AI Integration Features

- **LangChain Integration**
  - Ready-to-use LangChain tools for blockchain operations
  - Autonomous agent support with React framework
  - Memory management for persistent interactions
  - Streaming responses for real-time feedback

- **Vercel AI SDK Integration**
  - Vercel AI SDK for AI agent integration
  - Framework agnostic support
  - Quick and easy toolkit setup

- **Autonomous Modes**
  - Interactive chat mode for guided operations
  - Autonomous mode for independent agent actions
  - Configurable action intervals
  - Built-in error handling and recovery

- **AI Tools**
  - DALL-E integration for NFT artwork generation
  - Natural language processing for blockchain commands
  - Price feed integration for market analysis
  - Automated decision-making capabilities

## 📃 Documentation
You can view the full documentation of the kit at [docs.solanaagentkit.xyz](https://docs.solanaagentkit.xyz)

## 📦 Installation

```bash
npm install solana-agent-kit
```

## Quick Start

```typescript
import { SolanaAgentKit, createSolanaTools } from "solana-agent-kit";

// Initialize with private key and optional RPC URL
const agent = new SolanaAgentKit(
  "your-wallet-private-key-as-base58",
  "https://api.mainnet-beta.solana.com",
  "your-openai-api-key"
);

// Create LangChain tools
const tools = createSolanaTools(agent);
```

## Usage Examples

### Deploy a New Token

```typescript
const result = await agent.deployToken(
  "my ai token", // name
  "uri", // uri
  "token", // symbol
  9, // decimals
  1000000 // initial supply
);

console.log("Token Mint Address:", result.mint.toString());
```
### Create NFT Collection on 3Land
```typescript
const isDevnet = false; // (Optional) if not present TX takes place in Mainnet
const priorityFeeParam = 1000000; // (Optional) if not present the default priority fee will be 50000

 const collectionOpts: CreateCollectionOptions = {
    collectionName: "",
    collectionSymbol: "",
    collectionDescription: "",
    mainImageUrl: ""
  };

const result = await agent.create3LandCollection(
      collectionOpts,
      isDevnet, // (Optional) if not present TX takes place in Mainnet
      priorityFeeParam, //(Optional)
    );
```

### Create NFT on 3Land
When creating an NFT using 3Land's tool, it automatically goes for sale on 3.land website
```typescript
const isDevnet = true; // (Optional) if not present TX takes place in Mainnet
const withPool = true; // (Optional) only present if NFT will be created with a Liquidity Pool for a specific SPL token
const priorityFeeParam = 1000000; // (Optional) if not present the default priority fee will be 50000
const collectionAccount = ""; //hash for the collection
const createItemOptions: CreateSingleOptions = {
  itemName: "",
  sellerFee: 500, //5%
  itemAmount: 100, //total items to be created
  itemSymbol: "",
  itemDescription: "",
  traits: [
    { trait_type: "", value: "" },
  ],
  price: 0, //100000000 == 0.1 sol, can be set to 0 for a free mint
  splHash: "", //present if listing is on a specific SPL token, if not present sale will be on $SOL, must be present if "withPool" is true
  poolName: "", // Only present if "withPool" is true
  mainImageUrl: "",
};
const result = await agent.create3LandNft(
  collectionAccount,
  createItemOptions,
  isDevnet, // (Optional) if not present TX takes place in Mainnet
  withPool
  priorityFeeParam, //(Optional)
);

```


### Create NFT Collection

```typescript
const collection = await agent.deployCollection({
  name: "My NFT Collection",
  uri: "https://arweave.net/metadata.json",
  royaltyBasisPoints: 500, // 5%
  creators: [
    {
      address: "creator-wallet-address",
      percentage: 100,
    },
  ],
});
```

### Swap Tokens

```typescript
import { PublicKey } from "@solana/web3.js";

const signature = await agent.trade(
  new PublicKey("target-token-mint"),
  100, // amount
  new PublicKey("source-token-mint"),
  300 // 3% slippage
);
```

### Lend Tokens

```typescript
import { PublicKey } from "@solana/web3.js";

const signature = await agent.lendAssets(
  100 // amount of USDC to lend
);
```

### Stake SOL

```typescript
const signature = await agent.stake(
  1 // amount in SOL to stake
);
```

### Stake SOL on Solayer

```typescript
const signature = await agent.restake(
  1 // amount in SOL to stake
);

```

### Send an SPL Token Airdrop via ZK Compression

```typescript
import { PublicKey } from "@solana/web3.js";

(async () => {
  console.log(
    "~Airdrop cost estimate:",
    getAirdropCostEstimate(
      1000, // recipients
      30_000 // priority fee in lamports
    )
  );

  const signature = await agent.sendCompressedAirdrop(
    new PublicKey("JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN"), // mint
    42, // amount per recipient
    [
      new PublicKey("1nc1nerator11111111111111111111111111111111"),
      // ... add more recipients
    ],
    30_000 // priority fee in lamports
  );
})();
```

### Fetch Price Data from Pyth

```typescript

const priceFeedID = await agent.getPythPriceFeedID("SOL");

const price = await agent.getPythPrice(priceFeedID);

console.log("Price of SOL/USD:", price);
```

### Open PERP Trade

```typescript
import { PublicKey } from "@solana/web3.js";

const signature = await agent.openPerpTradeLong({
  price: 300, // $300 SOL Max price
  collateralAmount: 10, // 10 jitoSOL in
  collateralMint: new PublicKey("J1toso1uCk3RLmjorhTtrVwY9HJ7X8V9yYac6Y7kGCPn"), // jitoSOL
  leverage: 50000, // x5
  tradeMint: new PublicKey("J1toso1uCk3RLmjorhTtrVwY9HJ7X8V9yYac6Y7kGCPn"), // jitoSOL
  slippage: 0.3, // 0.3%
});
```

### Close PERP Trade

```typescript
import { PublicKey } from "@solana/web3.js";

const signature = await agent.closePerpTradeLong({
  price: 200, // $200 SOL price
  tradeMint: new PublicKey("J1toso1uCk3RLmjorhTtrVwY9HJ7X8V9yYac6Y7kGCPn"), // jitoSOL
});
```

### Close Empty Token Accounts

``` typescript

const { signature } = await agent.closeEmptyTokenAccounts();
```

### Create a Drift account

Create a drift account with an initial token deposit.

```typescript
const result = await agent.createDriftUserAccount()
```

### Create a Drift Vault

Create a drift vault.

```typescript
const signature = await agent.createDriftVault({
  name: "my-drift-vault",
  marketName: "USDC-SPOT",
  redeemPeriod: 1, // in days
  maxTokens: 100000, // in token units e.g 100000 USDC
  minDepositAmount: 5, // in token units e.g 5 USDC
  managementFee: 1, // 1%
  profitShare: 10, // 10%
  hurdleRate: 5, // 5%
  permissioned: false, // public vault or whitelist
})
```

### Deposit into a Drift Vault

Deposit tokens into a drift vault.

```typescript
const signature = await agent.depositIntoDriftVault(100, "41Y8C4oxk4zgJT1KXyQr35UhZcfsp5mP86Z2G7UUzojU")
```

### Deposit into your Drift account

Deposit tokens into your drift account.

```typescript
const {txSig} = await agent.depositToDriftUserAccount(100, "USDC")
```

### Derive a Drift Vault address

Derive a drift vault address.

```typescript
const vaultPublicKey = await agent.deriveDriftVaultAddress("my-drift-vault")
```

### Do you have a Drift account

Check if agent has a drift account.

```typescript
const {hasAccount, account} = await agent.doesUserHaveDriftAccount()
```

### Get Drift account information

Get drift account information.

```typescript
const accountInfo = await agent.driftUserAccountInfo()
```

### Request withdrawal from Drift vault

Request withdrawal from drift vault.

```typescript
const signature = await agent.requestWithdrawalFromDriftVault(100, "41Y8C4oxk4zgJT1KXyQr35UhZcfsp5mP86Z2G7UUzojU")
```

### Carry out a perpetual trade using a Drift vault

Open a perpertual trade using a drift vault that is delegated to you.

```typescript
const signature = await agent.tradeUsingDelegatedDriftVault({
  vault: "41Y8C4oxk4zgJT1KXyQr35UhZcfsp5mP86Z2G7UUzojU",
  amount: 500,
  symbol: "SOL",
  action: "long",
  type: "limit",
  price: 180 // Please long limit order at $180/SOL
})
```

### Carry out a perpetual trade using your Drift account

Open a perpertual trade using your drift account.

```typescript
const signature = await agent.tradeUsingDriftPerpAccount({
  amount: 500,
  symbol: "SOL",
  action: "long",
  type: "limit",
  price: 180 // Please long limit order at $180/SOL
})
```

### Update Drift vault parameters

Update drift vault parameters.

```typescript
const signature = await agent.updateDriftVault({
  name: "my-drift-vault",
  marketName: "USDC-SPOT",
  redeemPeriod: 1, // in days
  maxTokens: 100000, // in token units e.g 100000 USDC
  minDepositAmount: 5, // in token units e.g 5 USDC
  managementFee: 1, // 1%
  profitShare: 10, // 10%
  hurdleRate: 5, // 5%
  permissioned: false, // public vault or whitelist
})
```

### Withdraw from Drift account

Withdraw tokens from your drift account.

```typescript
const {txSig} = await agent.withdrawFromDriftAccount(100, "USDC")
```

### Borrow from Drift

Borrow tokens from drift.

```typescript
const {txSig} = await agent.withdrawFromDriftAccount(1, "SOL", true)
```

### Repay Drift loan

Repay a loan from drift.

```typescript
const {txSig} = await agent.depositToDriftUserAccount(1, "SOL", true)
```

### Withdraw from Drift vault

Withdraw tokens from a drift vault after the redemption period has elapsed.

```typescript
const signature = await agent.withdrawFromDriftVault( "41Y8C4oxk4zgJT1KXyQr35UhZcfsp5mP86Z2G7UUzojU")
```

### Update the address a Drift vault is delegated to

Update the address a drift vault is delegated to.

```typescript
const signature = await agent.updateDriftVaultDelegate("41Y8C4oxk4zgJT1KXyQr35UhZcfsp5mP86Z2G7UUzojU", "new-address")
```

### Get Voltr Vault Position Values

Get the current position values and total value of assets in a Voltr vault.

```typescript
const values = await agent.voltrGetPositionValues("7opUkqYtxmQRriZvwZkPcg6LqmGjAh1RSEsVrdsGDx5K")
```

### Deposit into Voltr Strategy

Deposit assets into a specific strategy within a Voltr vault.

```typescript
const signature = await agent.voltrDepositStrategy(
  new BN("1000000000"), // amount in base units (e.g., 1 USDC = 1000000)
  "7opUkqYtxmQRriZvwZkPcg6LqmGjAh1RSEsVrdsGDx5K", // vault
  "9ZQQYvr4x7AMqd6abVa1f5duGjti5wk1MHsX6hogPsLk"  // strategy
)
```

### Withdraw from Voltr Strategy

Withdraw assets from a specific strategy within a Voltr vault.

```typescript
const signature = await agent.voltrWithdrawStrategy(
  new BN("1000000000"), // amount in base units (e.g., 1 USDC = 1000000)
  "7opUkqYtxmQRriZvwZkPcg6LqmGjAh1RSEsVrdsGDx5K", // vault
  "9ZQQYvr4x7AMqd6abVa1f5duGjti5wk1MHsX6hogPsLk"  // strategy
)
```

### Get a Solana asset by its ID

```typescript
const asset = await agent.getAsset("41Y8C4oxk4zgJT1KXyQr35UhZcfsp5mP86Z2G7UUzojU")
```

### Get a price inference from Allora

Get the price for a given token and timeframe from Allora's API

```typescript
const sol5mPrice = await agent.getPriceInference("SOL", "5m");
console.log("5m price inference of SOL/USD:", sol5mPrice);
```

### List all topics from Allora

```typescript
const topics = await agent.getAllTopics();
console.log("Allora topics:", topics);
```

### Get an inference for an specific topic from Allora

```typescript
const inference = await agent.getInferenceByTopicId(42);
console.log("Allora inference for topic 42:", inference);
```

## Examples

### LangGraph Multi-Agent System

The repository includes an advanced example of building a multi-agent system using LangGraph and Solana Agent Kit. Located in `examples/agent-kit-langgraph`, this example demonstrates:

- Multi-agent architecture using LangGraph's StateGraph
- Specialized agents for different tasks:
  - General purpose agent for basic queries
  - Transfer/Swap agent for transaction operations
  - Read agent for blockchain data queries
  - Manager agent for routing and orchestration
- Fully typed TypeScript implementation
- Environment-based configuration

Check out the [LangGraph example](examples/agent-kit-langgraph) for a complete implementation of an advanced Solana agent system.

## Dependencies

The toolkit relies on several key Solana and Metaplex libraries:

- @solana/web3.js
- @solana/spl-token
- @metaplex-foundation/digital-asset-standard-api
- @metaplex-foundation/mpl-token-metadata
- @metaplex-foundation/mpl-core
- @metaplex-foundation/umi
- @lightprotocol/compressed-token
- @lightprotocol/stateless.js

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.
Refer to [CONTRIBUTING.md](CONTRIBUTING.md) for detailed guidelines on how to contribute to this project.

## Contributors

<a href="https://github.com/sendaifun/solana-agent-kit/graphs/contributors">
  <img src="https://contrib.rocks/image?repo=sendaifun/solana-agent-kit" />
</a>

## Star History

[![Star History Chart](https://api.star-history.com/svg?repos=sendaifun/solana-agent-kit&type=Date)](https://star-history.com/#sendaifun/solana-agent-kit&Date)

## License

Apache-2 License

## Funding

If you wanna give back any tokens or donations to the OSS community -- The Public Solana Agent Kit Treasury Address:

Solana Network : EKHTbXpsm6YDgJzMkFxNU1LNXeWcUW7Ezf8mjUNQQ4Pa

## Security

This toolkit handles private keys and transactions. Always ensure you're using it in a secure environment and never share your private keys.


================================================
File: CITATION.cff
================================================
cff-version: 1.2.0
title: Solana Agent Kit
message: >-
  If you use this software, please cite it using the
  metadata from this file.
type: software
authors:
  - name: SendAI
repository-code: 'https://github.com/sendaifun/solana-agent-kit'
url: 'https://github.com/sendaifun/solana-agent-kit'
abstract: >-
  Connect any AI Agents to Solana Protocols
keywords:
  - solana
  - blockchain
  - web3
  - agent
  - toolkit
license: Apache-2.0
version: 1.2.0
preferred-citation:
  type: software
  title: Solana Agent Kit
  abstract: Connect any AI Agents to Solana Protocols
  version: 1.2.0
  date-released: '2024-12-21'
  license: Apache-2.0
  url: 'https://github.com/sendaifun/solana-agent-kit'
  repository-code: 'https://github.com/sendaifun/solana-agent-kit'
  authors:
  - name: SendAI


================================================
File: CONTRIBUTING.md
================================================
# Contributing to Solana Agent Kit

First off, thank you for considering contributing to Solana Agent Kit! 🎉 Your contributions are **greatly appreciated**.

## Table of Contents

- [Contributing to Solana Agent Kit](#contributing-to-solana-agent-kit)
  - [Table of Contents](#table-of-contents)
  - [Code of Conduct](#code-of-conduct)
  - [How Can I Contribute?](#how-can-i-contribute)
    - [Reporting Bugs](#reporting-bugs)
    - [Suggesting Enhancements](#suggesting-enhancements)
    - [Your First Code Contribution](#your-first-code-contribution)
    - [Pull Requests](#pull-requests)
  - [Style Guides](#style-guides)
    - [Code Style](#code-style)
    - [Commit Messages](#commit-messages)
    - [Naming Conventions](#naming-conventions)
  - [Development Setup](#development-setup)
    - [Prerequisites](#prerequisites)
    - [Installation](#installation)
    - [Building the Project](#building-the-project)
    - [Running Tests](#running-tests)
    - [Generating Documentation](#generating-documentation)
  - [Security](#security)
  - [License](#license)

## Code of Conduct

This project adheres to the [Contributor Covenant Code of Conduct](https://www.contributor-covenant.org/version/2/0/code_of_conduct/). By participating, you are expected to uphold this code. Please report unacceptable behavior to [aryan@sendai.fun](mailto:aryan@sendai.fun).

## How Can I Contribute?

### Reporting Bugs

**Great**! Opening an issue is the best way to help us improve. Here's how you can report a bug:

1. **Search** the [existing issues](https://github.com/sendaifun/solana-agent-kit/issues) to make sure it hasn't been reported.
2. **Open a new issue** and fill out the template with as much information as possible.
3. **Provide reproduction steps** if applicable.

### Suggesting Enhancements

We welcome your ideas for improving Solana Agent Kit! To suggest an enhancement:

1. **Search** the [existing issues](https://github.com/sendaifun/solana-agent-kit/issues) to see if it's already been suggested.
2. **Open a new issue** and describe your idea in detail.

### Your First Code Contribution

Unsure where to start? You can help out by:

- Fixing simple bugs.
- Improving documentation.
- Adding tests.

Check out the [Good First Issues](https://github.com/sendaifun/solana-agent-kit/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22) to get started!

### Pull Requests

1. **Fork** the repository.
2. **Create** a new branch for your feature or bugfix.
   ```bash
   git checkout -b feature/your-feature-name
   ```
3. **Commit** your changes with clear and descriptive messages.
4. **Push** to your fork.
   ```bash
   git push origin feature/your-feature-name
   ```
5. **Open a Pull Request** against the `main` branch of this repository.

## Style Guides

### Code Style

- **Language**: TypeScript
- **Formatting**: Follow the existing codebase formatting. Consider using [Prettier](https://prettier.io/) for consistent code formatting.
- **Code Quality**: Adhere to the code quality rules defined in `.eslintrc`. Ensure all checks pass before submitting a PR.

### Commit Messages

Use [Conventional Commits](https://www.conventionalcommits.org/en/v1.0.0/) for your commit messages. Examples:

- `feat: add ability to deploy new SPL token`
- `fix: handle edge case when deploying collection`
- `docs: update README with new usage examples`

### Naming Conventions

- **Variables and Functions**: `camelCase`
- **Classes and Types**: `PascalCase`
- **Constants**: `UPPER_SNAKE_CASE`

## Development Setup

### Prerequisites

- **Node.js**: v23.x or higher
- **npm**: v10.x or higher
- **Git**: Installed and configured

### Installation

1. **Clone** the repository:
   ```bash
   git clone https://github.com/yourusername/solana-agent-kit.git
   ```
2. **Navigate** to the project directory:
   ```bash
   cd solana-agent-kit
   ```
3. **Install** dependencies:
   ```bash
   pnpm install
   ```

### Building the Project

To compile the TypeScript code:

```bash
pnpm run build
```

### Running Tests

To execute the test suite:

```bash
pnpm run test
```

### Generating Documentation

To generate the project documentation using TypeDoc:

```bash
npm run docs
```

The documentation will be available in the `docs/` directory.

## Security

This toolkit handles sensitive information such as private keys and API keys. **Ensure you never commit `.env` files or any sensitive data**. Review the `.gitignore` to confirm that sensitive files are excluded.

For security vulnerabilities, please follow the [responsible disclosure](mailto:aryan@sendai.fun) process.

## License

This project is licensed under the [ISC License](LICENSE).

---


================================================
File: LICENSE
================================================
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [2024] [SendAI]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.


================================================
File: SECURITY.md
================================================
# Security Policy

## Reporting a Vulnerability

We take the security of our software seriously. If you believe you have found a security vulnerability, please report it to us following these guidelines:

### Reporting Process

1. **DO NOT** create a public GitHub issue for the vulnerability
2. Email your findings to:
   - Primary: aryan@sendai.fun
   - Secondary: dev@sendai.fun

### What to Include

Please include the following information in your report:

- A clear description of the vulnerability
- Steps to reproduce the issue
- Affected versions
- Any potential impacts
- Optional: Suggested fixes or mitigations

### Response Timeline

- We will acknowledge receipt of your vulnerability report within 48 hours
- We aim to send a more detailed response within 5 business days
- We will keep you informed of our progress throughout the process

### Security Updates

Security updates will be released as soon as possible after we have confirmed and fixed the vulnerability. Updates will be published through:

- GitHub releases
- Security advisories
- Email notifications to affected parties (if applicable)

## Supported Versions

As an open-source project under the Apache 2.0 license, we focus our security updates on the latest stable release. While you're free to use any version as per the Apache 2.0 license terms, we strongly recommend using the most recent version for the best security posture.

| Version | Security Updates |
| ------- | --------------- |
| Latest Release | ✅ Active |
| Previous Releases | ⚠️ Use at your own risk |

Note: The Apache 2.0 license comes with NO WARRANTIES or CONDITIONS of any kind, either express or implied. Users are responsible for their own security assessment when using any version of this software.

## Security Best Practices

When using this software, please follow these security best practices:
- Keep your private keys secure and never share them
- Regularly update to the latest version
- Review transaction details before signing
- Use appropriate access controls in production environments

## Bug Bounty Program

Currently, we do not offer a bug bounty program. However, we greatly appreciate responsible disclosure of security vulnerabilities.

## License

This security policy is part of our project licensed under [Apache 2.0](LICENSE).


================================================
File: package.json
================================================
{
  "name": "solana-agent-kit",
  "version": "1.4.4",
  "description": "connect any ai agents to solana protocols",
  "main": "dist/index.js",
  "types": "dist/index.d.ts",
  "scripts": {
    "build": "tsc",
    "docs": "typedoc src --out docs",
    "test": "tsx test/index.ts",
    "test:vercel-ai": "tsx test/agent_sdks/vercel_ai.ts",
    "generate": "tsx src/utils/keypair.ts",
    "lint": "eslint . --ext .ts",
    "lint:fix": "eslint . --ext .ts --fix",
    "format": "prettier --write \"src/**/*.ts\" \"test/**/*.ts\"",
    "prepare": "husky"
  },
  "engines": {
    "node": ">=22.0.0",
    "pnpm": ">=8.0.0"
  },
  "keywords": [
    "solana",
    "agent",
    "ai",
    "solana agent kit",
    "sendai"
  ],
  "author": "sendaifun",
  "license": "Apache-2.0",
  "dependencies": {
    "@3land/listings-sdk": "^0.0.7",
    "@ai-sdk/openai": "^1.0.11",
    "@alloralabs/allora-sdk": "^0.1.0",
    "@bonfida/spl-name-service": "^3.0.7",
    "@cks-systems/manifest-sdk": "0.1.59",
    "@coral-xyz/anchor": "0.29",
    "@drift-labs/sdk": "2.108.0-beta.4",
    "@drift-labs/vaults-sdk": "^0.3.2",
    "@langchain/core": "^0.3.26",
    "@langchain/groq": "^0.1.2",
    "@langchain/langgraph": "^0.2.36",
    "@langchain/openai": "^0.3.16",
    "@lightprotocol/compressed-token": "^0.17.1",
    "@lightprotocol/stateless.js": "^0.17.1",
    "@mercurial-finance/dynamic-amm-sdk": "^1.1.19",
    "@metaplex-foundation/digital-asset-standard-api": "^1.0.4",
    "@metaplex-foundation/mpl-core": "^1.1.1",
    "@metaplex-foundation/mpl-token-metadata": "^3.3.0",
    "@metaplex-foundation/mpl-toolbox": "^0.9.4",
    "@metaplex-foundation/umi": "^0.9.2",
    "@metaplex-foundation/umi-bundle-defaults": "^0.9.2",
    "@metaplex-foundation/umi-web3js-adapters": "^0.9.2",
    "@meteora-ag/alpha-vault": "^1.1.7",
    "@meteora-ag/dlmm": "^1.3.0",
    "@onsol/tldparser": "^0.6.7",
    "@orca-so/common-sdk": "0.6.4",
    "@orca-so/whirlpools-sdk": "^0.13.12",
    "@pythnetwork/hermes-client": "^1.3.0",
    "@raydium-io/raydium-sdk-v2": "0.1.95-alpha",
    "@solana/spl-token": "^0.4.9",
    "@solana/web3.js": "^1.98.0",
    "@sqds/multisig": "^2.1.3",
    "@tensor-oss/tensorswap-sdk": "^4.5.0",
    "@tiplink/api": "^0.3.1",
    "@voltr/vault-sdk": "^0.1.1",
    "ai": "^4.0.22",
    "bn.js": "^5.2.1",
    "bs58": "^6.0.0",
    "chai": "^5.1.2",
    "decimal.js": "^10.4.3",
    "dotenv": "^16.4.7",
    "flash-sdk": "^2.24.3",
    "form-data": "^4.0.1",
    "langchain": "^0.3.8",
    "openai": "^4.77.0",
    "typedoc": "^0.27.6",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.6",
    "@types/chai": "^5.0.1",
    "@types/node": "^22.10.2",
    "@typescript-eslint/eslint-plugin": "^8.18.2",
    "@typescript-eslint/parser": "^8.18.2",
    "eslint": "^8.56.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-prettier": "^5.2.1",
    "husky": "^9.1.7",
    "lint-staged": "^15.3.0",
    "prettier": "^3.4.2",
    "tsx": "^4.19.2",
    "typescript": "^5.7.2"
  },
  "packageManager": "pnpm@9.15.3"
}


================================================
File: tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "es2020",
    "module": "commonjs",
    "lib": ["es2020", "dom"],
    "declaration": true,
    "declarationMap": true,
    "sourceMap": true,
    "outDir": "./dist",
    "rootDir": "./src",
    "strict": true,
    "noImplicitAny": true,
    "strictBindCallApply": true,
    "strictPropertyInitialization": true,
    "noImplicitThis": true,
    "useUnknownInCatchVariables": true,
    "alwaysStrict": true,
    "exactOptionalPropertyTypes": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "noImplicitOverride": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "skipLibCheck": true,
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist", "**/*.test.ts"]
}


================================================
File: .env.example
================================================
OPENAI_API_KEY=
RPC_URL=
SOLANA_PRIVATE_KEY=
JUPITER_REFERRAL_ACCOUNT=
JUPITER_FEE_BPS=
FLASH_PRIVILEGE= referral | nft | none
FLEXLEND_API_KEY=
HELIUS_API_KEY=
ALLORA_API_KEY=
ALLORA_API_URL=
ALLORA_NETWORK= testnet | mainnet


================================================
File: .eslintrc
================================================
{
  "root": true,
  "parser": "@typescript-eslint/parser",
  "plugins": ["@typescript-eslint", "prettier"],
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "prettier"
  ],
  "ignorePatterns": ["examples/**/*", "src/utils/keypair.ts", "test/**/*", "dist/**/*"],
  "rules": {
    "prettier/prettier": "error",
    "no-constant-condition": "off",
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/no-explicit-any": "off",
    "@typescript-eslint/no-empty-object-type": "off",
    "@typescript-eslint/no-unused-vars": ["warn", { "argsIgnorePattern": "^_" }],
    "no-console": ["warn", { "allow": ["warn", "error"] }],
    "curly": ["error", "all"],
    "eqeqeq": ["error", "always"],
    "no-floating-decimal": "error",
    "no-var": "error",
    "prefer-const": "error"
  },
  "env": {
    "browser": true,
    "node": true,
    "es6": true
  },
  "parserOptions": {
    "ecmaVersion": 2020,
    "sourceType": "module"
  }
}


================================================
File: .lintstagedrc
================================================
{
  "**/*.+(ts|tsx)": [
    "eslint . --ext .ts --fix"
  ]
}


================================================
File: .prettierignore
================================================
dist
node_modules
docs
*.md 

================================================
File: .prettierrc
================================================
{
  "semi": true,
  "trailingComma": "all",
  "singleQuote": false,
  "printWidth": 80,
  "tabWidth": 2,
  "useTabs": false,
  "bracketSpacing": true,
  "arrowParens": "always",
  "endOfLine": "lf",
  "bracketSameLine": false
} 

================================================
File: docs/modules.html
================================================
<!DOCTYPE html><html class="default" lang="en" data-base="."><head><meta charset="utf-8"/><meta http-equiv="x-ua-compatible" content="IE=edge"/><title>solana-agent-kit</title><meta name="description" content="Documentation for solana-agent-kit"/><meta name="viewport" content="width=device-width, initial-scale=1"/><link rel="stylesheet" href="assets/style.css"/><link rel="stylesheet" href="assets/highlight.css"/><script defer src="assets/main.js"></script><script async src="assets/icons.js" id="tsd-icons-script"></script><script async src="assets/search.js" id="tsd-search-script"></script><script async src="assets/navigation.js" id="tsd-nav-script"></script></head><body><script>document.documentElement.dataset.theme = localStorage.getItem("tsd-theme") || "os";document.body.style.display="none";setTimeout(() => app?app.showPage():document.body.style.removeProperty("display"),500)</script><header class="tsd-page-toolbar"><div class="tsd-toolbar-contents container"><div class="table-cell" id="tsd-search"><div class="field"><label for="tsd-search-field" class="tsd-widget tsd-toolbar-icon search no-caption"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="assets/icons.svg#icon-search"></use></svg></label><input type="text" id="tsd-search-field" aria-label="Search"/></div><div class="field"><div id="tsd-toolbar-links"></div></div><ul class="results"><li class="state loading">Preparing search index...</li><li class="state failure">The search index is not available</li></ul><a href="index.html" class="title">solana-agent-kit</a></div><div class="table-cell" id="tsd-widgets"><a href="#" class="tsd-widget tsd-toolbar-icon menu no-caption" data-toggle="menu" aria-label="Menu"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="assets/icons.svg#icon-menu"></use></svg></a></div></div></header><div class="container container-main"><div class="col-content"><div class="tsd-page-title"><ul class="tsd-breadcrumb"><li><a href="modules.html">solana-agent-kit</a></li></ul><h1>solana-agent-kit</h1></div><details class="tsd-panel-group tsd-member-group tsd-accordion" open><summary class="tsd-accordion-summary" data-key="section-Classes"><h2><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="assets/icons.svg#icon-chevronDown"></use></svg> Classes</h2></summary><dl class="tsd-member-summaries"><dt class="tsd-member-summary"><a id="solanaagentkit" class="tsd-anchor"></a><span class="tsd-member-summary-name"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-128"></use></svg><a href="classes/SolanaAgentKit.html">SolanaAgentKit</a><a href="#solanaagentkit" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="assets/icons.svg#icon-anchor"></use></svg></a></span></dt><dd class="tsd-member-summary"></dd></dl></details><details class="tsd-panel-group tsd-member-group tsd-accordion" open><summary class="tsd-accordion-summary" data-key="section-Interfaces"><h2><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="assets/icons.svg#icon-chevronDown"></use></svg> Interfaces</h2></summary><dl class="tsd-member-summaries"><dt class="tsd-member-summary"><a id="action" class="tsd-anchor"></a><span class="tsd-member-summary-name"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-256"></use></svg><a href="interfaces/Action.html">Action</a><a href="#action" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="assets/icons.svg#icon-anchor"></use></svg></a></span></dt><dd class="tsd-member-summary"></dd><dt class="tsd-member-summary"><a id="actionexample" class="tsd-anchor"></a><span class="tsd-member-summary-name"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-256"></use></svg><a href="interfaces/ActionExample.html">ActionExample</a><a href="#actionexample" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="assets/icons.svg#icon-anchor"></use></svg></a></span></dt><dd class="tsd-member-summary"></dd><dt class="tsd-member-summary"><a id="batchorderpattern" class="tsd-anchor"></a><span class="tsd-member-summary-name"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-256"></use></svg><a href="interfaces/BatchOrderPattern.html">BatchOrderPattern</a><a href="#batchorderpattern" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="assets/icons.svg#icon-anchor"></use></svg></a></span></dt><dd class="tsd-member-summary"></dd><dt class="tsd-member-summary"><a id="collectiondeployment" class="tsd-anchor"></a><span class="tsd-member-summary-name"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-256"></use></svg><a href="interfaces/CollectionDeployment.html">CollectionDeployment</a><a href="#collectiondeployment" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="assets/icons.svg#icon-anchor"></use></svg></a></span></dt><dd class="tsd-member-summary"></dd><dt class="tsd-member-summary"><a id="collectionoptions" class="tsd-anchor"></a><span class="tsd-member-summary-name"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-256"></use></svg><a href="interfaces/CollectionOptions.html">CollectionOptions</a><a href="#collectionoptions" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="assets/icons.svg#icon-anchor"></use></svg></a></span></dt><dd class="tsd-member-summary"></dd><dt class="tsd-member-summary"><a id="config" class="tsd-anchor"></a><span class="tsd-member-summary-name"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-256"></use></svg><a href="interfaces/Config.html">Config</a><a href="#config" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="assets/icons.svg#icon-anchor"></use></svg></a></span></dt><dd class="tsd-member-summary"></dd><dt class="tsd-member-summary"><a id="creator" class="tsd-anchor"></a><span class="tsd-member-summary-name"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-256"></use></svg><a href="interfaces/Creator.html">Creator</a><a href="#creator" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="assets/icons.svg#icon-anchor"></use></svg></a></span></dt><dd class="tsd-member-summary"></dd><dt class="tsd-member-summary"><a id="fetchpriceresponse" class="tsd-anchor"></a><span class="tsd-member-summary-name"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-256"></use></svg><a href="interfaces/FetchPriceResponse.html">FetchPriceResponse</a><a href="#fetchpriceresponse" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="assets/icons.svg#icon-anchor"></use></svg></a></span></dt><dd class="tsd-member-summary"></dd><dt class="tsd-member-summary"><a id="flashclosetradeparams" class="tsd-anchor"></a><span class="tsd-member-summary-name"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-256"></use></svg><a href="interfaces/FlashCloseTradeParams.html">FlashCloseTradeParams</a><a href="#flashclosetradeparams" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="assets/icons.svg#icon-anchor"></use></svg></a></span></dt><dd class="tsd-member-summary"></dd><dt class="tsd-member-summary"><a id="flashtradeparams" class="tsd-anchor"></a><span class="tsd-member-summary-name"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-256"></use></svg><a href="interfaces/FlashTradeParams.html">FlashTradeParams</a><a href="#flashtradeparams" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="assets/icons.svg#icon-anchor"></use></svg></a></span></dt><dd class="tsd-member-summary"></dd><dt class="tsd-member-summary"><a id="gibworkcreatetaskreponse" class="tsd-anchor"></a><span class="tsd-member-summary-name"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-256"></use></svg><a href="interfaces/GibworkCreateTaskReponse.html">GibworkCreateTaskReponse</a><a href="#gibworkcreatetaskreponse" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="assets/icons.svg#icon-anchor"></use></svg></a></span></dt><dd class="tsd-member-summary"></dd><dt class="tsd-member-summary"><a id="heliuswebhookidresponse" class="tsd-anchor"></a><span class="tsd-member-summary-name"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-256"></use></svg><a href="interfaces/HeliusWebhookIdResponse.html">HeliusWebhookIdResponse</a><a href="#heliuswebhookidresponse" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="assets/icons.svg#icon-anchor"></use></svg></a></span></dt><dd class="tsd-member-summary"></dd><dt class="tsd-member-summary"><a id="heliuswebhookresponse" class="tsd-anchor"></a><span class="tsd-member-summary-name"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-256"></use></svg><a href="interfaces/HeliusWebhookResponse.html">HeliusWebhookResponse</a><a href="#heliuswebhookresponse" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="assets/icons.svg#icon-anchor"></use></svg></a></span></dt><dd class="tsd-member-summary"></dd><dt class="tsd-member-summary"><a id="jupitertokendata" class="tsd-anchor"></a><span class="tsd-member-summary-name"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-256"></use></svg><a href="interfaces/JupiterTokenData.html">JupiterTokenData</a><a href="#jupitertokendata" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="assets/icons.svg#icon-anchor"></use></svg></a></span></dt><dd class="tsd-member-summary"></dd><dt class="tsd-member-summary"><a id="luloaccountdetailsresponse" class="tsd-anchor"></a><span class="tsd-member-summary-name"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-256"></use></svg><a href="interfaces/LuloAccountDetailsResponse.html">LuloAccountDetailsResponse</a><a href="#luloaccountdetailsresponse" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="assets/icons.svg#icon-anchor"></use></svg></a></span></dt><dd class="tsd-member-summary"></dd><dt class="tsd-member-summary"><a id="mintcollectionnftresponse" class="tsd-anchor"></a><span class="tsd-member-summary-name"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-256"></use></svg><a href="interfaces/MintCollectionNFTResponse.html">MintCollectionNFTResponse</a><a href="#mintcollectionnftresponse" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="assets/icons.svg#icon-anchor"></use></svg></a></span></dt><dd class="tsd-member-summary"></dd><dt class="tsd-member-summary"><a id="orderparams" class="tsd-anchor"></a><span class="tsd-member-summary-name"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-256"></use></svg><a href="interfaces/OrderParams.html">OrderParams</a><a href="#orderparams" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="assets/icons.svg#icon-anchor"></use></svg></a></span></dt><dd class="tsd-member-summary"></dd><dt class="tsd-member-summary"><a id="priorityfeeresponse" class="tsd-anchor"></a><span class="tsd-member-summary-name"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-256"></use></svg><a href="interfaces/PriorityFeeResponse.html">PriorityFeeResponse</a><a href="#priorityfeeresponse" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="assets/icons.svg#icon-anchor"></use></svg></a></span></dt><dd class="tsd-member-summary"></dd><dt class="tsd-member-summary"><a id="pumpfunlaunchresponse" class="tsd-anchor"></a><span class="tsd-member-summary-name"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-256"></use></svg><a href="interfaces/PumpfunLaunchResponse.html">PumpfunLaunchResponse</a><a href="#pumpfunlaunchresponse" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="assets/icons.svg#icon-anchor"></use></svg></a></span></dt><dd class="tsd-member-summary"></dd><dt class="tsd-member-summary"><a id="pumpfuntokenoptions" class="tsd-anchor"></a><span class="tsd-member-summary-name"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-256"></use></svg><a href="interfaces/PumpFunTokenOptions.html">PumpFunTokenOptions</a><a href="#pumpfuntokenoptions" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="assets/icons.svg#icon-anchor"></use></svg></a></span></dt><dd class="tsd-member-summary"></dd><dt class="tsd-member-summary"><a id="pythfetchpriceresponse" class="tsd-anchor"></a><span class="tsd-member-summary-name"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-256"></use></svg><a href="interfaces/PythFetchPriceResponse.html">PythFetchPriceResponse</a><a href="#pythfetchpriceresponse" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="assets/icons.svg#icon-anchor"></use></svg></a></span></dt><dd class="tsd-member-summary"></dd><dt class="tsd-member-summary"><a id="pythpricefeediditem" class="tsd-anchor"></a><span class="tsd-member-summary-name"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-256"></use></svg><a href="interfaces/PythPriceFeedIDItem.html">PythPriceFeedIDItem</a><a href="#pythpricefeediditem" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="assets/icons.svg#icon-anchor"></use></svg></a></span></dt><dd class="tsd-member-summary"></dd><dt class="tsd-member-summary"><a id="pythpriceitem" class="tsd-anchor"></a><span class="tsd-member-summary-name"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-256"></use></svg><a href="interfaces/PythPriceItem.html">PythPriceItem</a><a href="#pythpriceitem" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="assets/icons.svg#icon-anchor"></use></svg></a></span></dt><dd class="tsd-member-summary"></dd><dt class="tsd-member-summary"><a id="tokencheck" class="tsd-anchor"></a><span class="tsd-member-summary-name"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-256"></use></svg><a href="interfaces/TokenCheck.html">TokenCheck</a><a href="#tokencheck" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="assets/icons.svg#icon-anchor"></use></svg></a></span></dt><dd class="tsd-member-summary"></dd></dl></details><details class="tsd-panel-group tsd-member-group tsd-accordion" open><summary class="tsd-accordion-summary" data-key="section-Type Aliases"><h2><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="assets/icons.svg#icon-chevronDown"></use></svg> Type Aliases</h2></summary><dl class="tsd-member-summaries"><dt class="tsd-member-summary"><a id="handler" class="tsd-anchor"></a><span class="tsd-member-summary-name"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-2097152"></use></svg><a href="types/Handler.html">Handler</a><a href="#handler" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="assets/icons.svg#icon-anchor"></use></svg></a></span></dt><dd class="tsd-member-summary"></dd></dl></details><details class="tsd-panel-group tsd-member-group tsd-accordion" open><summary class="tsd-accordion-summary" data-key="section-Variables"><h2><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="assets/icons.svg#icon-chevronDown"></use></svg> Variables</h2></summary><dl class="tsd-member-summaries"><dt class="tsd-member-summary"><a id="actions" class="tsd-anchor"></a><span class="tsd-member-summary-name"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-32"></use></svg><a href="variables/ACTIONS.html">ACTIONS</a><a href="#actions" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="assets/icons.svg#icon-anchor"></use></svg></a></span></dt><dd class="tsd-member-summary"></dd></dl></details><details class="tsd-panel-group tsd-member-group tsd-accordion" open><summary class="tsd-accordion-summary" data-key="section-Functions"><h2><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="assets/icons.svg#icon-chevronDown"></use></svg> Functions</h2></summary><dl class="tsd-member-summaries"><dt class="tsd-member-summary"><a id="createsolanatools" class="tsd-anchor"></a><span class="tsd-member-summary-name"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-64"></use></svg><a href="functions/createSolanaTools.html">createSolanaTools</a><a href="#createsolanatools" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="assets/icons.svg#icon-anchor"></use></svg></a></span></dt><dd class="tsd-member-summary"></dd><dt class="tsd-member-summary"><a id="createvercelaitools" class="tsd-anchor"></a><span class="tsd-member-summary-name"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-64"></use></svg><a href="functions/createVercelAITools.html">createVercelAITools</a><a href="#createvercelaitools" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="assets/icons.svg#icon-anchor"></use></svg></a></span></dt><dd class="tsd-member-summary"></dd><dt class="tsd-member-summary"><a id="executeaction" class="tsd-anchor"></a><span class="tsd-member-summary-name"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-64"></use></svg><a href="functions/executeAction.html">executeAction</a><a href="#executeaction" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="assets/icons.svg#icon-anchor"></use></svg></a></span></dt><dd class="tsd-member-summary"></dd><dt class="tsd-member-summary"><a id="findaction" class="tsd-anchor"></a><span class="tsd-member-summary-name"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-64"></use></svg><a href="functions/findAction.html">findAction</a><a href="#findaction" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="assets/icons.svg#icon-anchor"></use></svg></a></span></dt><dd class="tsd-member-summary"></dd><dt class="tsd-member-summary"><a id="getactionexamples" class="tsd-anchor"></a><span class="tsd-member-summary-name"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-64"></use></svg><a href="functions/getActionExamples.html">getActionExamples</a><a href="#getactionexamples" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="assets/icons.svg#icon-anchor"></use></svg></a></span></dt><dd class="tsd-member-summary"></dd></dl></details></div><div class="col-sidebar"><div class="page-menu"><div class="tsd-navigation settings"><details class="tsd-accordion"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="assets/icons.svg#icon-chevronDown"></use></svg>Settings</h3></summary><div class="tsd-accordion-details"><div class="tsd-filter-visibility"><span class="settings-label">Member Visibility</span><ul id="tsd-filter-options"><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-protected" name="protected"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Protected</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-inherited" name="inherited" checked/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Inherited</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-external" name="external"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>External</span></label></li></ul></div><div class="tsd-theme-toggle"><label class="settings-label" for="tsd-theme">Theme</label><select id="tsd-theme"><option value="os">OS</option><option value="light">Light</option><option value="dark">Dark</option></select></div></div></details></div><details open class="tsd-accordion tsd-page-navigation"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="assets/icons.svg#icon-chevronDown"></use></svg>On This Page</h3></summary><div class="tsd-accordion-details"><details open class="tsd-accordion tsd-page-navigation-section"><summary class="tsd-accordion-summary" data-key="section-Classes"><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="assets/icons.svg#icon-chevronDown"></use></svg>Classes</summary><div><a href="#solanaagentkit" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-128"></use></svg><span>Solana<wbr/>Agent<wbr/>Kit</span></a></div></details><details open class="tsd-accordion tsd-page-navigation-section"><summary class="tsd-accordion-summary" data-key="section-Interfaces"><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="assets/icons.svg#icon-chevronDown"></use></svg>Interfaces</summary><div><a href="#action" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-256"></use></svg><span>Action</span></a><a href="#actionexample" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-256"></use></svg><span>Action<wbr/>Example</span></a><a href="#batchorderpattern" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-256"></use></svg><span>Batch<wbr/>Order<wbr/>Pattern</span></a><a href="#collectiondeployment" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-256"></use></svg><span>Collection<wbr/>Deployment</span></a><a href="#collectionoptions" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-256"></use></svg><span>Collection<wbr/>Options</span></a><a href="#config" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-256"></use></svg><span>Config</span></a><a href="#creator" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-256"></use></svg><span>Creator</span></a><a href="#fetchpriceresponse" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-256"></use></svg><span>Fetch<wbr/>Price<wbr/>Response</span></a><a href="#flashclosetradeparams" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-256"></use></svg><span>Flash<wbr/>Close<wbr/>Trade<wbr/>Params</span></a><a href="#flashtradeparams" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-256"></use></svg><span>Flash<wbr/>Trade<wbr/>Params</span></a><a href="#gibworkcreatetaskreponse" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-256"></use></svg><span>Gibwork<wbr/>Create<wbr/>Task<wbr/>Reponse</span></a><a href="#heliuswebhookidresponse" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-256"></use></svg><span>Helius<wbr/>Webhook<wbr/>Id<wbr/>Response</span></a><a href="#heliuswebhookresponse" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-256"></use></svg><span>Helius<wbr/>Webhook<wbr/>Response</span></a><a href="#jupitertokendata" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-256"></use></svg><span>Jupiter<wbr/>Token<wbr/>Data</span></a><a href="#luloaccountdetailsresponse" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-256"></use></svg><span>Lulo<wbr/>Account<wbr/>Details<wbr/>Response</span></a><a href="#mintcollectionnftresponse" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-256"></use></svg><span>Mint<wbr/>CollectionNFTResponse</span></a><a href="#orderparams" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-256"></use></svg><span>Order<wbr/>Params</span></a><a href="#priorityfeeresponse" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-256"></use></svg><span>Priority<wbr/>Fee<wbr/>Response</span></a><a href="#pumpfunlaunchresponse" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-256"></use></svg><span>Pumpfun<wbr/>Launch<wbr/>Response</span></a><a href="#pumpfuntokenoptions" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-256"></use></svg><span>Pump<wbr/>Fun<wbr/>Token<wbr/>Options</span></a><a href="#pythfetchpriceresponse" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-256"></use></svg><span>Pyth<wbr/>Fetch<wbr/>Price<wbr/>Response</span></a><a href="#pythpricefeediditem" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-256"></use></svg><span>Pyth<wbr/>Price<wbr/>FeedIDItem</span></a><a href="#pythpriceitem" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-256"></use></svg><span>Pyth<wbr/>Price<wbr/>Item</span></a><a href="#tokencheck" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-256"></use></svg><span>Token<wbr/>Check</span></a></div></details><details open class="tsd-accordion tsd-page-navigation-section"><summary class="tsd-accordion-summary" data-key="section-Type Aliases"><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="assets/icons.svg#icon-chevronDown"></use></svg>Type Aliases</summary><div><a href="#handler" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-2097152"></use></svg><span>Handler</span></a></div></details><details open class="tsd-accordion tsd-page-navigation-section"><summary class="tsd-accordion-summary" data-key="section-Variables"><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="assets/icons.svg#icon-chevronDown"></use></svg>Variables</summary><div><a href="#actions" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-32"></use></svg><span>ACTIONS</span></a></div></details><details open class="tsd-accordion tsd-page-navigation-section"><summary class="tsd-accordion-summary" data-key="section-Functions"><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="assets/icons.svg#icon-chevronDown"></use></svg>Functions</summary><div><a href="#createsolanatools" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-64"></use></svg><span>create<wbr/>Solana<wbr/>Tools</span></a><a href="#createvercelaitools" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-64"></use></svg><span>create<wbr/>VercelAITools</span></a><a href="#executeaction" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-64"></use></svg><span>execute<wbr/>Action</span></a><a href="#findaction" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-64"></use></svg><span>find<wbr/>Action</span></a><a href="#getactionexamples" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="assets/icons.svg#icon-64"></use></svg><span>get<wbr/>Action<wbr/>Examples</span></a></div></details></div></details></div><div class="site-menu"><nav class="tsd-navigation"><a href="modules.html" class="current">solana-agent-kit</a><ul class="tsd-small-nested-navigation" id="tsd-nav-container"><li>Loading...</li></ul></nav></div></div></div><footer><p class="tsd-generator">Generated using <a href="https://typedoc.org/" target="_blank">TypeDoc</a></p></footer><div class="overlay"></div></body></html>


================================================
File: docs/.nojekyll
================================================
TypeDoc added this file to prevent GitHub Pages from using Jekyll. You can turn off this behavior by setting the `githubPages` option to false.

================================================
File: docs/assets/hierarchy.js
================================================
window.hierarchyData = "eJyrVirKzy8pVrKKjtVRKkpNy0lNLsnMzytWsqqurQUAmx4Kpg=="

================================================
File: docs/assets/highlight.css
================================================
:root {
    --light-hl-0: #795E26;
    --dark-hl-0: #DCDCAA;
    --light-hl-1: #000000;
    --dark-hl-1: #D4D4D4;
    --light-hl-2: #A31515;
    --dark-hl-2: #CE9178;
    --light-hl-3: #AF00DB;
    --dark-hl-3: #C586C0;
    --light-hl-4: #001080;
    --dark-hl-4: #9CDCFE;
    --light-hl-5: #008000;
    --dark-hl-5: #6A9955;
    --light-hl-6: #0000FF;
    --dark-hl-6: #569CD6;
    --light-hl-7: #0070C1;
    --dark-hl-7: #4FC1FF;
    --light-hl-8: #098658;
    --dark-hl-8: #B5CEA8;
    --light-hl-9: #267F99;
    --dark-hl-9: #4EC9B0;
    --light-code-background: #FFFFFF;
    --dark-code-background: #1E1E1E;
}

@media (prefers-color-scheme: light) { :root {
    --hl-0: var(--light-hl-0);
    --hl-1: var(--light-hl-1);
    --hl-2: var(--light-hl-2);
    --hl-3: var(--light-hl-3);
    --hl-4: var(--light-hl-4);
    --hl-5: var(--light-hl-5);
    --hl-6: var(--light-hl-6);
    --hl-7: var(--light-hl-7);
    --hl-8: var(--light-hl-8);
    --hl-9: var(--light-hl-9);
    --code-background: var(--light-code-background);
} }

@media (prefers-color-scheme: dark) { :root {
    --hl-0: var(--dark-hl-0);
    --hl-1: var(--dark-hl-1);
    --hl-2: var(--dark-hl-2);
    --hl-3: var(--dark-hl-3);
    --hl-4: var(--dark-hl-4);
    --hl-5: var(--dark-hl-5);
    --hl-6: var(--dark-hl-6);
    --hl-7: var(--dark-hl-7);
    --hl-8: var(--dark-hl-8);
    --hl-9: var(--dark-hl-9);
    --code-background: var(--dark-code-background);
} }

:root[data-theme='light'] {
    --hl-0: var(--light-hl-0);
    --hl-1: var(--light-hl-1);
    --hl-2: var(--light-hl-2);
    --hl-3: var(--light-hl-3);
    --hl-4: var(--light-hl-4);
    --hl-5: var(--light-hl-5);
    --hl-6: var(--light-hl-6);
    --hl-7: var(--light-hl-7);
    --hl-8: var(--light-hl-8);
    --hl-9: var(--light-hl-9);
    --code-background: var(--light-code-background);
}

:root[data-theme='dark'] {
    --hl-0: var(--dark-hl-0);
    --hl-1: var(--dark-hl-1);
    --hl-2: var(--dark-hl-2);
    --hl-3: var(--dark-hl-3);
    --hl-4: var(--dark-hl-4);
    --hl-5: var(--dark-hl-5);
    --hl-6: var(--dark-hl-6);
    --hl-7: var(--dark-hl-7);
    --hl-8: var(--dark-hl-8);
    --hl-9: var(--dark-hl-9);
    --code-background: var(--dark-code-background);
}

.hl-0 { color: var(--hl-0); }
.hl-1 { color: var(--hl-1); }
.hl-2 { color: var(--hl-2); }
.hl-3 { color: var(--hl-3); }
.hl-4 { color: var(--hl-4); }
.hl-5 { color: var(--hl-5); }
.hl-6 { color: var(--hl-6); }
.hl-7 { color: var(--hl-7); }
.hl-8 { color: var(--hl-8); }
.hl-9 { color: var(--hl-9); }
pre, code { background: var(--code-background); }


================================================
File: docs/assets/icons.js
================================================
(function() {
    addIcons();
    function addIcons() {
        if (document.readyState === "loading") return document.addEventListener("DOMContentLoaded", addIcons);
        const svg = document.body.appendChild(document.createElementNS("http://www.w3.org/2000/svg", "svg"));
        svg.innerHTML = `<g id="icon-1" class="tsd-no-select"><rect fill="var(--color-icon-background)" stroke="var(--color-ts-module)" stroke-width="1.5" x="1" y="1" width="22" height="22" rx="6"></rect><text fill="var(--color-icon-text)" x="50%" y="50%" dominant-baseline="central" text-anchor="middle">M</text></g><g id="icon-2" class="tsd-no-select"><rect fill="var(--color-icon-background)" stroke="var(--color-ts-module)" stroke-width="1.5" x="1" y="1" width="22" height="22" rx="6"></rect><text fill="var(--color-icon-text)" x="50%" y="50%" dominant-baseline="central" text-anchor="middle">M</text></g><g id="icon-4" class="tsd-no-select"><rect fill="var(--color-icon-background)" stroke="var(--color-ts-namespace)" stroke-width="1.5" x="1" y="1" width="22" height="22" rx="6"></rect><text fill="var(--color-icon-text)" x="50%" y="50%" dominant-baseline="central" text-anchor="middle">N</text></g><g id="icon-8" class="tsd-no-select"><rect fill="var(--color-icon-background)" stroke="var(--color-ts-enum)" stroke-width="1.5" x="1" y="1" width="22" height="22" rx="6"></rect><text fill="var(--color-icon-text)" x="50%" y="50%" dominant-baseline="central" text-anchor="middle">E</text></g><g id="icon-16" class="tsd-no-select"><rect fill="var(--color-icon-background)" stroke="var(--color-ts-property)" stroke-width="1.5" x="1" y="1" width="22" height="22" rx="12"></rect><text fill="var(--color-icon-text)" x="50%" y="50%" dominant-baseline="central" text-anchor="middle">P</text></g><g id="icon-32" class="tsd-no-select"><rect fill="var(--color-icon-background)" stroke="var(--color-ts-variable)" stroke-width="1.5" x="1" y="1" width="22" height="22" rx="6"></rect><text fill="var(--color-icon-text)" x="50%" y="50%" dominant-baseline="central" text-anchor="middle">V</text></g><g id="icon-64" class="tsd-no-select"><rect fill="var(--color-icon-background)" stroke="var(--color-ts-function)" stroke-width="1.5" x="1" y="1" width="22" height="22" rx="6"></rect><text fill="var(--color-icon-text)" x="50%" y="50%" dominant-baseline="central" text-anchor="middle">F</text></g><g id="icon-128" class="tsd-no-select"><rect fill="var(--color-icon-background)" stroke="var(--color-ts-class)" stroke-width="1.5" x="1" y="1" width="22" height="22" rx="6"></rect><text fill="var(--color-icon-text)" x="50%" y="50%" dominant-baseline="central" text-anchor="middle">C</text></g><g id="icon-256" class="tsd-no-select"><rect fill="var(--color-icon-background)" stroke="var(--color-ts-interface)" stroke-width="1.5" x="1" y="1" width="22" height="22" rx="6"></rect><text fill="var(--color-icon-text)" x="50%" y="50%" dominant-baseline="central" text-anchor="middle">I</text></g><g id="icon-512" class="tsd-no-select"><rect fill="var(--color-icon-background)" stroke="var(--color-ts-constructor)" stroke-width="1.5" x="1" y="1" width="22" height="22" rx="12"></rect><text fill="var(--color-icon-text)" x="50%" y="50%" dominant-baseline="central" text-anchor="middle">C</text></g><g id="icon-1024" class="tsd-no-select"><rect fill="var(--color-icon-background)" stroke="var(--color-ts-property)" stroke-width="1.5" x="1" y="1" width="22" height="22" rx="12"></rect><text fill="var(--color-icon-text)" x="50%" y="50%" dominant-baseline="central" text-anchor="middle">P</text></g><g id="icon-2048" class="tsd-no-select"><rect fill="var(--color-icon-background)" stroke="var(--color-ts-method)" stroke-width="1.5" x="1" y="1" width="22" height="22" rx="12"></rect><text fill="var(--color-icon-text)" x="50%" y="50%" dominant-baseline="central" text-anchor="middle">M</text></g><g id="icon-4096" class="tsd-no-select"><rect fill="var(--color-icon-background)" stroke="var(--color-ts-function)" stroke-width="1.5" x="1" y="1" width="22" height="22" rx="6"></rect><text fill="var(--color-icon-text)" x="50%" y="50%" dominant-baseline="central" text-anchor="middle">F</text></g><g id="icon-8192" class="tsd-no-select"><rect fill="var(--color-icon-background)" stroke="var(--color-ts-property)" stroke-width="1.5" x="1" y="1" width="22" height="22" rx="12"></rect><text fill="var(--color-icon-text)" x="50%" y="50%" dominant-baseline="central" text-anchor="middle">P</text></g><g id="icon-16384" class="tsd-no-select"><rect fill="var(--color-icon-background)" stroke="var(--color-ts-constructor)" stroke-width="1.5" x="1" y="1" width="22" height="22" rx="12"></rect><text fill="var(--color-icon-text)" x="50%" y="50%" dominant-baseline="central" text-anchor="middle">C</text></g><g id="icon-32768" class="tsd-no-select"><rect fill="var(--color-icon-background)" stroke="var(--color-ts-property)" stroke-width="1.5" x="1" y="1" width="22" height="22" rx="12"></rect><text fill="var(--color-icon-text)" x="50%" y="50%" dominant-baseline="central" text-anchor="middle">P</text></g><g id="icon-65536" class="tsd-no-select"><rect fill="var(--color-icon-background)" stroke="var(--color-ts-type-alias)" stroke-width="1.5" x="1" y="1" width="22" height="22" rx="6"></rect><text fill="var(--color-icon-text)" x="50%" y="50%" dominant-baseline="central" text-anchor="middle">T</text></g><g id="icon-131072" class="tsd-no-select"><rect fill="var(--color-icon-background)" stroke="var(--color-ts-type-alias)" stroke-width="1.5" x="1" y="1" width="22" height="22" rx="6"></rect><text fill="var(--color-icon-text)" x="50%" y="50%" dominant-baseline="central" text-anchor="middle">T</text></g><g id="icon-262144" class="tsd-no-select"><rect fill="var(--color-icon-background)" stroke="var(--color-ts-accessor)" stroke-width="1.5" x="1" y="1" width="22" height="22" rx="12"></rect><text fill="var(--color-icon-text)" x="50%" y="50%" dominant-baseline="central" text-anchor="middle">A</text></g><g id="icon-524288" class="tsd-no-select"><rect fill="var(--color-icon-background)" stroke="var(--color-ts-accessor)" stroke-width="1.5" x="1" y="1" width="22" height="22" rx="12"></rect><text fill="var(--color-icon-text)" x="50%" y="50%" dominant-baseline="central" text-anchor="middle">A</text></g><g id="icon-1048576" class="tsd-no-select"><rect fill="var(--color-icon-background)" stroke="var(--color-ts-accessor)" stroke-width="1.5" x="1" y="1" width="22" height="22" rx="12"></rect><text fill="var(--color-icon-text)" x="50%" y="50%" dominant-baseline="central" text-anchor="middle">A</text></g><g id="icon-2097152" class="tsd-no-select"><rect fill="var(--color-icon-background)" stroke="var(--color-ts-type-alias)" stroke-width="1.5" x="1" y="1" width="22" height="22" rx="6"></rect><text fill="var(--color-icon-text)" x="50%" y="50%" dominant-baseline="central" text-anchor="middle">T</text></g><g id="icon-4194304" class="tsd-no-select"><rect fill="var(--color-icon-background)" stroke="var(--color-ts-reference)" stroke-width="1.5" x="1" y="1" width="22" height="22" rx="12"></rect><text fill="var(--color-icon-text)" x="50%" y="50%" dominant-baseline="central" text-anchor="middle">R</text></g><g id="icon-8388608" class="tsd-no-select"><rect fill="var(--color-icon-background)" stroke="var(--color-document)" stroke-width="1.5" x="1" y="1" width="22" height="22" rx="6"></rect><g stroke="var(--color-icon-text)" fill="none" stroke-width="1.5"><polygon points="6,5 6,19 18,19, 18,10 13,5"></polygon><line x1="9" y1="9" x2="13" y2="9"></line><line x1="9" y1="12" x2="15" y2="12"></line><line x1="9" y1="15" x2="15" y2="15"></line></g></g><g id="icon-folder" class="tsd-no-select"><rect fill="var(--color-icon-background)" stroke="var(--color-document)" stroke-width="1.5" x="1" y="1" width="22" height="22" rx="6"></rect><g stroke="var(--color-icon-text)" fill="none" stroke-width="1.5"><polygon points="5,5 10,5 12,8 19,8 19,18 5,18"></polygon></g></g><g id="icon-chevronDown" class="tsd-no-select"><path d="M4.93896 8.531L12 15.591L19.061 8.531L16.939 6.409L12 11.349L7.06098 6.409L4.93896 8.531Z" fill="var(--color-icon-text)"></path></g><g id="icon-chevronSmall" class="tsd-no-select"><path d="M1.5 5.50969L8 11.6609L14.5 5.50969L12.5466 3.66086L8 7.96494L3.45341 3.66086L1.5 5.50969Z" fill="var(--color-icon-text)"></path></g><g id="icon-checkbox" class="tsd-no-select"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></g><g id="icon-menu" class="tsd-no-select"><rect x="1" y="3" width="14" height="2" fill="var(--color-icon-text)"></rect><rect x="1" y="7" width="14" height="2" fill="var(--color-icon-text)"></rect><rect x="1" y="11" width="14" height="2" fill="var(--color-icon-text)"></rect></g><g id="icon-search" class="tsd-no-select"><path d="M15.7824 13.833L12.6666 10.7177C12.5259 10.5771 12.3353 10.499 12.1353 10.499H11.6259C12.4884 9.39596 13.001 8.00859 13.001 6.49937C13.001 2.90909 10.0914 0 6.50048 0C2.90959 0 0 2.90909 0 6.49937C0 10.0896 2.90959 12.9987 6.50048 12.9987C8.00996 12.9987 9.39756 12.4863 10.5008 11.6239V12.1332C10.5008 12.3332 10.5789 12.5238 10.7195 12.6644L13.8354 15.7797C14.1292 16.0734 14.6042 16.0734 14.8948 15.7797L15.7793 14.8954C16.0731 14.6017 16.0731 14.1267 15.7824 13.833ZM6.50048 10.499C4.29094 10.499 2.50018 8.71165 2.50018 6.49937C2.50018 4.29021 4.28781 2.49976 6.50048 2.49976C8.71001 2.49976 10.5008 4.28708 10.5008 6.49937C10.5008 8.70852 8.71314 10.499 6.50048 10.499Z" fill="var(--color-icon-text)"></path></g><g id="icon-anchor" class="tsd-no-select"><g stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5"></path><path d="M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5"></path></g></g><g id="icon-alertNote" class="tsd-no-select"><path fill="var(--color-alert-note)" d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8Zm8-6.5a6.5 6.5 0 1 0 0 13 6.5 6.5 0 0 0 0-13ZM6.5 7.75A.75.75 0 0 1 7.25 7h1a.75.75 0 0 1 .75.75v2.75h.25a.75.75 0 0 1 0 1.5h-2a.75.75 0 0 1 0-1.5h.25v-2h-.25a.75.75 0 0 1-.75-.75ZM8 6a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z"></path></g><g id="icon-alertTip" class="tsd-no-select"><path fill="var(--color-alert-tip)" d="M8 1.5c-2.363 0-4 1.69-4 3.75 0 .984.424 1.625.984 2.304l.214.253c.223.264.47.556.673.848.284.411.537.896.621 1.49a.75.75 0 0 1-1.484.211c-.04-.282-.163-.547-.37-.847a8.456 8.456 0 0 0-.542-.68c-.084-.1-.173-.205-.268-.32C3.201 7.75 2.5 6.766 2.5 5.25 2.5 2.31 4.863 0 8 0s5.5 2.31 5.5 5.25c0 1.516-.701 2.5-1.328 3.259-.095.115-.184.22-.268.319-.207.245-.383.453-.541.681-.208.3-.33.565-.37.847a.751.751 0 0 1-1.485-.212c.084-.593.337-1.078.621-1.489.203-.292.45-.584.673-.848.075-.088.147-.173.213-.253.561-.679.985-1.32.985-2.304 0-2.06-1.637-3.75-4-3.75ZM5.75 12h4.5a.75.75 0 0 1 0 1.5h-4.5a.75.75 0 0 1 0-1.5ZM6 15.25a.75.75 0 0 1 .75-.75h2.5a.75.75 0 0 1 0 1.5h-2.5a.75.75 0 0 1-.75-.75Z"></path></g><g id="icon-alertImportant" class="tsd-no-select"><path fill="var(--color-alert-important)" d="M0 1.75C0 .784.784 0 1.75 0h12.5C15.216 0 16 .784 16 1.75v9.5A1.75 1.75 0 0 1 14.25 13H8.06l-2.573 2.573A1.458 1.458 0 0 1 3 14.543V13H1.75A1.75 1.75 0 0 1 0 11.25Zm1.75-.25a.25.25 0 0 0-.25.25v9.5c0 .138.112.25.25.25h2a.75.75 0 0 1 .75.75v2.19l2.72-2.72a.749.749 0 0 1 .53-.22h6.5a.25.25 0 0 0 .25-.25v-9.5a.25.25 0 0 0-.25-.25Zm7 2.25v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 9a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path></g><g id="icon-alertWarning" class="tsd-no-select"><path fill="var(--color-alert-warning)" d="M6.457 1.047c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0 1 14.082 15H1.918a1.75 1.75 0 0 1-1.543-2.575Zm1.763.707a.25.25 0 0 0-.44 0L1.698 13.132a.25.25 0 0 0 .22.368h12.164a.25.25 0 0 0 .22-.368Zm.53 3.996v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 11a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path></g><g id="icon-alertCaution" class="tsd-no-select"><path fill="var(--color-alert-caution)" d="M4.47.22A.749.749 0 0 1 5 0h6c.199 0 .389.079.53.22l4.25 4.25c.141.14.22.331.22.53v6a.749.749 0 0 1-.22.53l-4.25 4.25A.749.749 0 0 1 11 16H5a.749.749 0 0 1-.53-.22L.22 11.53A.749.749 0 0 1 0 11V5c0-.199.079-.389.22-.53Zm.84 1.28L1.5 5.31v5.38l3.81 3.81h5.38l3.81-3.81V5.31L10.69 1.5ZM8 4a.75.75 0 0 1 .75.75v3.5a.75.75 0 0 1-1.5 0v-3.5A.75.75 0 0 1 8 4Zm0 8a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z"></path></g>`;
        svg.style.display = "none";
        if (location.protocol === "file:") updateUseElements();
    }

    function updateUseElements() {
        document.querySelectorAll("use").forEach(el => {
            if (el.getAttribute("href").includes("#icon-")) {
                el.setAttribute("href", el.getAttribute("href").replace(/.*#/, "#"));
            }
        });
    }
})()

================================================
File: docs/assets/main.js
================================================
"use strict";
window.translations={"copy":"Copy","copied":"Copied!","normally_hidden":"This member is normally hidden due to your filter settings.","hierarchy_expand":"Expand","hierarchy_collapse":"Collapse"};
"use strict";(()=>{var De=Object.create;var le=Object.defineProperty;var Fe=Object.getOwnPropertyDescriptor;var Ne=Object.getOwnPropertyNames;var Ve=Object.getPrototypeOf,Be=Object.prototype.hasOwnProperty;var qe=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports);var je=(t,e,n,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let i of Ne(e))!Be.call(t,i)&&i!==n&&le(t,i,{get:()=>e[i],enumerable:!(r=Fe(e,i))||r.enumerable});return t};var $e=(t,e,n)=>(n=t!=null?De(Ve(t)):{},je(e||!t||!t.__esModule?le(n,"default",{value:t,enumerable:!0}):n,t));var pe=qe((de,he)=>{(function(){var t=function(e){var n=new t.Builder;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),n.searchPipeline.add(t.stemmer),e.call(n,n),n.build()};t.version="2.3.9";t.utils={},t.utils.warn=function(e){return function(n){e.console&&console.warn&&console.warn(n)}}(this),t.utils.asString=function(e){return e==null?"":e.toString()},t.utils.clone=function(e){if(e==null)return e;for(var n=Object.create(null),r=Object.keys(e),i=0;i<r.length;i++){var s=r[i],o=e[s];if(Array.isArray(o)){n[s]=o.slice();continue}if(typeof o=="string"||typeof o=="number"||typeof o=="boolean"){n[s]=o;continue}throw new TypeError("clone is not deep and does not support nested objects")}return n},t.FieldRef=function(e,n,r){this.docRef=e,this.fieldName=n,this._stringValue=r},t.FieldRef.joiner="/",t.FieldRef.fromString=function(e){var n=e.indexOf(t.FieldRef.joiner);if(n===-1)throw"malformed field ref string";var r=e.slice(0,n),i=e.slice(n+1);return new t.FieldRef(i,r,e)},t.FieldRef.prototype.toString=function(){return this._stringValue==null&&(this._stringValue=this.fieldName+t.FieldRef.joiner+this.docRef),this._stringValue};t.Set=function(e){if(this.elements=Object.create(null),e){this.length=e.length;for(var n=0;n<this.length;n++)this.elements[e[n]]=!0}else this.length=0},t.Set.complete={intersect:function(e){return e},union:function(){return this},contains:function(){return!0}},t.Set.empty={intersect:function(){return this},union:function(e){return e},contains:function(){return!1}},t.Set.prototype.contains=function(e){return!!this.elements[e]},t.Set.prototype.intersect=function(e){var n,r,i,s=[];if(e===t.Set.complete)return this;if(e===t.Set.empty)return e;this.length<e.length?(n=this,r=e):(n=e,r=this),i=Object.keys(n.elements);for(var o=0;o<i.length;o++){var a=i[o];a in r.elements&&s.push(a)}return new t.Set(s)},t.Set.prototype.union=function(e){return e===t.Set.complete?t.Set.complete:e===t.Set.empty?this:new t.Set(Object.keys(this.elements).concat(Object.keys(e.elements)))},t.idf=function(e,n){var r=0;for(var i in e)i!="_index"&&(r+=Object.keys(e[i]).length);var s=(n-r+.5)/(r+.5);return Math.log(1+Math.abs(s))},t.Token=function(e,n){this.str=e||"",this.metadata=n||{}},t.Token.prototype.toString=function(){return this.str},t.Token.prototype.update=function(e){return this.str=e(this.str,this.metadata),this},t.Token.prototype.clone=function(e){return e=e||function(n){return n},new t.Token(e(this.str,this.metadata),this.metadata)};t.tokenizer=function(e,n){if(e==null||e==null)return[];if(Array.isArray(e))return e.map(function(m){return new t.Token(t.utils.asString(m).toLowerCase(),t.utils.clone(n))});for(var r=e.toString().toLowerCase(),i=r.length,s=[],o=0,a=0;o<=i;o++){var l=r.charAt(o),c=o-a;if(l.match(t.tokenizer.separator)||o==i){if(c>0){var d=t.utils.clone(n)||{};d.position=[a,c],d.index=s.length,s.push(new t.Token(r.slice(a,o),d))}a=o+1}}return s},t.tokenizer.separator=/[\s\-]+/;t.Pipeline=function(){this._stack=[]},t.Pipeline.registeredFunctions=Object.create(null),t.Pipeline.registerFunction=function(e,n){n in this.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[e.label]=e},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn(`Function is not registered with pipeline. This may cause problems when serialising the index.
`,e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(r){var i=t.Pipeline.registeredFunctions[r];if(i)n.add(i);else throw new Error("Cannot load unregistered function: "+r)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(n){t.Pipeline.warnIfFunctionNotRegistered(n),this._stack.push(n)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var r=this._stack.indexOf(e);if(r==-1)throw new Error("Cannot find existingFn");r=r+1,this._stack.splice(r,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var r=this._stack.indexOf(e);if(r==-1)throw new Error("Cannot find existingFn");this._stack.splice(r,0,n)},t.Pipeline.prototype.remove=function(e){var n=this._stack.indexOf(e);n!=-1&&this._stack.splice(n,1)},t.Pipeline.prototype.run=function(e){for(var n=this._stack.length,r=0;r<n;r++){for(var i=this._stack[r],s=[],o=0;o<e.length;o++){var a=i(e[o],o,e);if(!(a==null||a===""))if(Array.isArray(a))for(var l=0;l<a.length;l++)s.push(a[l]);else s.push(a)}e=s}return e},t.Pipeline.prototype.runString=function(e,n){var r=new t.Token(e,n);return this.run([r]).map(function(i){return i.toString()})},t.Pipeline.prototype.reset=function(){this._stack=[]},t.Pipeline.prototype.toJSON=function(){return this._stack.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})};t.Vector=function(e){this._magnitude=0,this.elements=e||[]},t.Vector.prototype.positionForIndex=function(e){if(this.elements.length==0)return 0;for(var n=0,r=this.elements.length/2,i=r-n,s=Math.floor(i/2),o=this.elements[s*2];i>1&&(o<e&&(n=s),o>e&&(r=s),o!=e);)i=r-n,s=n+Math.floor(i/2),o=this.elements[s*2];if(o==e||o>e)return s*2;if(o<e)return(s+1)*2},t.Vector.prototype.insert=function(e,n){this.upsert(e,n,function(){throw"duplicate index"})},t.Vector.prototype.upsert=function(e,n,r){this._magnitude=0;var i=this.positionForIndex(e);this.elements[i]==e?this.elements[i+1]=r(this.elements[i+1],n):this.elements.splice(i,0,e,n)},t.Vector.prototype.magnitude=function(){if(this._magnitude)return this._magnitude;for(var e=0,n=this.elements.length,r=1;r<n;r+=2){var i=this.elements[r];e+=i*i}return this._magnitude=Math.sqrt(e)},t.Vector.prototype.dot=function(e){for(var n=0,r=this.elements,i=e.elements,s=r.length,o=i.length,a=0,l=0,c=0,d=0;c<s&&d<o;)a=r[c],l=i[d],a<l?c+=2:a>l?d+=2:a==l&&(n+=r[c+1]*i[d+1],c+=2,d+=2);return n},t.Vector.prototype.similarity=function(e){return this.dot(e)/this.magnitude()||0},t.Vector.prototype.toArray=function(){for(var e=new Array(this.elements.length/2),n=1,r=0;n<this.elements.length;n+=2,r++)e[r]=this.elements[n];return e},t.Vector.prototype.toJSON=function(){return this.elements};t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},n={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},r="[^aeiou]",i="[aeiouy]",s=r+"[^aeiouy]*",o=i+"[aeiou]*",a="^("+s+")?"+o+s,l="^("+s+")?"+o+s+"("+o+")?$",c="^("+s+")?"+o+s+o+s,d="^("+s+")?"+i,m=new RegExp(a),p=new RegExp(c),b=new RegExp(l),v=new RegExp(d),L=/^(.+?)(ss|i)es$/,f=/^(.+?)([^s])s$/,y=/^(.+?)eed$/,S=/^(.+?)(ed|ing)$/,w=/.$/,k=/(at|bl|iz)$/,_=new RegExp("([^aeiouylsz])\\1$"),q=new RegExp("^"+s+i+"[^aeiouwxy]$"),F=/^(.+?[^aeiou])y$/,j=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,$=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,N=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,z=/^(.+?)(s|t)(ion)$/,Q=/^(.+?)e$/,W=/ll$/,U=new RegExp("^"+s+i+"[^aeiouwxy]$"),V=function(u){var g,P,T,h,x,O,R;if(u.length<3)return u;if(T=u.substr(0,1),T=="y"&&(u=T.toUpperCase()+u.substr(1)),h=L,x=f,h.test(u)?u=u.replace(h,"$1$2"):x.test(u)&&(u=u.replace(x,"$1$2")),h=y,x=S,h.test(u)){var E=h.exec(u);h=m,h.test(E[1])&&(h=w,u=u.replace(h,""))}else if(x.test(u)){var E=x.exec(u);g=E[1],x=v,x.test(g)&&(u=g,x=k,O=_,R=q,x.test(u)?u=u+"e":O.test(u)?(h=w,u=u.replace(h,"")):R.test(u)&&(u=u+"e"))}if(h=F,h.test(u)){var E=h.exec(u);g=E[1],u=g+"i"}if(h=j,h.test(u)){var E=h.exec(u);g=E[1],P=E[2],h=m,h.test(g)&&(u=g+e[P])}if(h=$,h.test(u)){var E=h.exec(u);g=E[1],P=E[2],h=m,h.test(g)&&(u=g+n[P])}if(h=N,x=z,h.test(u)){var E=h.exec(u);g=E[1],h=p,h.test(g)&&(u=g)}else if(x.test(u)){var E=x.exec(u);g=E[1]+E[2],x=p,x.test(g)&&(u=g)}if(h=Q,h.test(u)){var E=h.exec(u);g=E[1],h=p,x=b,O=U,(h.test(g)||x.test(g)&&!O.test(g))&&(u=g)}return h=W,x=p,h.test(u)&&x.test(u)&&(h=w,u=u.replace(h,"")),T=="y"&&(u=T.toLowerCase()+u.substr(1)),u};return function(M){return M.update(V)}}(),t.Pipeline.registerFunction(t.stemmer,"stemmer");t.generateStopWordFilter=function(e){var n=e.reduce(function(r,i){return r[i]=i,r},{});return function(r){if(r&&n[r.toString()]!==r.toString())return r}},t.stopWordFilter=t.generateStopWordFilter(["a","able","about","across","after","all","almost","also","am","among","an","and","any","are","as","at","be","because","been","but","by","can","cannot","could","dear","did","do","does","either","else","ever","every","for","from","get","got","had","has","have","he","her","hers","him","his","how","however","i","if","in","into","is","it","its","just","least","let","like","likely","may","me","might","most","must","my","neither","no","nor","not","of","off","often","on","only","or","other","our","own","rather","said","say","says","she","should","since","so","some","than","that","the","their","them","then","there","these","they","this","tis","to","too","twas","us","wants","was","we","were","what","when","where","which","while","who","whom","why","will","with","would","yet","you","your"]),t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter");t.trimmer=function(e){return e.update(function(n){return n.replace(/^\W+/,"").replace(/\W+$/,"")})},t.Pipeline.registerFunction(t.trimmer,"trimmer");t.TokenSet=function(){this.final=!1,this.edges={},this.id=t.TokenSet._nextId,t.TokenSet._nextId+=1},t.TokenSet._nextId=1,t.TokenSet.fromArray=function(e){for(var n=new t.TokenSet.Builder,r=0,i=e.length;r<i;r++)n.insert(e[r]);return n.finish(),n.root},t.TokenSet.fromClause=function(e){return"editDistance"in e?t.TokenSet.fromFuzzyString(e.term,e.editDistance):t.TokenSet.fromString(e.term)},t.TokenSet.fromFuzzyString=function(e,n){for(var r=new t.TokenSet,i=[{node:r,editsRemaining:n,str:e}];i.length;){var s=i.pop();if(s.str.length>0){var o=s.str.charAt(0),a;o in s.node.edges?a=s.node.edges[o]:(a=new t.TokenSet,s.node.edges[o]=a),s.str.length==1&&(a.final=!0),i.push({node:a,editsRemaining:s.editsRemaining,str:s.str.slice(1)})}if(s.editsRemaining!=0){if("*"in s.node.edges)var l=s.node.edges["*"];else{var l=new t.TokenSet;s.node.edges["*"]=l}if(s.str.length==0&&(l.final=!0),i.push({node:l,editsRemaining:s.editsRemaining-1,str:s.str}),s.str.length>1&&i.push({node:s.node,editsRemaining:s.editsRemaining-1,str:s.str.slice(1)}),s.str.length==1&&(s.node.final=!0),s.str.length>=1){if("*"in s.node.edges)var c=s.node.edges["*"];else{var c=new t.TokenSet;s.node.edges["*"]=c}s.str.length==1&&(c.final=!0),i.push({node:c,editsRemaining:s.editsRemaining-1,str:s.str.slice(1)})}if(s.str.length>1){var d=s.str.charAt(0),m=s.str.charAt(1),p;m in s.node.edges?p=s.node.edges[m]:(p=new t.TokenSet,s.node.edges[m]=p),s.str.length==1&&(p.final=!0),i.push({node:p,editsRemaining:s.editsRemaining-1,str:d+s.str.slice(2)})}}}return r},t.TokenSet.fromString=function(e){for(var n=new t.TokenSet,r=n,i=0,s=e.length;i<s;i++){var o=e[i],a=i==s-1;if(o=="*")n.edges[o]=n,n.final=a;else{var l=new t.TokenSet;l.final=a,n.edges[o]=l,n=l}}return r},t.TokenSet.prototype.toArray=function(){for(var e=[],n=[{prefix:"",node:this}];n.length;){var r=n.pop(),i=Object.keys(r.node.edges),s=i.length;r.node.final&&(r.prefix.charAt(0),e.push(r.prefix));for(var o=0;o<s;o++){var a=i[o];n.push({prefix:r.prefix.concat(a),node:r.node.edges[a]})}}return e},t.TokenSet.prototype.toString=function(){if(this._str)return this._str;for(var e=this.final?"1":"0",n=Object.keys(this.edges).sort(),r=n.length,i=0;i<r;i++){var s=n[i],o=this.edges[s];e=e+s+o.id}return e},t.TokenSet.prototype.intersect=function(e){for(var n=new t.TokenSet,r=void 0,i=[{qNode:e,output:n,node:this}];i.length;){r=i.pop();for(var s=Object.keys(r.qNode.edges),o=s.length,a=Object.keys(r.node.edges),l=a.length,c=0;c<o;c++)for(var d=s[c],m=0;m<l;m++){var p=a[m];if(p==d||d=="*"){var b=r.node.edges[p],v=r.qNode.edges[d],L=b.final&&v.final,f=void 0;p in r.output.edges?(f=r.output.edges[p],f.final=f.final||L):(f=new t.TokenSet,f.final=L,r.output.edges[p]=f),i.push({qNode:v,output:f,node:b})}}}return n},t.TokenSet.Builder=function(){this.previousWord="",this.root=new t.TokenSet,this.uncheckedNodes=[],this.minimizedNodes={}},t.TokenSet.Builder.prototype.insert=function(e){var n,r=0;if(e<this.previousWord)throw new Error("Out of order word insertion");for(var i=0;i<e.length&&i<this.previousWord.length&&e[i]==this.previousWord[i];i++)r++;this.minimize(r),this.uncheckedNodes.length==0?n=this.root:n=this.uncheckedNodes[this.uncheckedNodes.length-1].child;for(var i=r;i<e.length;i++){var s=new t.TokenSet,o=e[i];n.edges[o]=s,this.uncheckedNodes.push({parent:n,char:o,child:s}),n=s}n.final=!0,this.previousWord=e},t.TokenSet.Builder.prototype.finish=function(){this.minimize(0)},t.TokenSet.Builder.prototype.minimize=function(e){for(var n=this.uncheckedNodes.length-1;n>=e;n--){var r=this.uncheckedNodes[n],i=r.child.toString();i in this.minimizedNodes?r.parent.edges[r.char]=this.minimizedNodes[i]:(r.child._str=i,this.minimizedNodes[i]=r.child),this.uncheckedNodes.pop()}};t.Index=function(e){this.invertedIndex=e.invertedIndex,this.fieldVectors=e.fieldVectors,this.tokenSet=e.tokenSet,this.fields=e.fields,this.pipeline=e.pipeline},t.Index.prototype.search=function(e){return this.query(function(n){var r=new t.QueryParser(e,n);r.parse()})},t.Index.prototype.query=function(e){for(var n=new t.Query(this.fields),r=Object.create(null),i=Object.create(null),s=Object.create(null),o=Object.create(null),a=Object.create(null),l=0;l<this.fields.length;l++)i[this.fields[l]]=new t.Vector;e.call(n,n);for(var l=0;l<n.clauses.length;l++){var c=n.clauses[l],d=null,m=t.Set.empty;c.usePipeline?d=this.pipeline.runString(c.term,{fields:c.fields}):d=[c.term];for(var p=0;p<d.length;p++){var b=d[p];c.term=b;var v=t.TokenSet.fromClause(c),L=this.tokenSet.intersect(v).toArray();if(L.length===0&&c.presence===t.Query.presence.REQUIRED){for(var f=0;f<c.fields.length;f++){var y=c.fields[f];o[y]=t.Set.empty}break}for(var S=0;S<L.length;S++)for(var w=L[S],k=this.invertedIndex[w],_=k._index,f=0;f<c.fields.length;f++){var y=c.fields[f],q=k[y],F=Object.keys(q),j=w+"/"+y,$=new t.Set(F);if(c.presence==t.Query.presence.REQUIRED&&(m=m.union($),o[y]===void 0&&(o[y]=t.Set.complete)),c.presence==t.Query.presence.PROHIBITED){a[y]===void 0&&(a[y]=t.Set.empty),a[y]=a[y].union($);continue}if(i[y].upsert(_,c.boost,function(He,Ae){return He+Ae}),!s[j]){for(var N=0;N<F.length;N++){var z=F[N],Q=new t.FieldRef(z,y),W=q[z],U;(U=r[Q])===void 0?r[Q]=new t.MatchData(w,y,W):U.add(w,y,W)}s[j]=!0}}}if(c.presence===t.Query.presence.REQUIRED)for(var f=0;f<c.fields.length;f++){var y=c.fields[f];o[y]=o[y].intersect(m)}}for(var V=t.Set.complete,M=t.Set.empty,l=0;l<this.fields.length;l++){var y=this.fields[l];o[y]&&(V=V.intersect(o[y])),a[y]&&(M=M.union(a[y]))}var u=Object.keys(r),g=[],P=Object.create(null);if(n.isNegated()){u=Object.keys(this.fieldVectors);for(var l=0;l<u.length;l++){var Q=u[l],T=t.FieldRef.fromString(Q);r[Q]=new t.MatchData}}for(var l=0;l<u.length;l++){var T=t.FieldRef.fromString(u[l]),h=T.docRef;if(V.contains(h)&&!M.contains(h)){var x=this.fieldVectors[T],O=i[T.fieldName].similarity(x),R;if((R=P[h])!==void 0)R.score+=O,R.matchData.combine(r[T]);else{var E={ref:h,score:O,matchData:r[T]};P[h]=E,g.push(E)}}}return g.sort(function(Me,Re){return Re.score-Me.score})},t.Index.prototype.toJSON=function(){var e=Object.keys(this.invertedIndex).sort().map(function(r){return[r,this.invertedIndex[r]]},this),n=Object.keys(this.fieldVectors).map(function(r){return[r,this.fieldVectors[r].toJSON()]},this);return{version:t.version,fields:this.fields,fieldVectors:n,invertedIndex:e,pipeline:this.pipeline.toJSON()}},t.Index.load=function(e){var n={},r={},i=e.fieldVectors,s=Object.create(null),o=e.invertedIndex,a=new t.TokenSet.Builder,l=t.Pipeline.load(e.pipeline);e.version!=t.version&&t.utils.warn("Version mismatch when loading serialised index. Current version of lunr '"+t.version+"' does not match serialized index '"+e.version+"'");for(var c=0;c<i.length;c++){var d=i[c],m=d[0],p=d[1];r[m]=new t.Vector(p)}for(var c=0;c<o.length;c++){var d=o[c],b=d[0],v=d[1];a.insert(b),s[b]=v}return a.finish(),n.fields=e.fields,n.fieldVectors=r,n.invertedIndex=s,n.tokenSet=a.root,n.pipeline=l,new t.Index(n)};t.Builder=function(){this._ref="id",this._fields=Object.create(null),this._documents=Object.create(null),this.invertedIndex=Object.create(null),this.fieldTermFrequencies={},this.fieldLengths={},this.tokenizer=t.tokenizer,this.pipeline=new t.Pipeline,this.searchPipeline=new t.Pipeline,this.documentCount=0,this._b=.75,this._k1=1.2,this.termIndex=0,this.metadataWhitelist=[]},t.Builder.prototype.ref=function(e){this._ref=e},t.Builder.prototype.field=function(e,n){if(/\//.test(e))throw new RangeError("Field '"+e+"' contains illegal character '/'");this._fields[e]=n||{}},t.Builder.prototype.b=function(e){e<0?this._b=0:e>1?this._b=1:this._b=e},t.Builder.prototype.k1=function(e){this._k1=e},t.Builder.prototype.add=function(e,n){var r=e[this._ref],i=Object.keys(this._fields);this._documents[r]=n||{},this.documentCount+=1;for(var s=0;s<i.length;s++){var o=i[s],a=this._fields[o].extractor,l=a?a(e):e[o],c=this.tokenizer(l,{fields:[o]}),d=this.pipeline.run(c),m=new t.FieldRef(r,o),p=Object.create(null);this.fieldTermFrequencies[m]=p,this.fieldLengths[m]=0,this.fieldLengths[m]+=d.length;for(var b=0;b<d.length;b++){var v=d[b];if(p[v]==null&&(p[v]=0),p[v]+=1,this.invertedIndex[v]==null){var L=Object.create(null);L._index=this.termIndex,this.termIndex+=1;for(var f=0;f<i.length;f++)L[i[f]]=Object.create(null);this.invertedIndex[v]=L}this.invertedIndex[v][o][r]==null&&(this.invertedIndex[v][o][r]=Object.create(null));for(var y=0;y<this.metadataWhitelist.length;y++){var S=this.metadataWhitelist[y],w=v.metadata[S];this.invertedIndex[v][o][r][S]==null&&(this.invertedIndex[v][o][r][S]=[]),this.invertedIndex[v][o][r][S].push(w)}}}},t.Builder.prototype.calculateAverageFieldLengths=function(){for(var e=Object.keys(this.fieldLengths),n=e.length,r={},i={},s=0;s<n;s++){var o=t.FieldRef.fromString(e[s]),a=o.fieldName;i[a]||(i[a]=0),i[a]+=1,r[a]||(r[a]=0),r[a]+=this.fieldLengths[o]}for(var l=Object.keys(this._fields),s=0;s<l.length;s++){var c=l[s];r[c]=r[c]/i[c]}this.averageFieldLength=r},t.Builder.prototype.createFieldVectors=function(){for(var e={},n=Object.keys(this.fieldTermFrequencies),r=n.length,i=Object.create(null),s=0;s<r;s++){for(var o=t.FieldRef.fromString(n[s]),a=o.fieldName,l=this.fieldLengths[o],c=new t.Vector,d=this.fieldTermFrequencies[o],m=Object.keys(d),p=m.length,b=this._fields[a].boost||1,v=this._documents[o.docRef].boost||1,L=0;L<p;L++){var f=m[L],y=d[f],S=this.invertedIndex[f]._index,w,k,_;i[f]===void 0?(w=t.idf(this.invertedIndex[f],this.documentCount),i[f]=w):w=i[f],k=w*((this._k1+1)*y)/(this._k1*(1-this._b+this._b*(l/this.averageFieldLength[a]))+y),k*=b,k*=v,_=Math.round(k*1e3)/1e3,c.insert(S,_)}e[o]=c}this.fieldVectors=e},t.Builder.prototype.createTokenSet=function(){this.tokenSet=t.TokenSet.fromArray(Object.keys(this.invertedIndex).sort())},t.Builder.prototype.build=function(){return this.calculateAverageFieldLengths(),this.createFieldVectors(),this.createTokenSet(),new t.Index({invertedIndex:this.invertedIndex,fieldVectors:this.fieldVectors,tokenSet:this.tokenSet,fields:Object.keys(this._fields),pipeline:this.searchPipeline})},t.Builder.prototype.use=function(e){var n=Array.prototype.slice.call(arguments,1);n.unshift(this),e.apply(this,n)},t.MatchData=function(e,n,r){for(var i=Object.create(null),s=Object.keys(r||{}),o=0;o<s.length;o++){var a=s[o];i[a]=r[a].slice()}this.metadata=Object.create(null),e!==void 0&&(this.metadata[e]=Object.create(null),this.metadata[e][n]=i)},t.MatchData.prototype.combine=function(e){for(var n=Object.keys(e.metadata),r=0;r<n.length;r++){var i=n[r],s=Object.keys(e.metadata[i]);this.metadata[i]==null&&(this.metadata[i]=Object.create(null));for(var o=0;o<s.length;o++){var a=s[o],l=Object.keys(e.metadata[i][a]);this.metadata[i][a]==null&&(this.metadata[i][a]=Object.create(null));for(var c=0;c<l.length;c++){var d=l[c];this.metadata[i][a][d]==null?this.metadata[i][a][d]=e.metadata[i][a][d]:this.metadata[i][a][d]=this.metadata[i][a][d].concat(e.metadata[i][a][d])}}}},t.MatchData.prototype.add=function(e,n,r){if(!(e in this.metadata)){this.metadata[e]=Object.create(null),this.metadata[e][n]=r;return}if(!(n in this.metadata[e])){this.metadata[e][n]=r;return}for(var i=Object.keys(r),s=0;s<i.length;s++){var o=i[s];o in this.metadata[e][n]?this.metadata[e][n][o]=this.metadata[e][n][o].concat(r[o]):this.metadata[e][n][o]=r[o]}},t.Query=function(e){this.clauses=[],this.allFields=e},t.Query.wildcard=new String("*"),t.Query.wildcard.NONE=0,t.Query.wildcard.LEADING=1,t.Query.wildcard.TRAILING=2,t.Query.presence={OPTIONAL:1,REQUIRED:2,PROHIBITED:3},t.Query.prototype.clause=function(e){return"fields"in e||(e.fields=this.allFields),"boost"in e||(e.boost=1),"usePipeline"in e||(e.usePipeline=!0),"wildcard"in e||(e.wildcard=t.Query.wildcard.NONE),e.wildcard&t.Query.wildcard.LEADING&&e.term.charAt(0)!=t.Query.wildcard&&(e.term="*"+e.term),e.wildcard&t.Query.wildcard.TRAILING&&e.term.slice(-1)!=t.Query.wildcard&&(e.term=""+e.term+"*"),"presence"in e||(e.presence=t.Query.presence.OPTIONAL),this.clauses.push(e),this},t.Query.prototype.isNegated=function(){for(var e=0;e<this.clauses.length;e++)if(this.clauses[e].presence!=t.Query.presence.PROHIBITED)return!1;return!0},t.Query.prototype.term=function(e,n){if(Array.isArray(e))return e.forEach(function(i){this.term(i,t.utils.clone(n))},this),this;var r=n||{};return r.term=e.toString(),this.clause(r),this},t.QueryParseError=function(e,n,r){this.name="QueryParseError",this.message=e,this.start=n,this.end=r},t.QueryParseError.prototype=new Error,t.QueryLexer=function(e){this.lexemes=[],this.str=e,this.length=e.length,this.pos=0,this.start=0,this.escapeCharPositions=[]},t.QueryLexer.prototype.run=function(){for(var e=t.QueryLexer.lexText;e;)e=e(this)},t.QueryLexer.prototype.sliceString=function(){for(var e=[],n=this.start,r=this.pos,i=0;i<this.escapeCharPositions.length;i++)r=this.escapeCharPositions[i],e.push(this.str.slice(n,r)),n=r+1;return e.push(this.str.slice(n,this.pos)),this.escapeCharPositions.length=0,e.join("")},t.QueryLexer.prototype.emit=function(e){this.lexemes.push({type:e,str:this.sliceString(),start:this.start,end:this.pos}),this.start=this.pos},t.QueryLexer.prototype.escapeCharacter=function(){this.escapeCharPositions.push(this.pos-1),this.pos+=1},t.QueryLexer.prototype.next=function(){if(this.pos>=this.length)return t.QueryLexer.EOS;var e=this.str.charAt(this.pos);return this.pos+=1,e},t.QueryLexer.prototype.width=function(){return this.pos-this.start},t.QueryLexer.prototype.ignore=function(){this.start==this.pos&&(this.pos+=1),this.start=this.pos},t.QueryLexer.prototype.backup=function(){this.pos-=1},t.QueryLexer.prototype.acceptDigitRun=function(){var e,n;do e=this.next(),n=e.charCodeAt(0);while(n>47&&n<58);e!=t.QueryLexer.EOS&&this.backup()},t.QueryLexer.prototype.more=function(){return this.pos<this.length},t.QueryLexer.EOS="EOS",t.QueryLexer.FIELD="FIELD",t.QueryLexer.TERM="TERM",t.QueryLexer.EDIT_DISTANCE="EDIT_DISTANCE",t.QueryLexer.BOOST="BOOST",t.QueryLexer.PRESENCE="PRESENCE",t.QueryLexer.lexField=function(e){return e.backup(),e.emit(t.QueryLexer.FIELD),e.ignore(),t.QueryLexer.lexText},t.QueryLexer.lexTerm=function(e){if(e.width()>1&&(e.backup(),e.emit(t.QueryLexer.TERM)),e.ignore(),e.more())return t.QueryLexer.lexText},t.QueryLexer.lexEditDistance=function(e){return e.ignore(),e.acceptDigitRun(),e.emit(t.QueryLexer.EDIT_DISTANCE),t.QueryLexer.lexText},t.QueryLexer.lexBoost=function(e){return e.ignore(),e.acceptDigitRun(),e.emit(t.QueryLexer.BOOST),t.QueryLexer.lexText},t.QueryLexer.lexEOS=function(e){e.width()>0&&e.emit(t.QueryLexer.TERM)},t.QueryLexer.termSeparator=t.tokenizer.separator,t.QueryLexer.lexText=function(e){for(;;){var n=e.next();if(n==t.QueryLexer.EOS)return t.QueryLexer.lexEOS;if(n.charCodeAt(0)==92){e.escapeCharacter();continue}if(n==":")return t.QueryLexer.lexField;if(n=="~")return e.backup(),e.width()>0&&e.emit(t.QueryLexer.TERM),t.QueryLexer.lexEditDistance;if(n=="^")return e.backup(),e.width()>0&&e.emit(t.QueryLexer.TERM),t.QueryLexer.lexBoost;if(n=="+"&&e.width()===1||n=="-"&&e.width()===1)return e.emit(t.QueryLexer.PRESENCE),t.QueryLexer.lexText;if(n.match(t.QueryLexer.termSeparator))return t.QueryLexer.lexTerm}},t.QueryParser=function(e,n){this.lexer=new t.QueryLexer(e),this.query=n,this.currentClause={},this.lexemeIdx=0},t.QueryParser.prototype.parse=function(){this.lexer.run(),this.lexemes=this.lexer.lexemes;for(var e=t.QueryParser.parseClause;e;)e=e(this);return this.query},t.QueryParser.prototype.peekLexeme=function(){return this.lexemes[this.lexemeIdx]},t.QueryParser.prototype.consumeLexeme=function(){var e=this.peekLexeme();return this.lexemeIdx+=1,e},t.QueryParser.prototype.nextClause=function(){var e=this.currentClause;this.query.clause(e),this.currentClause={}},t.QueryParser.parseClause=function(e){var n=e.peekLexeme();if(n!=null)switch(n.type){case t.QueryLexer.PRESENCE:return t.QueryParser.parsePresence;case t.QueryLexer.FIELD:return t.QueryParser.parseField;case t.QueryLexer.TERM:return t.QueryParser.parseTerm;default:var r="expected either a field or a term, found "+n.type;throw n.str.length>=1&&(r+=" with value '"+n.str+"'"),new t.QueryParseError(r,n.start,n.end)}},t.QueryParser.parsePresence=function(e){var n=e.consumeLexeme();if(n!=null){switch(n.str){case"-":e.currentClause.presence=t.Query.presence.PROHIBITED;break;case"+":e.currentClause.presence=t.Query.presence.REQUIRED;break;default:var r="unrecognised presence operator'"+n.str+"'";throw new t.QueryParseError(r,n.start,n.end)}var i=e.peekLexeme();if(i==null){var r="expecting term or field, found nothing";throw new t.QueryParseError(r,n.start,n.end)}switch(i.type){case t.QueryLexer.FIELD:return t.QueryParser.parseField;case t.QueryLexer.TERM:return t.QueryParser.parseTerm;default:var r="expecting term or field, found '"+i.type+"'";throw new t.QueryParseError(r,i.start,i.end)}}},t.QueryParser.parseField=function(e){var n=e.consumeLexeme();if(n!=null){if(e.query.allFields.indexOf(n.str)==-1){var r=e.query.allFields.map(function(o){return"'"+o+"'"}).join(", "),i="unrecognised field '"+n.str+"', possible fields: "+r;throw new t.QueryParseError(i,n.start,n.end)}e.currentClause.fields=[n.str];var s=e.peekLexeme();if(s==null){var i="expecting term, found nothing";throw new t.QueryParseError(i,n.start,n.end)}switch(s.type){case t.QueryLexer.TERM:return t.QueryParser.parseTerm;default:var i="expecting term, found '"+s.type+"'";throw new t.QueryParseError(i,s.start,s.end)}}},t.QueryParser.parseTerm=function(e){var n=e.consumeLexeme();if(n!=null){e.currentClause.term=n.str.toLowerCase(),n.str.indexOf("*")!=-1&&(e.currentClause.usePipeline=!1);var r=e.peekLexeme();if(r==null){e.nextClause();return}switch(r.type){case t.QueryLexer.TERM:return e.nextClause(),t.QueryParser.parseTerm;case t.QueryLexer.FIELD:return e.nextClause(),t.QueryParser.parseField;case t.QueryLexer.EDIT_DISTANCE:return t.QueryParser.parseEditDistance;case t.QueryLexer.BOOST:return t.QueryParser.parseBoost;case t.QueryLexer.PRESENCE:return e.nextClause(),t.QueryParser.parsePresence;default:var i="Unexpected lexeme type '"+r.type+"'";throw new t.QueryParseError(i,r.start,r.end)}}},t.QueryParser.parseEditDistance=function(e){var n=e.consumeLexeme();if(n!=null){var r=parseInt(n.str,10);if(isNaN(r)){var i="edit distance must be numeric";throw new t.QueryParseError(i,n.start,n.end)}e.currentClause.editDistance=r;var s=e.peekLexeme();if(s==null){e.nextClause();return}switch(s.type){case t.QueryLexer.TERM:return e.nextClause(),t.QueryParser.parseTerm;case t.QueryLexer.FIELD:return e.nextClause(),t.QueryParser.parseField;case t.QueryLexer.EDIT_DISTANCE:return t.QueryParser.parseEditDistance;case t.QueryLexer.BOOST:return t.QueryParser.parseBoost;case t.QueryLexer.PRESENCE:return e.nextClause(),t.QueryParser.parsePresence;default:var i="Unexpected lexeme type '"+s.type+"'";throw new t.QueryParseError(i,s.start,s.end)}}},t.QueryParser.parseBoost=function(e){var n=e.consumeLexeme();if(n!=null){var r=parseInt(n.str,10);if(isNaN(r)){var i="boost must be numeric";throw new t.QueryParseError(i,n.start,n.end)}e.currentClause.boost=r;var s=e.peekLexeme();if(s==null){e.nextClause();return}switch(s.type){case t.QueryLexer.TERM:return e.nextClause(),t.QueryParser.parseTerm;case t.QueryLexer.FIELD:return e.nextClause(),t.QueryParser.parseField;case t.QueryLexer.EDIT_DISTANCE:return t.QueryParser.parseEditDistance;case t.QueryLexer.BOOST:return t.QueryParser.parseBoost;case t.QueryLexer.PRESENCE:return e.nextClause(),t.QueryParser.parsePresence;default:var i="Unexpected lexeme type '"+s.type+"'";throw new t.QueryParseError(i,s.start,s.end)}}},function(e,n){typeof define=="function"&&define.amd?define(n):typeof de=="object"?he.exports=n():e.lunr=n()}(this,function(){return t})})()});window.translations||={copy:"Copy",copied:"Copied!",normally_hidden:"This member is normally hidden due to your filter settings.",hierarchy_expand:"Expand",hierarchy_collapse:"Collapse"};var ce=[];function G(t,e){ce.push({selector:e,constructor:t})}var J=class{alwaysVisibleMember=null;constructor(){this.createComponents(document.body),this.ensureFocusedElementVisible(),this.listenForCodeCopies(),window.addEventListener("hashchange",()=>this.ensureFocusedElementVisible()),document.body.style.display||(this.ensureFocusedElementVisible(),this.updateIndexVisibility(),this.scrollToHash())}createComponents(e){ce.forEach(n=>{e.querySelectorAll(n.selector).forEach(r=>{r.dataset.hasInstance||(new n.constructor({el:r,app:this}),r.dataset.hasInstance=String(!0))})})}filterChanged(){this.ensureFocusedElementVisible()}showPage(){document.body.style.display&&(document.body.style.removeProperty("display"),this.ensureFocusedElementVisible(),this.updateIndexVisibility(),this.scrollToHash())}scrollToHash(){if(location.hash){let e=document.getElementById(location.hash.substring(1));if(!e)return;e.scrollIntoView({behavior:"instant",block:"start"})}}ensureActivePageVisible(){let e=document.querySelector(".tsd-navigation .current"),n=e?.parentElement;for(;n&&!n.classList.contains(".tsd-navigation");)n instanceof HTMLDetailsElement&&(n.open=!0),n=n.parentElement;if(e&&!ze(e)){let r=e.getBoundingClientRect().top-document.documentElement.clientHeight/4;document.querySelector(".site-menu").scrollTop=r,document.querySelector(".col-sidebar").scrollTop=r}}updateIndexVisibility(){let e=document.querySelector(".tsd-index-content"),n=e?.open;e&&(e.open=!0),document.querySelectorAll(".tsd-index-section").forEach(r=>{r.style.display="block";let i=Array.from(r.querySelectorAll(".tsd-index-link")).every(s=>s.offsetParent==null);r.style.display=i?"none":"block"}),e&&(e.open=n)}ensureFocusedElementVisible(){if(this.alwaysVisibleMember&&(this.alwaysVisibleMember.classList.remove("always-visible"),this.alwaysVisibleMember.firstElementChild.remove(),this.alwaysVisibleMember=null),!location.hash)return;let e=document.getElementById(location.hash.substring(1));if(!e)return;let n=e.parentElement;for(;n&&n.tagName!=="SECTION";)n=n.parentElement;if(!n)return;let r=n.offsetParent==null,i=n;for(;i!==document.body;)i instanceof HTMLDetailsElement&&(i.open=!0),i=i.parentElement;if(n.offsetParent==null){this.alwaysVisibleMember=n,n.classList.add("always-visible");let s=document.createElement("p");s.classList.add("warning"),s.textContent=window.translations.normally_hidden,n.prepend(s)}r&&e.scrollIntoView()}listenForCodeCopies(){document.querySelectorAll("pre > button").forEach(e=>{let n;e.addEventListener("click",()=>{e.previousElementSibling instanceof HTMLElement&&navigator.clipboard.writeText(e.previousElementSibling.innerText.trim()),e.textContent=window.translations.copied,e.classList.add("visible"),clearTimeout(n),n=setTimeout(()=>{e.classList.remove("visible"),n=setTimeout(()=>{e.textContent=window.translations.copy},100)},1e3)})})}};function ze(t){let e=t.getBoundingClientRect(),n=Math.max(document.documentElement.clientHeight,window.innerHeight);return!(e.bottom<0||e.top-n>=0)}var ue=(t,e=100)=>{let n;return()=>{clearTimeout(n),n=setTimeout(()=>t(),e)}};var ge=$e(pe(),1);async function H(t){let e=Uint8Array.from(atob(t),s=>s.charCodeAt(0)),r=new Blob([e]).stream().pipeThrough(new DecompressionStream("deflate")),i=await new Response(r).text();return JSON.parse(i)}async function fe(t,e){if(!window.searchData)return;let n=await H(window.searchData);t.data=n,t.index=ge.Index.load(n.index),e.classList.remove("loading"),e.classList.add("ready")}function ve(){let t=document.getElementById("tsd-search");if(!t)return;let e={base:document.documentElement.dataset.base+"/"},n=document.getElementById("tsd-search-script");t.classList.add("loading"),n&&(n.addEventListener("error",()=>{t.classList.remove("loading"),t.classList.add("failure")}),n.addEventListener("load",()=>{fe(e,t)}),fe(e,t));let r=document.querySelector("#tsd-search input"),i=document.querySelector("#tsd-search .results");if(!r||!i)throw new Error("The input field or the result list wrapper was not found");i.addEventListener("mouseup",()=>{re(t)}),r.addEventListener("focus",()=>t.classList.add("has-focus")),We(t,i,r,e)}function We(t,e,n,r){n.addEventListener("input",ue(()=>{Ue(t,e,n,r)},200)),n.addEventListener("keydown",i=>{i.key=="Enter"?Je(e,t):i.key=="ArrowUp"?(me(e,n,-1),i.preventDefault()):i.key==="ArrowDown"&&(me(e,n,1),i.preventDefault())}),document.body.addEventListener("keypress",i=>{i.altKey||i.ctrlKey||i.metaKey||!n.matches(":focus")&&i.key==="/"&&(i.preventDefault(),n.focus())}),document.body.addEventListener("keyup",i=>{t.classList.contains("has-focus")&&(i.key==="Escape"||!e.matches(":focus-within")&&!n.matches(":focus"))&&(n.blur(),re(t))})}function re(t){t.classList.remove("has-focus")}function Ue(t,e,n,r){if(!r.index||!r.data)return;e.textContent="";let i=n.value.trim(),s;if(i){let o=i.split(" ").map(a=>a.length?`*${a}*`:"").join(" ");s=r.index.search(o)}else s=[];for(let o=0;o<s.length;o++){let a=s[o],l=r.data.rows[Number(a.ref)],c=1;l.name.toLowerCase().startsWith(i.toLowerCase())&&(c*=1+1/(1+Math.abs(l.name.length-i.length))),a.score*=c}if(s.length===0){let o=document.createElement("li");o.classList.add("no-results");let a=document.createElement("span");a.textContent="No results found",o.appendChild(a),e.appendChild(o)}s.sort((o,a)=>a.score-o.score);for(let o=0,a=Math.min(10,s.length);o<a;o++){let l=r.data.rows[Number(s[o].ref)],c=`<svg width="20" height="20" viewBox="0 0 24 24" fill="none" class="tsd-kind-icon"><use href="#icon-${l.kind}"></use></svg>`,d=ye(l.name,i);globalThis.DEBUG_SEARCH_WEIGHTS&&(d+=` (score: ${s[o].score.toFixed(2)})`),l.parent&&(d=`<span class="parent">
                ${ye(l.parent,i)}.</span>${d}`);let m=document.createElement("li");m.classList.value=l.classes??"";let p=document.createElement("a");p.href=r.base+l.url,p.innerHTML=c+d,m.append(p),p.addEventListener("focus",()=>{e.querySelector(".current")?.classList.remove("current"),m.classList.add("current")}),e.appendChild(m)}}function me(t,e,n){let r=t.querySelector(".current");if(!r)r=t.querySelector(n==1?"li:first-child":"li:last-child"),r&&r.classList.add("current");else{let i=r;if(n===1)do i=i.nextElementSibling??void 0;while(i instanceof HTMLElement&&i.offsetParent==null);else do i=i.previousElementSibling??void 0;while(i instanceof HTMLElement&&i.offsetParent==null);i?(r.classList.remove("current"),i.classList.add("current")):n===-1&&(r.classList.remove("current"),e.focus())}}function Je(t,e){let n=t.querySelector(".current");if(n||(n=t.querySelector("li:first-child")),n){let r=n.querySelector("a");r&&(window.location.href=r.href),re(e)}}function ye(t,e){if(e==="")return t;let n=t.toLocaleLowerCase(),r=e.toLocaleLowerCase(),i=[],s=0,o=n.indexOf(r);for(;o!=-1;)i.push(ne(t.substring(s,o)),`<b>${ne(t.substring(o,o+r.length))}</b>`),s=o+r.length,o=n.indexOf(r,s);return i.push(ne(t.substring(s))),i.join("")}var Ge={"&":"&amp;","<":"&lt;",">":"&gt;","'":"&#039;",'"':"&quot;"};function ne(t){return t.replace(/[&<>"'"]/g,e=>Ge[e])}var I=class{el;app;constructor(e){this.el=e.el,this.app=e.app}};var A="mousedown",Ee="mousemove",B="mouseup",X={x:0,y:0},xe=!1,ie=!1,Xe=!1,D=!1,Le=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);document.documentElement.classList.add(Le?"is-mobile":"not-mobile");Le&&"ontouchstart"in document.documentElement&&(Xe=!0,A="touchstart",Ee="touchmove",B="touchend");document.addEventListener(A,t=>{ie=!0,D=!1;let e=A=="touchstart"?t.targetTouches[0]:t;X.y=e.pageY||0,X.x=e.pageX||0});document.addEventListener(Ee,t=>{if(ie&&!D){let e=A=="touchstart"?t.targetTouches[0]:t,n=X.x-(e.pageX||0),r=X.y-(e.pageY||0);D=Math.sqrt(n*n+r*r)>10}});document.addEventListener(B,()=>{ie=!1});document.addEventListener("click",t=>{xe&&(t.preventDefault(),t.stopImmediatePropagation(),xe=!1)});var Y=class extends I{active;className;constructor(e){super(e),this.className=this.el.dataset.toggle||"",this.el.addEventListener(B,n=>this.onPointerUp(n)),this.el.addEventListener("click",n=>n.preventDefault()),document.addEventListener(A,n=>this.onDocumentPointerDown(n)),document.addEventListener(B,n=>this.onDocumentPointerUp(n))}setActive(e){if(this.active==e)return;this.active=e,document.documentElement.classList.toggle("has-"+this.className,e),this.el.classList.toggle("active",e);let n=(this.active?"to-has-":"from-has-")+this.className;document.documentElement.classList.add(n),setTimeout(()=>document.documentElement.classList.remove(n),500)}onPointerUp(e){D||(this.setActive(!0),e.preventDefault())}onDocumentPointerDown(e){if(this.active){if(e.target.closest(".col-sidebar, .tsd-filter-group"))return;this.setActive(!1)}}onDocumentPointerUp(e){if(!D&&this.active&&e.target.closest(".col-sidebar")){let n=e.target.closest("a");if(n){let r=window.location.href;r.indexOf("#")!=-1&&(r=r.substring(0,r.indexOf("#"))),n.href.substring(0,r.length)==r&&setTimeout(()=>this.setActive(!1),250)}}}};var se;try{se=localStorage}catch{se={getItem(){return null},setItem(){}}}var C=se;var be=document.head.appendChild(document.createElement("style"));be.dataset.for="filters";var Z=class extends I{key;value;constructor(e){super(e),this.key=`filter-${this.el.name}`,this.value=this.el.checked,this.el.addEventListener("change",()=>{this.setLocalStorage(this.el.checked)}),this.setLocalStorage(this.fromLocalStorage()),be.innerHTML+=`html:not(.${this.key}) .tsd-is-${this.el.name} { display: none; }
`,this.app.updateIndexVisibility()}fromLocalStorage(){let e=C.getItem(this.key);return e?e==="true":this.el.checked}setLocalStorage(e){C.setItem(this.key,e.toString()),this.value=e,this.handleValueChange()}handleValueChange(){this.el.checked=this.value,document.documentElement.classList.toggle(this.key,this.value),this.app.filterChanged(),this.app.updateIndexVisibility()}};var oe=new Map,ae=class{open;accordions=[];key;constructor(e,n){this.key=e,this.open=n}add(e){this.accordions.push(e),e.open=this.open,e.addEventListener("toggle",()=>{this.toggle(e.open)})}toggle(e){for(let n of this.accordions)n.open=e;C.setItem(this.key,e.toString())}},K=class extends I{constructor(e){super(e);let n=this.el.querySelector("summary"),r=n.querySelector("a");r&&r.addEventListener("click",()=>{location.assign(r.href)});let i=`tsd-accordion-${n.dataset.key??n.textContent.trim().replace(/\s+/g,"-").toLowerCase()}`,s;if(oe.has(i))s=oe.get(i);else{let o=C.getItem(i),a=o?o==="true":this.el.open;s=new ae(i,a),oe.set(i,s)}s.add(this.el)}};function Se(t){let e=C.getItem("tsd-theme")||"os";t.value=e,we(e),t.addEventListener("change",()=>{C.setItem("tsd-theme",t.value),we(t.value)})}function we(t){document.documentElement.dataset.theme=t}var ee;function Ce(){let t=document.getElementById("tsd-nav-script");t&&(t.addEventListener("load",Te),Te())}async function Te(){let t=document.getElementById("tsd-nav-container");if(!t||!window.navigationData)return;let e=await H(window.navigationData);ee=document.documentElement.dataset.base,ee.endsWith("/")||(ee+="/"),t.innerHTML="";for(let n of e)Ie(n,t,[]);window.app.createComponents(t),window.app.showPage(),window.app.ensureActivePageVisible()}function Ie(t,e,n){let r=e.appendChild(document.createElement("li"));if(t.children){let i=[...n,t.text],s=r.appendChild(document.createElement("details"));s.className=t.class?`${t.class} tsd-accordion`:"tsd-accordion";let o=s.appendChild(document.createElement("summary"));o.className="tsd-accordion-summary",o.dataset.key=i.join("$"),o.innerHTML='<svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="#icon-chevronDown"></use></svg>',ke(t,o);let a=s.appendChild(document.createElement("div"));a.className="tsd-accordion-details";let l=a.appendChild(document.createElement("ul"));l.className="tsd-nested-navigation";for(let c of t.children)Ie(c,l,i)}else ke(t,r,t.class)}function ke(t,e,n){if(t.path){let r=e.appendChild(document.createElement("a"));r.href=ee+t.path,n&&(r.className=n),location.pathname===r.pathname&&!r.href.includes("#")&&r.classList.add("current"),t.kind&&(r.innerHTML=`<svg width="20" height="20" viewBox="0 0 24 24" fill="none" class="tsd-kind-icon"><use href="#icon-${t.kind}"></use></svg>`),r.appendChild(document.createElement("span")).textContent=t.text}else{let r=e.appendChild(document.createElement("span"));r.innerHTML='<svg width="20" height="20" viewBox="0 0 24 24" fill="none" class="tsd-kind-icon"><use href="#icon-folder"></use></svg>',r.appendChild(document.createElement("span")).textContent=t.text}}var te=document.documentElement.dataset.base;te.endsWith("/")||(te+="/");function Pe(){document.querySelector(".tsd-full-hierarchy")?Ye():document.querySelector(".tsd-hierarchy")&&Ze()}function Ye(){document.addEventListener("click",r=>{let i=r.target;for(;i.parentElement&&i.parentElement.tagName!="LI";)i=i.parentElement;i.dataset.dropdown&&(i.dataset.dropdown=String(i.dataset.dropdown!=="true"))});let t=new Map,e=new Set;for(let r of document.querySelectorAll(".tsd-full-hierarchy [data-refl]")){let i=r.querySelector("ul");t.has(r.dataset.refl)?e.add(r.dataset.refl):i&&t.set(r.dataset.refl,i)}for(let r of e)n(r);function n(r){let i=t.get(r).cloneNode(!0);i.querySelectorAll("[id]").forEach(s=>{s.removeAttribute("id")}),i.querySelectorAll("[data-dropdown]").forEach(s=>{s.dataset.dropdown="false"});for(let s of document.querySelectorAll(`[data-refl="${r}"]`)){let o=tt(),a=s.querySelector("ul");s.insertBefore(o,a),o.dataset.dropdown=String(!!a),a||s.appendChild(i.cloneNode(!0))}}}function Ze(){let t=document.getElementById("tsd-hierarchy-script");t&&(t.addEventListener("load",Qe),Qe())}async function Qe(){let t=document.querySelector(".tsd-panel.tsd-hierarchy:has(h4 a)");if(!t||!window.hierarchyData)return;let e=+t.dataset.refl,n=await H(window.hierarchyData),r=t.querySelector("ul"),i=document.createElement("ul");if(i.classList.add("tsd-hierarchy"),Ke(i,n,e),r.querySelectorAll("li").length==i.querySelectorAll("li").length)return;let s=document.createElement("span");s.classList.add("tsd-hierarchy-toggle"),s.textContent=window.translations.hierarchy_expand,t.querySelector("h4 a")?.insertAdjacentElement("afterend",s),s.insertAdjacentText("beforebegin",", "),s.addEventListener("click",()=>{s.textContent===window.translations.hierarchy_expand?(r.insertAdjacentElement("afterend",i),r.remove(),s.textContent=window.translations.hierarchy_collapse):(i.insertAdjacentElement("afterend",r),i.remove(),s.textContent=window.translations.hierarchy_expand)})}function Ke(t,e,n){let r=e.roots.filter(i=>et(e,i,n));for(let i of r)t.appendChild(Oe(e,i,n))}function Oe(t,e,n,r=new Set){if(r.has(e))return;r.add(e);let i=t.reflections[e],s=document.createElement("li");if(s.classList.add("tsd-hierarchy-item"),e===n){let o=s.appendChild(document.createElement("span"));o.textContent=i.name,o.classList.add("tsd-hierarchy-target")}else{for(let a of i.uniqueNameParents||[]){let l=t.reflections[a],c=s.appendChild(document.createElement("a"));c.textContent=l.name,c.href=te+l.url,c.className=l.class+" tsd-signature-type",s.append(document.createTextNode("."))}let o=s.appendChild(document.createElement("a"));o.textContent=t.reflections[e].name,o.href=te+i.url,o.className=i.class+" tsd-signature-type"}if(i.children){let o=s.appendChild(document.createElement("ul"));o.classList.add("tsd-hierarchy");for(let a of i.children){let l=Oe(t,a,n,r);l&&o.appendChild(l)}}return r.delete(e),s}function et(t,e,n){if(e===n)return!0;let r=new Set,i=[t.reflections[e]];for(;i.length;){let s=i.pop();if(!r.has(s)){r.add(s);for(let o of s.children||[]){if(o===n)return!0;i.push(t.reflections[o])}}}return!1}function tt(){let t=document.createElementNS("http://www.w3.org/2000/svg","svg");return t.setAttribute("width","20"),t.setAttribute("height","20"),t.setAttribute("viewBox","0 0 24 24"),t.setAttribute("fill","none"),t.innerHTML='<use href="#icon-chevronDown"></use>',t}G(Y,"a[data-toggle]");G(K,".tsd-accordion");G(Z,".tsd-filter-item input[type=checkbox]");var _e=document.getElementById("tsd-theme");_e&&Se(_e);var nt=new J;Object.defineProperty(window,"app",{value:nt});ve();Ce();Pe();})();
/*! Bundled license information:

lunr/lunr.js:
  (**
   * lunr - http://lunrjs.com - A bit like Solr, but much smaller and not as bright - 2.3.9
   * Copyright (C) 2020 Oliver Nightingale
   * @license MIT
   *)
  (*!
   * lunr.utils
   * Copyright (C) 2020 Oliver Nightingale
   *)
  (*!
   * lunr.Set
   * Copyright (C) 2020 Oliver Nightingale
   *)
  (*!
   * lunr.tokenizer
   * Copyright (C) 2020 Oliver Nightingale
   *)
  (*!
   * lunr.Pipeline
   * Copyright (C) 2020 Oliver Nightingale
   *)
  (*!
   * lunr.Vector
   * Copyright (C) 2020 Oliver Nightingale
   *)
  (*!
   * lunr.stemmer
   * Copyright (C) 2020 Oliver Nightingale
   * Includes code from - http://tartarus.org/~martin/PorterStemmer/js.txt
   *)
  (*!
   * lunr.stopWordFilter
   * Copyright (C) 2020 Oliver Nightingale
   *)
  (*!
   * lunr.trimmer
   * Copyright (C) 2020 Oliver Nightingale
   *)
  (*!
   * lunr.TokenSet
   * Copyright (C) 2020 Oliver Nightingale
   *)
  (*!
   * lunr.Index
   * Copyright (C) 2020 Oliver Nightingale
   *)
  (*!
   * lunr.Builder
   * Copyright (C) 2020 Oliver Nightingale
   *)
*/


================================================
File: docs/assets/navigation.js
================================================
window.navigationData = "eJyNllGTkzAQgP8Lzx3r9bxT+1Zbq+h57dwx3oPjwzZsS4aQMMmi7Tj+d6fQEShh4YUH9ttvYSGb/PgTEB4pmAfPRoGGxQE1fZUUTIIcKAnmgVDgHLppO/4qoUwFkyCVOg7mN7N3fyf/TQtB0ujaIDWh3YNAN61C7eTZ3X0n+eMRslwh47gQnOoDkEg2Nka7BSK0/kfqUJxyaZTCsv4Kc2VOGWryWn3gOPEmP1/dgPVC8Uq9l4cezznEJlsEMtafXcW49DWSSLZWCnxClxvt/J+yi7FSBS5ZKuMwshDjFixk/j55yUH1KOtI4Se5+21sWrYKI3DpE/a3oQ/mCnxGJQv3grvEmDSM2Tb3sKP14+Vj1F+KXBLayKSoV0DgtV5DnPChUGYhhCk0rZBAKsc+cD/OFfkmNdXL73EdsTV6aa7EZQj1/n+NOKfZWmmspNMa+cXn4VhtkeX7Qj9AoUXCi33kkHpd6PJjc+PPw7HaEyUjB5EfHZKX8BoxDlchYdZrvuJGaYeFQ6qyTcsERer11GF2DoCOFTb2ATrl50Vf3b7KfP3+7c3drLmZL6Nw8/hcZ/8CK2Gnzrt4FWobbpvJohyH1bEjMkY1/ol9ocuF5aYdqC28f9MRfkcrUC3CAWULY6R4RFEQXp95al0LYER7qeN+Sx1lFAek1uHI+3odqCP8+Q8guIFL"

================================================
File: docs/assets/search.js
================================================
window.searchData = "";

================================================
File: docs/assets/style.css
================================================
@layer typedoc {
    :root {
        /* Light */
        --light-color-background: #f2f4f8;
        --light-color-background-secondary: #eff0f1;
        --light-color-warning-text: #222;
        --light-color-background-warning: #e6e600;
        --light-color-accent: #c5c7c9;
        --light-color-active-menu-item: var(--light-color-accent);
        --light-color-text: #222;
        --light-color-text-aside: #6e6e6e;

        --light-color-icon-background: var(--light-color-background);
        --light-color-icon-text: var(--light-color-text);

        --light-color-comment-tag-text: var(--light-color-text);
        --light-color-comment-tag: var(--light-color-background);

        --light-color-link: #1f70c2;
        --light-color-focus-outline: #3584e4;

        --light-color-ts-keyword: #056bd6;
        --light-color-ts-project: #b111c9;
        --light-color-ts-module: var(--light-color-ts-project);
        --light-color-ts-namespace: var(--light-color-ts-project);
        --light-color-ts-enum: #7e6f15;
        --light-color-ts-enum-member: var(--light-color-ts-enum);
        --light-color-ts-variable: #4760ec;
        --light-color-ts-function: #572be7;
        --light-color-ts-class: #1f70c2;
        --light-color-ts-interface: #108024;
        --light-color-ts-constructor: var(--light-color-ts-class);
        --light-color-ts-property: #9f5f30;
        --light-color-ts-method: #be3989;
        --light-color-ts-reference: #ff4d82;
        --light-color-ts-call-signature: var(--light-color-ts-method);
        --light-color-ts-index-signature: var(--light-color-ts-property);
        --light-color-ts-constructor-signature: var(
            --light-color-ts-constructor
        );
        --light-color-ts-parameter: var(--light-color-ts-variable);
        /* type literal not included as links will never be generated to it */
        --light-color-ts-type-parameter: #a55c0e;
        --light-color-ts-accessor: #c73c3c;
        --light-color-ts-get-signature: var(--light-color-ts-accessor);
        --light-color-ts-set-signature: var(--light-color-ts-accessor);
        --light-color-ts-type-alias: #d51270;
        /* reference not included as links will be colored with the kind that it points to */
        --light-color-document: #000000;

        --light-color-alert-note: #0969d9;
        --light-color-alert-tip: #1a7f37;
        --light-color-alert-important: #8250df;
        --light-color-alert-warning: #9a6700;
        --light-color-alert-caution: #cf222e;

        --light-external-icon: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100' width='10' height='10'><path fill-opacity='0' stroke='%23000' stroke-width='10' d='m43,35H5v60h60V57M45,5v10l10,10-30,30 20,20 30-30 10,10h10V5z'/></svg>");
        --light-color-scheme: light;

        /* Dark */
        --dark-color-background: #2b2e33;
        --dark-color-background-secondary: #1e2024;
        --dark-color-background-warning: #bebe00;
        --dark-color-warning-text: #222;
        --dark-color-accent: #9096a2;
        --dark-color-active-menu-item: #5d5d6a;
        --dark-color-text: #f5f5f5;
        --dark-color-text-aside: #dddddd;

        --dark-color-icon-background: var(--dark-color-background-secondary);
        --dark-color-icon-text: var(--dark-color-text);

        --dark-color-comment-tag-text: var(--dark-color-text);
        --dark-color-comment-tag: var(--dark-color-background);

        --dark-color-link: #00aff4;
        --dark-color-focus-outline: #4c97f2;

        --dark-color-ts-keyword: #3399ff;
        --dark-color-ts-project: #e358ff;
        --dark-color-ts-module: var(--dark-color-ts-project);
        --dark-color-ts-namespace: var(--dark-color-ts-project);
        --dark-color-ts-enum: #f4d93e;
        --dark-color-ts-enum-member: var(--dark-color-ts-enum);
        --dark-color-ts-variable: #798dff;
        --dark-color-ts-function: #a280ff;
        --dark-color-ts-class: #8ac4ff;
        --dark-color-ts-interface: #6cff87;
        --dark-color-ts-constructor: var(--dark-color-ts-class);
        --dark-color-ts-property: #ff984d;
        --dark-color-ts-method: #ff4db8;
        --dark-color-ts-reference: #ff4d82;
        --dark-color-ts-call-signature: var(--dark-color-ts-method);
        --dark-color-ts-index-signature: var(--dark-color-ts-property);
        --dark-color-ts-constructor-signature: var(--dark-color-ts-constructor);
        --dark-color-ts-parameter: var(--dark-color-ts-variable);
        /* type literal not included as links will never be generated to it */
        --dark-color-ts-type-parameter: #e07d13;
        --dark-color-ts-accessor: #ff6060;
        --dark-color-ts-get-signature: var(--dark-color-ts-accessor);
        --dark-color-ts-set-signature: var(--dark-color-ts-accessor);
        --dark-color-ts-type-alias: #ff6492;
        /* reference not included as links will be colored with the kind that it points to */
        --dark-color-document: #ffffff;

        --dark-color-alert-note: #0969d9;
        --dark-color-alert-tip: #1a7f37;
        --dark-color-alert-important: #8250df;
        --dark-color-alert-warning: #9a6700;
        --dark-color-alert-caution: #cf222e;

        --dark-external-icon: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100' width='10' height='10'><path fill-opacity='0' stroke='%23fff' stroke-width='10' d='m43,35H5v60h60V57M45,5v10l10,10-30,30 20,20 30-30 10,10h10V5z'/></svg>");
        --dark-color-scheme: dark;
    }

    @media (prefers-color-scheme: light) {
        :root {
            --color-background: var(--light-color-background);
            --color-background-secondary: var(
                --light-color-background-secondary
            );
            --color-background-warning: var(--light-color-background-warning);
            --color-warning-text: var(--light-color-warning-text);
            --color-accent: var(--light-color-accent);
            --color-active-menu-item: var(--light-color-active-menu-item);
            --color-text: var(--light-color-text);
            --color-text-aside: var(--light-color-text-aside);

            --color-icon-background: var(--light-color-icon-background);
            --color-icon-text: var(--light-color-icon-text);

            --color-comment-tag-text: var(--light-color-text);
            --color-comment-tag: var(--light-color-background);

            --color-link: var(--light-color-link);
            --color-focus-outline: var(--light-color-focus-outline);

            --color-ts-keyword: var(--light-color-ts-keyword);
            --color-ts-project: var(--light-color-ts-project);
            --color-ts-module: var(--light-color-ts-module);
            --color-ts-namespace: var(--light-color-ts-namespace);
            --color-ts-enum: var(--light-color-ts-enum);
            --color-ts-enum-member: var(--light-color-ts-enum-member);
            --color-ts-variable: var(--light-color-ts-variable);
            --color-ts-function: var(--light-color-ts-function);
            --color-ts-class: var(--light-color-ts-class);
            --color-ts-interface: var(--light-color-ts-interface);
            --color-ts-constructor: var(--light-color-ts-constructor);
            --color-ts-property: var(--light-color-ts-property);
            --color-ts-method: var(--light-color-ts-method);
            --color-ts-reference: var(--light-color-ts-reference);
            --color-ts-call-signature: var(--light-color-ts-call-signature);
            --color-ts-index-signature: var(--light-color-ts-index-signature);
            --color-ts-constructor-signature: var(
                --light-color-ts-constructor-signature
            );
            --color-ts-parameter: var(--light-color-ts-parameter);
            --color-ts-type-parameter: var(--light-color-ts-type-parameter);
            --color-ts-accessor: var(--light-color-ts-accessor);
            --color-ts-get-signature: var(--light-color-ts-get-signature);
            --color-ts-set-signature: var(--light-color-ts-set-signature);
            --color-ts-type-alias: var(--light-color-ts-type-alias);
            --color-document: var(--light-color-document);

            --color-alert-note: var(--light-color-alert-note);
            --color-alert-tip: var(--light-color-alert-tip);
            --color-alert-important: var(--light-color-alert-important);
            --color-alert-warning: var(--light-color-alert-warning);
            --color-alert-caution: var(--light-color-alert-caution);

            --external-icon: var(--light-external-icon);
            --color-scheme: var(--light-color-scheme);
        }
    }

    @media (prefers-color-scheme: dark) {
        :root {
            --color-background: var(--dark-color-background);
            --color-background-secondary: var(
                --dark-color-background-secondary
            );
            --color-background-warning: var(--dark-color-background-warning);
            --color-warning-text: var(--dark-color-warning-text);
            --color-accent: var(--dark-color-accent);
            --color-active-menu-item: var(--dark-color-active-menu-item);
            --color-text: var(--dark-color-text);
            --color-text-aside: var(--dark-color-text-aside);

            --color-icon-background: var(--dark-color-icon-background);
            --color-icon-text: var(--dark-color-icon-text);

            --color-comment-tag-text: var(--dark-color-text);
            --color-comment-tag: var(--dark-color-background);

            --color-link: var(--dark-color-link);
            --color-focus-outline: var(--dark-color-focus-outline);

            --color-ts-keyword: var(--dark-color-ts-keyword);
            --color-ts-project: var(--dark-color-ts-project);
            --color-ts-module: var(--dark-color-ts-module);
            --color-ts-namespace: var(--dark-color-ts-namespace);
            --color-ts-enum: var(--dark-color-ts-enum);
            --color-ts-enum-member: var(--dark-color-ts-enum-member);
            --color-ts-variable: var(--dark-color-ts-variable);
            --color-ts-function: var(--dark-color-ts-function);
            --color-ts-class: var(--dark-color-ts-class);
            --color-ts-interface: var(--dark-color-ts-interface);
            --color-ts-constructor: var(--dark-color-ts-constructor);
            --color-ts-property: var(--dark-color-ts-property);
            --color-ts-method: var(--dark-color-ts-method);
            --color-ts-reference: var(--dark-color-ts-reference);
            --color-ts-call-signature: var(--dark-color-ts-call-signature);
            --color-ts-index-signature: var(--dark-color-ts-index-signature);
            --color-ts-constructor-signature: var(
                --dark-color-ts-constructor-signature
            );
            --color-ts-parameter: var(--dark-color-ts-parameter);
            --color-ts-type-parameter: var(--dark-color-ts-type-parameter);
            --color-ts-accessor: var(--dark-color-ts-accessor);
            --color-ts-get-signature: var(--dark-color-ts-get-signature);
            --color-ts-set-signature: var(--dark-color-ts-set-signature);
            --color-ts-type-alias: var(--dark-color-ts-type-alias);
            --color-document: var(--dark-color-document);

            --color-alert-note: var(--dark-color-alert-note);
            --color-alert-tip: var(--dark-color-alert-tip);
            --color-alert-important: var(--dark-color-alert-important);
            --color-alert-warning: var(--dark-color-alert-warning);
            --color-alert-caution: var(--dark-color-alert-caution);

            --external-icon: var(--dark-external-icon);
            --color-scheme: var(--dark-color-scheme);
        }
    }

    html {
        color-scheme: var(--color-scheme);
    }

    body {
        margin: 0;
    }

    :root[data-theme="light"] {
        --color-background: var(--light-color-background);
        --color-background-secondary: var(--light-color-background-secondary);
        --color-background-warning: var(--light-color-background-warning);
        --color-warning-text: var(--light-color-warning-text);
        --color-icon-background: var(--light-color-icon-background);
        --color-accent: var(--light-color-accent);
        --color-active-menu-item: var(--light-color-active-menu-item);
        --color-text: var(--light-color-text);
        --color-text-aside: var(--light-color-text-aside);
        --color-icon-text: var(--light-color-icon-text);

        --color-comment-tag-text: var(--light-color-text);
        --color-comment-tag: var(--light-color-background);

        --color-link: var(--light-color-link);
        --color-focus-outline: var(--light-color-focus-outline);

        --color-ts-keyword: var(--light-color-ts-keyword);
        --color-ts-project: var(--light-color-ts-project);
        --color-ts-module: var(--light-color-ts-module);
        --color-ts-namespace: var(--light-color-ts-namespace);
        --color-ts-enum: var(--light-color-ts-enum);
        --color-ts-enum-member: var(--light-color-ts-enum-member);
        --color-ts-variable: var(--light-color-ts-variable);
        --color-ts-function: var(--light-color-ts-function);
        --color-ts-class: var(--light-color-ts-class);
        --color-ts-interface: var(--light-color-ts-interface);
        --color-ts-constructor: var(--light-color-ts-constructor);
        --color-ts-property: var(--light-color-ts-property);
        --color-ts-method: var(--light-color-ts-method);
        --color-ts-reference: var(--light-color-ts-reference);
        --color-ts-call-signature: var(--light-color-ts-call-signature);
        --color-ts-index-signature: var(--light-color-ts-index-signature);
        --color-ts-constructor-signature: var(
            --light-color-ts-constructor-signature
        );
        --color-ts-parameter: var(--light-color-ts-parameter);
        --color-ts-type-parameter: var(--light-color-ts-type-parameter);
        --color-ts-accessor: var(--light-color-ts-accessor);
        --color-ts-get-signature: var(--light-color-ts-get-signature);
        --color-ts-set-signature: var(--light-color-ts-set-signature);
        --color-ts-type-alias: var(--light-color-ts-type-alias);
        --color-document: var(--light-color-document);

        --color-note: var(--light-color-note);
        --color-tip: var(--light-color-tip);
        --color-important: var(--light-color-important);
        --color-warning: var(--light-color-warning);
        --color-caution: var(--light-color-caution);

        --external-icon: var(--light-external-icon);
        --color-scheme: var(--light-color-scheme);
    }

    :root[data-theme="dark"] {
        --color-background: var(--dark-color-background);
        --color-background-secondary: var(--dark-color-background-secondary);
        --color-background-warning: var(--dark-color-background-warning);
        --color-warning-text: var(--dark-color-warning-text);
        --color-icon-background: var(--dark-color-icon-background);
        --color-accent: var(--dark-color-accent);
        --color-active-menu-item: var(--dark-color-active-menu-item);
        --color-text: var(--dark-color-text);
        --color-text-aside: var(--dark-color-text-aside);
        --color-icon-text: var(--dark-color-icon-text);

        --color-comment-tag-text: var(--dark-color-text);
        --color-comment-tag: var(--dark-color-background);

        --color-link: var(--dark-color-link);
        --color-focus-outline: var(--dark-color-focus-outline);

        --color-ts-keyword: var(--dark-color-ts-keyword);
        --color-ts-project: var(--dark-color-ts-project);
        --color-ts-module: var(--dark-color-ts-module);
        --color-ts-namespace: var(--dark-color-ts-namespace);
        --color-ts-enum: var(--dark-color-ts-enum);
        --color-ts-enum-member: var(--dark-color-ts-enum-member);
        --color-ts-variable: var(--dark-color-ts-variable);
        --color-ts-function: var(--dark-color-ts-function);
        --color-ts-class: var(--dark-color-ts-class);
        --color-ts-interface: var(--dark-color-ts-interface);
        --color-ts-constructor: var(--dark-color-ts-constructor);
        --color-ts-property: var(--dark-color-ts-property);
        --color-ts-method: var(--dark-color-ts-method);
        --color-ts-reference: var(--dark-color-ts-reference);
        --color-ts-call-signature: var(--dark-color-ts-call-signature);
        --color-ts-index-signature: var(--dark-color-ts-index-signature);
        --color-ts-constructor-signature: var(
            --dark-color-ts-constructor-signature
        );
        --color-ts-parameter: var(--dark-color-ts-parameter);
        --color-ts-type-parameter: var(--dark-color-ts-type-parameter);
        --color-ts-accessor: var(--dark-color-ts-accessor);
        --color-ts-get-signature: var(--dark-color-ts-get-signature);
        --color-ts-set-signature: var(--dark-color-ts-set-signature);
        --color-ts-type-alias: var(--dark-color-ts-type-alias);
        --color-document: var(--dark-color-document);

        --color-note: var(--dark-color-note);
        --color-tip: var(--dark-color-tip);
        --color-important: var(--dark-color-important);
        --color-warning: var(--dark-color-warning);
        --color-caution: var(--dark-color-caution);

        --external-icon: var(--dark-external-icon);
        --color-scheme: var(--dark-color-scheme);
    }

    *:focus-visible,
    .tsd-accordion-summary:focus-visible svg {
        outline: 2px solid var(--color-focus-outline);
    }

    .always-visible,
    .always-visible .tsd-signatures {
        display: inherit !important;
    }

    h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
        line-height: 1.2;
    }

    h1 {
        font-size: 1.875rem;
        margin: 0.67rem 0;
    }

    h2 {
        font-size: 1.5rem;
        margin: 0.83rem 0;
    }

    h3 {
        font-size: 1.25rem;
        margin: 1rem 0;
    }

    h4 {
        font-size: 1.05rem;
        margin: 1.33rem 0;
    }

    h5 {
        font-size: 1rem;
        margin: 1.5rem 0;
    }

    h6 {
        font-size: 0.875rem;
        margin: 2.33rem 0;
    }

    dl,
    menu,
    ol,
    ul {
        margin: 1em 0;
    }

    dd {
        margin: 0 0 0 34px;
    }

    .container {
        max-width: 1700px;
        padding: 0 2rem;
    }

    /* Footer */
    footer {
        border-top: 1px solid var(--color-accent);
        padding-top: 1rem;
        padding-bottom: 1rem;
        max-height: 3.5rem;
    }
    footer > p {
        margin: 0 1em;
    }

    .container-main {
        margin: 0 auto;
        /* toolbar, footer, margin */
        min-height: calc(100vh - 41px - 56px - 4rem);
    }

    @keyframes fade-in {
        from {
            opacity: 0;
        }
        to {
            opacity: 1;
        }
    }
    @keyframes fade-out {
        from {
            opacity: 1;
            visibility: visible;
        }
        to {
            opacity: 0;
        }
    }
    @keyframes fade-in-delayed {
        0% {
            opacity: 0;
        }
        33% {
            opacity: 0;
        }
        100% {
            opacity: 1;
        }
    }
    @keyframes fade-out-delayed {
        0% {
            opacity: 1;
            visibility: visible;
        }
        66% {
            opacity: 0;
        }
        100% {
            opacity: 0;
        }
    }
    @keyframes pop-in-from-right {
        from {
            transform: translate(100%, 0);
        }
        to {
            transform: translate(0, 0);
        }
    }
    @keyframes pop-out-to-right {
        from {
            transform: translate(0, 0);
            visibility: visible;
        }
        to {
            transform: translate(100%, 0);
        }
    }
    body {
        background: var(--color-background);
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Noto Sans",
            Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji";
        font-size: 16px;
        color: var(--color-text);
    }

    a {
        color: var(--color-link);
        text-decoration: none;
    }
    a:hover {
        text-decoration: underline;
    }
    a.external[target="_blank"] {
        background-image: var(--external-icon);
        background-position: top 3px right;
        background-repeat: no-repeat;
        padding-right: 13px;
    }
    a.tsd-anchor-link {
        color: var(--color-text);
    }

    code,
    pre {
        font-family: Menlo, Monaco, Consolas, "Courier New", monospace;
        padding: 0.2em;
        margin: 0;
        font-size: 0.875rem;
        border-radius: 0.8em;
    }

    pre {
        position: relative;
        white-space: pre-wrap;
        word-wrap: break-word;
        padding: 10px;
        border: 1px solid var(--color-accent);
        margin-bottom: 8px;
    }
    pre code {
        padding: 0;
        font-size: 100%;
    }
    pre > button {
        position: absolute;
        top: 10px;
        right: 10px;
        opacity: 0;
        transition: opacity 0.1s;
        box-sizing: border-box;
    }
    pre:hover > button,
    pre > button.visible {
        opacity: 1;
    }

    blockquote {
        margin: 1em 0;
        padding-left: 1em;
        border-left: 4px solid gray;
    }

    .tsd-typography {
        line-height: 1.333em;
    }
    .tsd-typography ul {
        list-style: square;
        padding: 0 0 0 20px;
        margin: 0;
    }
    .tsd-typography .tsd-index-panel h3,
    .tsd-index-panel .tsd-typography h3,
    .tsd-typography h4,
    .tsd-typography h5,
    .tsd-typography h6 {
        font-size: 1em;
    }
    .tsd-typography h5,
    .tsd-typography h6 {
        font-weight: normal;
    }
    .tsd-typography p,
    .tsd-typography ul,
    .tsd-typography ol {
        margin: 1em 0;
    }
    .tsd-typography table {
        border-collapse: collapse;
        border: none;
    }
    .tsd-typography td,
    .tsd-typography th {
        padding: 6px 13px;
        border: 1px solid var(--color-accent);
    }
    .tsd-typography thead,
    .tsd-typography tr:nth-child(even) {
        background-color: var(--color-background-secondary);
    }

    .tsd-alert {
        padding: 8px 16px;
        margin-bottom: 16px;
        border-left: 0.25em solid var(--alert-color);
    }
    .tsd-alert blockquote > :last-child,
    .tsd-alert > :last-child {
        margin-bottom: 0;
    }
    .tsd-alert-title {
        color: var(--alert-color);
        display: inline-flex;
        align-items: center;
    }
    .tsd-alert-title span {
        margin-left: 4px;
    }

    .tsd-alert-note {
        --alert-color: var(--color-alert-note);
    }
    .tsd-alert-tip {
        --alert-color: var(--color-alert-tip);
    }
    .tsd-alert-important {
        --alert-color: var(--color-alert-important);
    }
    .tsd-alert-warning {
        --alert-color: var(--color-alert-warning);
    }
    .tsd-alert-caution {
        --alert-color: var(--color-alert-caution);
    }

    .tsd-breadcrumb {
        margin: 0;
        padding: 0;
        color: var(--color-text-aside);
    }
    .tsd-breadcrumb a {
        color: var(--color-text-aside);
        text-decoration: none;
    }
    .tsd-breadcrumb a:hover {
        text-decoration: underline;
    }
    .tsd-breadcrumb li {
        display: inline;
    }
    .tsd-breadcrumb li:after {
        content: " / ";
    }

    .tsd-comment-tags {
        display: flex;
        flex-direction: column;
    }
    dl.tsd-comment-tag-group {
        display: flex;
        align-items: center;
        overflow: hidden;
        margin: 0.5em 0;
    }
    dl.tsd-comment-tag-group dt {
        display: flex;
        margin-right: 0.5em;
        font-size: 0.875em;
        font-weight: normal;
    }
    dl.tsd-comment-tag-group dd {
        margin: 0;
    }
    code.tsd-tag {
        padding: 0.25em 0.4em;
        border: 0.1em solid var(--color-accent);
        margin-right: 0.25em;
        font-size: 70%;
    }
    h1 code.tsd-tag:first-of-type {
        margin-left: 0.25em;
    }

    dl.tsd-comment-tag-group dd:before,
    dl.tsd-comment-tag-group dd:after {
        content: " ";
    }
    dl.tsd-comment-tag-group dd pre,
    dl.tsd-comment-tag-group dd:after {
        clear: both;
    }
    dl.tsd-comment-tag-group p {
        margin: 0;
    }

    .tsd-panel.tsd-comment .lead {
        font-size: 1.1em;
        line-height: 1.333em;
        margin-bottom: 2em;
    }
    .tsd-panel.tsd-comment .lead:last-child {
        margin-bottom: 0;
    }

    .tsd-filter-visibility h4 {
        font-size: 1rem;
        padding-top: 0.75rem;
        padding-bottom: 0.5rem;
        margin: 0;
    }
    .tsd-filter-item:not(:last-child) {
        margin-bottom: 0.5rem;
    }
    .tsd-filter-input {
        display: flex;
        width: -moz-fit-content;
        width: fit-content;
        align-items: center;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
        cursor: pointer;
    }
    .tsd-filter-input input[type="checkbox"] {
        cursor: pointer;
        position: absolute;
        width: 1.5em;
        height: 1.5em;
        opacity: 0;
    }
    .tsd-filter-input input[type="checkbox"]:disabled {
        pointer-events: none;
    }
    .tsd-filter-input svg {
        cursor: pointer;
        width: 1.5em;
        height: 1.5em;
        margin-right: 0.5em;
        border-radius: 0.33em;
        /* Leaving this at full opacity breaks event listeners on Firefox.
    Don't remove unless you know what you're doing. */
        opacity: 0.99;
    }
    .tsd-filter-input input[type="checkbox"]:focus-visible + svg {
        outline: 2px solid var(--color-focus-outline);
    }
    .tsd-checkbox-background {
        fill: var(--color-accent);
    }
    input[type="checkbox"]:checked ~ svg .tsd-checkbox-checkmark {
        stroke: var(--color-text);
    }
    .tsd-filter-input input:disabled ~ svg > .tsd-checkbox-background {
        fill: var(--color-background);
        stroke: var(--color-accent);
        stroke-width: 0.25rem;
    }
    .tsd-filter-input input:disabled ~ svg > .tsd-checkbox-checkmark {
        stroke: var(--color-accent);
    }

    .settings-label {
        font-weight: bold;
        text-transform: uppercase;
        display: inline-block;
    }

    .tsd-filter-visibility .settings-label {
        margin: 0.75rem 0 0.5rem 0;
    }

    .tsd-theme-toggle .settings-label {
        margin: 0.75rem 0.75rem 0 0;
    }

    .tsd-hierarchy h4 label:hover span {
        text-decoration: underline;
    }

    .tsd-hierarchy {
        list-style: square;
        margin: 0;
    }
    .tsd-hierarchy-target {
        font-weight: bold;
    }
    .tsd-hierarchy-toggle {
        color: var(--color-link);
        cursor: pointer;
    }

    .tsd-full-hierarchy:not(:last-child) {
        margin-bottom: 1em;
        padding-bottom: 1em;
        border-bottom: 1px solid var(--color-accent);
    }
    .tsd-full-hierarchy,
    .tsd-full-hierarchy ul {
        list-style: none;
        margin: 0;
        padding: 0;
    }
    .tsd-full-hierarchy ul {
        padding-left: 1.5rem;
    }
    .tsd-full-hierarchy a {
        padding: 0.25rem 0 !important;
        font-size: 1rem;
        display: inline-flex;
        align-items: center;
        color: var(--color-text);
    }
    .tsd-full-hierarchy svg[data-dropdown] {
        cursor: pointer;
    }
    .tsd-full-hierarchy svg[data-dropdown="false"] {
        transform: rotate(-90deg);
    }
    .tsd-full-hierarchy svg[data-dropdown="false"] ~ ul {
        display: none;
    }

    .tsd-panel-group.tsd-index-group {
        margin-bottom: 0;
    }
    .tsd-index-panel .tsd-index-list {
        list-style: none;
        line-height: 1.333em;
        margin: 0;
        padding: 0.25rem 0 0 0;
        overflow: hidden;
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        column-gap: 1rem;
        grid-template-rows: auto;
    }
    @media (max-width: 1024px) {
        .tsd-index-panel .tsd-index-list {
            grid-template-columns: repeat(2, 1fr);
        }
    }
    @media (max-width: 768px) {
        .tsd-index-panel .tsd-index-list {
            grid-template-columns: repeat(1, 1fr);
        }
    }
    .tsd-index-panel .tsd-index-list li {
        -webkit-page-break-inside: avoid;
        -moz-page-break-inside: avoid;
        -ms-page-break-inside: avoid;
        -o-page-break-inside: avoid;
        page-break-inside: avoid;
    }

    .tsd-flag {
        display: inline-block;
        padding: 0.25em 0.4em;
        border-radius: 4px;
        color: var(--color-comment-tag-text);
        background-color: var(--color-comment-tag);
        text-indent: 0;
        font-size: 75%;
        line-height: 1;
        font-weight: normal;
    }

    .tsd-anchor {
        position: relative;
        top: -100px;
    }

    .tsd-member {
        position: relative;
    }
    .tsd-member .tsd-anchor + h3 {
        display: flex;
        align-items: center;
        margin-top: 0;
        margin-bottom: 0;
        border-bottom: none;
    }

    .tsd-navigation.settings {
        margin: 1rem 0;
    }
    .tsd-navigation > a,
    .tsd-navigation .tsd-accordion-summary {
        width: calc(100% - 0.25rem);
        display: flex;
        align-items: center;
    }
    .tsd-navigation a,
    .tsd-navigation summary > span,
    .tsd-page-navigation a {
        display: flex;
        width: calc(100% - 0.25rem);
        align-items: center;
        padding: 0.25rem;
        color: var(--color-text);
        text-decoration: none;
        box-sizing: border-box;
    }
    .tsd-navigation a.current,
    .tsd-page-navigation a.current {
        background: var(--color-active-menu-item);
    }
    .tsd-navigation a:hover,
    .tsd-page-navigation a:hover {
        text-decoration: underline;
    }
    .tsd-navigation ul,
    .tsd-page-navigation ul {
        margin-top: 0;
        margin-bottom: 0;
        padding: 0;
        list-style: none;
    }
    .tsd-navigation li,
    .tsd-page-navigation li {
        padding: 0;
        max-width: 100%;
    }
    .tsd-navigation .tsd-nav-link {
        display: none;
    }
    .tsd-nested-navigation {
        margin-left: 3rem;
    }
    .tsd-nested-navigation > li > details {
        margin-left: -1.5rem;
    }
    .tsd-small-nested-navigation {
        margin-left: 1.5rem;
    }
    .tsd-small-nested-navigation > li > details {
        margin-left: -1.5rem;
    }

    .tsd-page-navigation-section {
        margin-left: 10px;
    }
    .tsd-page-navigation-section > summary {
        padding: 0.25rem;
    }
    .tsd-page-navigation-section > div {
        margin-left: 20px;
    }
    .tsd-page-navigation ul {
        padding-left: 1.75rem;
    }

    #tsd-sidebar-links a {
        margin-top: 0;
        margin-bottom: 0.5rem;
        line-height: 1.25rem;
    }
    #tsd-sidebar-links a:last-of-type {
        margin-bottom: 0;
    }

    a.tsd-index-link {
        padding: 0.25rem 0 !important;
        font-size: 1rem;
        line-height: 1.25rem;
        display: inline-flex;
        align-items: center;
        color: var(--color-text);
    }
    .tsd-accordion-summary {
        list-style-type: none; /* hide marker on non-safari */
        outline: none; /* broken on safari, so just hide it */
    }
    .tsd-accordion-summary::-webkit-details-marker {
        display: none; /* hide marker on safari */
    }
    .tsd-accordion-summary,
    .tsd-accordion-summary a {
        -moz-user-select: none;
        -webkit-user-select: none;
        -ms-user-select: none;
        user-select: none;

        cursor: pointer;
    }
    .tsd-accordion-summary a {
        width: calc(100% - 1.5rem);
    }
    .tsd-accordion-summary > * {
        margin-top: 0;
        margin-bottom: 0;
        padding-top: 0;
        padding-bottom: 0;
    }
    .tsd-accordion .tsd-accordion-summary > svg {
        margin-left: 0.25rem;
        vertical-align: text-top;
    }
    /*
    We need to be careful to target the arrow indicating whether the accordion
    is open, but not any other SVGs included in the details element.
*/
    .tsd-accordion:not([open]) > .tsd-accordion-summary > svg:first-child,
    .tsd-accordion:not([open]) > .tsd-accordion-summary > h1 > svg:first-child,
    .tsd-accordion:not([open]) > .tsd-accordion-summary > h2 > svg:first-child,
    .tsd-accordion:not([open]) > .tsd-accordion-summary > h3 > svg:first-child,
    .tsd-accordion:not([open]) > .tsd-accordion-summary > h4 > svg:first-child {
        transform: rotate(-90deg);
    }
    .tsd-index-content > :not(:first-child) {
        margin-top: 0.75rem;
    }
    .tsd-index-heading {
        margin-top: 1.5rem;
        margin-bottom: 0.75rem;
    }

    .tsd-no-select {
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
    }
    .tsd-kind-icon {
        margin-right: 0.5rem;
        width: 1.25rem;
        height: 1.25rem;
        min-width: 1.25rem;
        min-height: 1.25rem;
    }
    .tsd-signature > .tsd-kind-icon {
        margin-right: 0.8rem;
    }

    .tsd-panel {
        margin-bottom: 2.5rem;
    }
    .tsd-panel.tsd-member {
        margin-bottom: 4rem;
    }
    .tsd-panel:empty {
        display: none;
    }
    .tsd-panel > h1,
    .tsd-panel > h2,
    .tsd-panel > h3 {
        margin: 1.5rem -1.5rem 0.75rem -1.5rem;
        padding: 0 1.5rem 0.75rem 1.5rem;
    }
    .tsd-panel > h1.tsd-before-signature,
    .tsd-panel > h2.tsd-before-signature,
    .tsd-panel > h3.tsd-before-signature {
        margin-bottom: 0;
        border-bottom: none;
    }

    .tsd-panel-group {
        margin: 2rem 0;
    }
    .tsd-panel-group.tsd-index-group {
        margin: 2rem 0;
    }
    .tsd-panel-group.tsd-index-group details {
        margin: 2rem 0;
    }
    .tsd-panel-group > .tsd-accordion-summary {
        margin-bottom: 1rem;
    }

    #tsd-search {
        transition: background-color 0.2s;
    }
    #tsd-search .title {
        position: relative;
        z-index: 2;
    }
    #tsd-search .field {
        position: absolute;
        left: 0;
        top: 0;
        right: 2.5rem;
        height: 100%;
    }
    #tsd-search .field input {
        box-sizing: border-box;
        position: relative;
        top: -50px;
        z-index: 1;
        width: 100%;
        padding: 0 10px;
        opacity: 0;
        outline: 0;
        border: 0;
        background: transparent;
        color: var(--color-text);
    }
    #tsd-search .field label {
        position: absolute;
        overflow: hidden;
        right: -40px;
    }
    #tsd-search .field input,
    #tsd-search .title,
    #tsd-toolbar-links a {
        transition: opacity 0.2s;
    }
    #tsd-search .results {
        position: absolute;
        visibility: hidden;
        top: 40px;
        width: 100%;
        margin: 0;
        padding: 0;
        list-style: none;
        box-shadow: 0 0 4px rgba(0, 0, 0, 0.25);
    }
    #tsd-search .results li {
        background-color: var(--color-background);
        line-height: initial;
        padding: 4px;
    }
    #tsd-search .results li:nth-child(even) {
        background-color: var(--color-background-secondary);
    }
    #tsd-search .results li.state {
        display: none;
    }
    #tsd-search .results li.current:not(.no-results),
    #tsd-search .results li:hover:not(.no-results) {
        background-color: var(--color-accent);
    }
    #tsd-search .results a {
        display: flex;
        align-items: center;
        padding: 0.25rem;
        box-sizing: border-box;
    }
    #tsd-search .results a:before {
        top: 10px;
    }
    #tsd-search .results span.parent {
        color: var(--color-text-aside);
        font-weight: normal;
    }
    #tsd-search.has-focus {
        background-color: var(--color-accent);
    }
    #tsd-search.has-focus .field input {
        top: 0;
        opacity: 1;
    }
    #tsd-search.has-focus .title,
    #tsd-search.has-focus #tsd-toolbar-links a {
        z-index: 0;
        opacity: 0;
    }
    #tsd-search.has-focus .results {
        visibility: visible;
    }
    #tsd-search.loading .results li.state.loading {
        display: block;
    }
    #tsd-search.failure .results li.state.failure {
        display: block;
    }

    #tsd-toolbar-links {
        position: absolute;
        top: 0;
        right: 2rem;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: flex-end;
    }
    #tsd-toolbar-links a {
        margin-left: 1.5rem;
    }
    #tsd-toolbar-links a:hover {
        text-decoration: underline;
    }

    .tsd-signature {
        margin: 0 0 1rem 0;
        padding: 1rem 0.5rem;
        border: 1px solid var(--color-accent);
        font-family: Menlo, Monaco, Consolas, "Courier New", monospace;
        font-size: 14px;
        overflow-x: auto;
    }

    .tsd-signature-keyword {
        color: var(--color-ts-keyword);
        font-weight: normal;
    }

    .tsd-signature-symbol {
        color: var(--color-text-aside);
        font-weight: normal;
    }

    .tsd-signature-type {
        font-style: italic;
        font-weight: normal;
    }

    .tsd-signatures {
        padding: 0;
        margin: 0 0 1em 0;
        list-style-type: none;
    }
    .tsd-signatures .tsd-signature {
        margin: 0;
        border-color: var(--color-accent);
        border-width: 1px 0;
        transition: background-color 0.1s;
    }
    .tsd-signatures .tsd-index-signature:not(:last-child) {
        margin-bottom: 1em;
    }
    .tsd-signatures .tsd-index-signature .tsd-signature {
        border-width: 1px;
    }
    .tsd-description .tsd-signatures .tsd-signature {
        border-width: 1px;
    }

    ul.tsd-parameter-list,
    ul.tsd-type-parameter-list {
        list-style: square;
        margin: 0;
        padding-left: 20px;
    }
    ul.tsd-parameter-list > li.tsd-parameter-signature,
    ul.tsd-type-parameter-list > li.tsd-parameter-signature {
        list-style: none;
        margin-left: -20px;
    }
    ul.tsd-parameter-list h5,
    ul.tsd-type-parameter-list h5 {
        font-size: 16px;
        margin: 1em 0 0.5em 0;
    }
    .tsd-sources {
        margin-top: 1rem;
        font-size: 0.875em;
    }
    .tsd-sources a {
        color: var(--color-text-aside);
        text-decoration: underline;
    }
    .tsd-sources ul {
        list-style: none;
        padding: 0;
    }

    .tsd-page-toolbar {
        position: sticky;
        z-index: 1;
        top: 0;
        left: 0;
        width: 100%;
        color: var(--color-text);
        background: var(--color-background-secondary);
        border-bottom: 1px var(--color-accent) solid;
        transition: transform 0.3s ease-in-out;
    }
    .tsd-page-toolbar a {
        color: var(--color-text);
        text-decoration: none;
    }
    .tsd-page-toolbar a.title {
        font-weight: bold;
    }
    .tsd-page-toolbar a.title:hover {
        text-decoration: underline;
    }
    .tsd-page-toolbar .tsd-toolbar-contents {
        display: flex;
        justify-content: space-between;
        height: 2.5rem;
        margin: 0 auto;
    }
    .tsd-page-toolbar .table-cell {
        position: relative;
        white-space: nowrap;
        line-height: 40px;
    }
    .tsd-page-toolbar .table-cell:first-child {
        width: 100%;
    }
    .tsd-page-toolbar .tsd-toolbar-icon {
        box-sizing: border-box;
        line-height: 0;
        padding: 12px 0;
    }

    .tsd-widget {
        display: inline-block;
        overflow: hidden;
        opacity: 0.8;
        height: 40px;
        transition:
            opacity 0.1s,
            background-color 0.2s;
        vertical-align: bottom;
        cursor: pointer;
    }
    .tsd-widget:hover {
        opacity: 0.9;
    }
    .tsd-widget.active {
        opacity: 1;
        background-color: var(--color-accent);
    }
    .tsd-widget.no-caption {
        width: 40px;
    }
    .tsd-widget.no-caption:before {
        margin: 0;
    }

    .tsd-widget.options,
    .tsd-widget.menu {
        display: none;
    }
    input[type="checkbox"] + .tsd-widget:before {
        background-position: -120px 0;
    }
    input[type="checkbox"]:checked + .tsd-widget:before {
        background-position: -160px 0;
    }

    img {
        max-width: 100%;
    }

    .tsd-member-summary-name {
        display: inline-flex;
        align-items: center;
        padding: 0.25rem;
        text-decoration: none;
    }

    .tsd-anchor-icon {
        display: inline-flex;
        align-items: center;
        margin-left: 0.5rem;
        color: var(--color-text);
    }

    .tsd-anchor-icon svg {
        width: 1em;
        height: 1em;
        visibility: hidden;
    }

    .tsd-member-summary-name:hover > .tsd-anchor-icon svg,
    .tsd-anchor-link:hover > .tsd-anchor-icon svg {
        visibility: visible;
    }

    .deprecated {
        text-decoration: line-through !important;
    }

    .warning {
        padding: 1rem;
        color: var(--color-warning-text);
        background: var(--color-background-warning);
    }

    .tsd-kind-project {
        color: var(--color-ts-project);
    }
    .tsd-kind-module {
        color: var(--color-ts-module);
    }
    .tsd-kind-namespace {
        color: var(--color-ts-namespace);
    }
    .tsd-kind-enum {
        color: var(--color-ts-enum);
    }
    .tsd-kind-enum-member {
        color: var(--color-ts-enum-member);
    }
    .tsd-kind-variable {
        color: var(--color-ts-variable);
    }
    .tsd-kind-function {
        color: var(--color-ts-function);
    }
    .tsd-kind-class {
        color: var(--color-ts-class);
    }
    .tsd-kind-interface {
        color: var(--color-ts-interface);
    }
    .tsd-kind-constructor {
        color: var(--color-ts-constructor);
    }
    .tsd-kind-property {
        color: var(--color-ts-property);
    }
    .tsd-kind-method {
        color: var(--color-ts-method);
    }
    .tsd-kind-reference {
        color: var(--color-ts-reference);
    }
    .tsd-kind-call-signature {
        color: var(--color-ts-call-signature);
    }
    .tsd-kind-index-signature {
        color: var(--color-ts-index-signature);
    }
    .tsd-kind-constructor-signature {
        color: var(--color-ts-constructor-signature);
    }
    .tsd-kind-parameter {
        color: var(--color-ts-parameter);
    }
    .tsd-kind-type-parameter {
        color: var(--color-ts-type-parameter);
    }
    .tsd-kind-accessor {
        color: var(--color-ts-accessor);
    }
    .tsd-kind-get-signature {
        color: var(--color-ts-get-signature);
    }
    .tsd-kind-set-signature {
        color: var(--color-ts-set-signature);
    }
    .tsd-kind-type-alias {
        color: var(--color-ts-type-alias);
    }

    /* if we have a kind icon, don't color the text by kind */
    .tsd-kind-icon ~ span {
        color: var(--color-text);
    }

    * {
        scrollbar-width: thin;
        scrollbar-color: var(--color-accent) var(--color-icon-background);
    }

    *::-webkit-scrollbar {
        width: 0.75rem;
    }

    *::-webkit-scrollbar-track {
        background: var(--color-icon-background);
    }

    *::-webkit-scrollbar-thumb {
        background-color: var(--color-accent);
        border-radius: 999rem;
        border: 0.25rem solid var(--color-icon-background);
    }

    /* mobile */
    @media (max-width: 769px) {
        .tsd-widget.options,
        .tsd-widget.menu {
            display: inline-block;
        }

        .container-main {
            display: flex;
        }
        html .col-content {
            float: none;
            max-width: 100%;
            width: 100%;
        }
        html .col-sidebar {
            position: fixed !important;
            overflow-y: auto;
            -webkit-overflow-scrolling: touch;
            z-index: 1024;
            top: 0 !important;
            bottom: 0 !important;
            left: auto !important;
            right: 0 !important;
            padding: 1.5rem 1.5rem 0 0;
            width: 75vw;
            visibility: hidden;
            background-color: var(--color-background);
            transform: translate(100%, 0);
        }
        html .col-sidebar > *:last-child {
            padding-bottom: 20px;
        }
        html .overlay {
            content: "";
            display: block;
            position: fixed;
            z-index: 1023;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.75);
            visibility: hidden;
        }

        .to-has-menu .overlay {
            animation: fade-in 0.4s;
        }

        .to-has-menu .col-sidebar {
            animation: pop-in-from-right 0.4s;
        }

        .from-has-menu .overlay {
            animation: fade-out 0.4s;
        }

        .from-has-menu .col-sidebar {
            animation: pop-out-to-right 0.4s;
        }

        .has-menu body {
            overflow: hidden;
        }
        .has-menu .overlay {
            visibility: visible;
        }
        .has-menu .col-sidebar {
            visibility: visible;
            transform: translate(0, 0);
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
            max-height: 100vh;
            padding: 1rem 2rem;
        }
        .has-menu .tsd-navigation {
            max-height: 100%;
        }
        #tsd-toolbar-links {
            display: none;
        }
        .tsd-navigation .tsd-nav-link {
            display: flex;
        }
    }

    /* one sidebar */
    @media (min-width: 770px) {
        .container-main {
            display: grid;
            grid-template-columns: minmax(0, 1fr) minmax(0, 2fr);
            grid-template-areas: "sidebar content";
            margin: 2rem auto;
        }

        .col-sidebar {
            grid-area: sidebar;
        }
        .col-content {
            grid-area: content;
            padding: 0 1rem;
        }
    }
    @media (min-width: 770px) and (max-width: 1399px) {
        .col-sidebar {
            max-height: calc(100vh - 2rem - 42px);
            overflow: auto;
            position: sticky;
            top: 42px;
            padding-top: 1rem;
        }
        .site-menu {
            margin-top: 1rem;
        }
    }

    /* two sidebars */
    @media (min-width: 1200px) {
        .container-main {
            grid-template-columns: minmax(0, 1fr) minmax(0, 2.5fr) minmax(
                    0,
                    20rem
                );
            grid-template-areas: "sidebar content toc";
        }

        .col-sidebar {
            display: contents;
        }

        .page-menu {
            grid-area: toc;
            padding-left: 1rem;
        }
        .site-menu {
            grid-area: sidebar;
        }

        .site-menu {
            margin-top: 1rem;
        }

        .page-menu,
        .site-menu {
            max-height: calc(100vh - 2rem - 42px);
            overflow: auto;
            position: sticky;
            top: 42px;
        }
    }
}


================================================
File: docs/functions/createSolanaTools.html
================================================
<!DOCTYPE html><html class="default" lang="en" data-base=".."><head><meta charset="utf-8"/><meta http-equiv="x-ua-compatible" content="IE=edge"/><title>createSolanaTools | solana-agent-kit</title><meta name="description" content="Documentation for solana-agent-kit"/><meta name="viewport" content="width=device-width, initial-scale=1"/><link rel="stylesheet" href="../assets/style.css"/><link rel="stylesheet" href="../assets/highlight.css"/><script defer src="../assets/main.js"></script><script async src="../assets/icons.js" id="tsd-icons-script"></script><script async src="../assets/search.js" id="tsd-search-script"></script><script async src="../assets/navigation.js" id="tsd-nav-script"></script></head><body><script>document.documentElement.dataset.theme = localStorage.getItem("tsd-theme") || "os";document.body.style.display="none";setTimeout(() => app?app.showPage():document.body.style.removeProperty("display"),500)</script><header class="tsd-page-toolbar"><div class="tsd-toolbar-contents container"><div class="table-cell" id="tsd-search"><div class="field"><label for="tsd-search-field" class="tsd-widget tsd-toolbar-icon search no-caption"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-search"></use></svg></label><input type="text" id="tsd-search-field" aria-label="Search"/></div><div class="field"><div id="tsd-toolbar-links"></div></div><ul class="results"><li class="state loading">Preparing search index...</li><li class="state failure">The search index is not available</li></ul><a href="../index.html" class="title">solana-agent-kit</a></div><div class="table-cell" id="tsd-widgets"><a href="#" class="tsd-widget tsd-toolbar-icon menu no-caption" data-toggle="menu" aria-label="Menu"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-menu"></use></svg></a></div></div></header><div class="container container-main"><div class="col-content"><div class="tsd-page-title"><ul class="tsd-breadcrumb"><li><a href="../modules.html">solana-agent-kit</a></li><li><a href="createSolanaTools.html">createSolanaTools</a></li></ul><h1>Function createSolanaTools</h1></div><section class="tsd-panel"><ul class="tsd-signatures"><li class="tsd-signature tsd-anchor-link"><a id="createsolanatools" class="tsd-anchor"></a><span class="tsd-kind-call-signature">createSolanaTools</span><span class="tsd-signature-symbol">(</span><br/>    <span class="tsd-kind-parameter">solanaKit</span><span class="tsd-signature-symbol">:</span> <a href="../classes/SolanaAgentKit.html" class="tsd-signature-type tsd-kind-class">SolanaAgentKit</a><span class="tsd-signature-symbol">,</span><br/><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">:</span> (<br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaPerpOpenTradeTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaPerpCloseTradeTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaResolveAllDomainsTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaGetOwnedDomains</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaGetOwnedTldDomains</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaGetAllTlds</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaTokenDataByTickerTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaFlashOpenTrade</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaFlashCloseTrade</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaCreateGibworkTask</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaFetchPriceTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaTokenDataTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaTradeTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaStakeTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaLendAssetTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaLuloLendTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaLuloWithdrawTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaManifestCreateMarket</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaBatchOrderTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaCancelAllOrdersTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaLimitOrderTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaWithdrawAllTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaTPSCalculatorTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaRequestFundsTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaBalanceTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaBalanceOtherTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaCloseEmptyTokenAccounts</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaTransferTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaCreateImageTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaGetWalletAddressTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaGetInfoTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaDeployCollectionTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaMintNFTTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaDeployTokenTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaGetAssetTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaGetAssetsByAuthorityTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaGetAssetsByCreatorTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaOpenbookCreateMarket</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaOrcaCreateCLMM</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaOrcaCreateSingleSideLiquidityPool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaClosePosition</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaOrcaFetchPositions</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaOrcaOpenCenteredPosition</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaOrcaOpenSingleSidedPosition</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaPumpfunTokenLaunchTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaPythFetchPrice</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaRaydiumCreateAmmV4</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaRaydiumCreateClmm</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaRaydiumCreateCpmm</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaFetchTokenReportSummaryTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaFetchTokenDetailedReportTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaRockPaperScissorsTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaRestakeTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaListNFTForSaleTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaCancelNFTListingTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">Solana3LandCreateSingle</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">Solana3LandCreateCollection</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaTipLinkTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaRegisterDomainTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaResolveDomainTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaGetDomainTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaGetMainDomain</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaCompressedAirdropTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaApproveProposal2by2Multisig</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaCreate2by2Multisig</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaCreateProposal2by2Multisig</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaDepositTo2by2Multisig</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaExecuteProposal2by2Multisig</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaRejectProposal2by2Multisig</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaTransferFrom2by2Multisig</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaMeteoraCreateDlmmPool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaMeteoraCreateDynamicPool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaHeliusWebhookTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaDeleteHeliusWebhookTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaGetAllAssetsByOwner</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaGetHeliusWebhookTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaParseTransactionHeliusTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaSendTransactionWithPriorityFee</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaCreateDriftUserAccountTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaCreateDriftVaultTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaDepositIntoDriftVaultTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaDepositToDriftUserAccountTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaDeriveVaultAddressTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaCheckDriftAccountTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaDriftUserAccountInfoTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaRequestDriftWithdrawalTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaTradeDelegatedDriftVaultTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaTradeDriftPerpAccountTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaUpdateDriftVaultDelegateTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaUpdateDriftVaultTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaDriftVaultInfoTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaWithdrawFromDriftAccountTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaWithdrawFromDriftVaultTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaDriftPerpMarketFundingRateTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaDriftEntryQuoteOfPerpTradeTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaDriftLendAndBorrowAPYTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaStakeToDriftInsuranceFundTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaDriftSpotTokenSwapTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaUnstakeFromDriftInsuranceFundTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaRequestUnstakeFromDriftInsuranceFundTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaVoltrDepositStrategy</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaVoltrWithdrawStrategy</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaVoltrGetPositionValues</span><br/>)<span class="tsd-signature-symbol">[]</span><a href="#createsolanatools" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></li><li class="tsd-description"><div class="tsd-parameters"><h4 class="tsd-parameters-title">Parameters</h4><ul class="tsd-parameter-list"><li><span><span class="tsd-kind-parameter">solanaKit</span>: <a href="../classes/SolanaAgentKit.html" class="tsd-signature-type tsd-kind-class">SolanaAgentKit</a></span></li></ul></div><h4 class="tsd-returns-title">Returns (<br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaPerpOpenTradeTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaPerpCloseTradeTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaResolveAllDomainsTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaGetOwnedDomains</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaGetOwnedTldDomains</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaGetAllTlds</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaTokenDataByTickerTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaFlashOpenTrade</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaFlashCloseTrade</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaCreateGibworkTask</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaFetchPriceTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaTokenDataTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaTradeTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaStakeTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaLendAssetTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaLuloLendTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaLuloWithdrawTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaManifestCreateMarket</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaBatchOrderTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaCancelAllOrdersTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaLimitOrderTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaWithdrawAllTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaTPSCalculatorTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaRequestFundsTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaBalanceTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaBalanceOtherTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaCloseEmptyTokenAccounts</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaTransferTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaCreateImageTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaGetWalletAddressTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaGetInfoTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaDeployCollectionTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaMintNFTTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaDeployTokenTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaGetAssetTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaGetAssetsByAuthorityTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaGetAssetsByCreatorTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaOpenbookCreateMarket</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaOrcaCreateCLMM</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaOrcaCreateSingleSideLiquidityPool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaClosePosition</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaOrcaFetchPositions</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaOrcaOpenCenteredPosition</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaOrcaOpenSingleSidedPosition</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaPumpfunTokenLaunchTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaPythFetchPrice</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaRaydiumCreateAmmV4</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaRaydiumCreateClmm</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaRaydiumCreateCpmm</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaFetchTokenReportSummaryTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaFetchTokenDetailedReportTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaRockPaperScissorsTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaRestakeTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaListNFTForSaleTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaCancelNFTListingTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">Solana3LandCreateSingle</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">Solana3LandCreateCollection</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaTipLinkTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaRegisterDomainTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaResolveDomainTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaGetDomainTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaGetMainDomain</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaCompressedAirdropTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaApproveProposal2by2Multisig</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaCreate2by2Multisig</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaCreateProposal2by2Multisig</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaDepositTo2by2Multisig</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaExecuteProposal2by2Multisig</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaRejectProposal2by2Multisig</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaTransferFrom2by2Multisig</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaMeteoraCreateDlmmPool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaMeteoraCreateDynamicPool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaHeliusWebhookTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaDeleteHeliusWebhookTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaGetAllAssetsByOwner</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaGetHeliusWebhookTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaParseTransactionHeliusTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaSendTransactionWithPriorityFee</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaCreateDriftUserAccountTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaCreateDriftVaultTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaDepositIntoDriftVaultTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaDepositToDriftUserAccountTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaDeriveVaultAddressTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaCheckDriftAccountTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaDriftUserAccountInfoTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaRequestDriftWithdrawalTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaTradeDelegatedDriftVaultTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaTradeDriftPerpAccountTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaUpdateDriftVaultDelegateTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaUpdateDriftVaultTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaDriftVaultInfoTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaWithdrawFromDriftAccountTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaWithdrawFromDriftVaultTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaDriftPerpMarketFundingRateTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaDriftEntryQuoteOfPerpTradeTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaDriftLendAndBorrowAPYTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaStakeToDriftInsuranceFundTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaDriftSpotTokenSwapTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaUnstakeFromDriftInsuranceFundTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaRequestUnstakeFromDriftInsuranceFundTool</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaVoltrDepositStrategy</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaVoltrWithdrawStrategy</span><br/>    <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">SolanaVoltrGetPositionValues</span><br/>)<span class="tsd-signature-symbol">[]</span></h4><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/langchain/index.ts#L139">src/langchain/index.ts:139</a></li></ul></aside></li></ul></section></div><div class="col-sidebar"><div class="page-menu"><div class="tsd-navigation settings"><details class="tsd-accordion"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Settings</h3></summary><div class="tsd-accordion-details"><div class="tsd-filter-visibility"><span class="settings-label">Member Visibility</span><ul id="tsd-filter-options"><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-protected" name="protected"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Protected</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-inherited" name="inherited" checked/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Inherited</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-external" name="external"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>External</span></label></li></ul></div><div class="tsd-theme-toggle"><label class="settings-label" for="tsd-theme">Theme</label><select id="tsd-theme"><option value="os">OS</option><option value="light">Light</option><option value="dark">Dark</option></select></div></div></details></div></div><div class="site-menu"><nav class="tsd-navigation"><a href="../modules.html">solana-agent-kit</a><ul class="tsd-small-nested-navigation" id="tsd-nav-container"><li>Loading...</li></ul></nav></div></div></div><footer><p class="tsd-generator">Generated using <a href="https://typedoc.org/" target="_blank">TypeDoc</a></p></footer><div class="overlay"></div></body></html>


================================================
File: docs/functions/createVercelAITools.html
================================================
<!DOCTYPE html><html class="default" lang="en" data-base=".."><head><meta charset="utf-8"/><meta http-equiv="x-ua-compatible" content="IE=edge"/><title>createVercelAITools | solana-agent-kit</title><meta name="description" content="Documentation for solana-agent-kit"/><meta name="viewport" content="width=device-width, initial-scale=1"/><link rel="stylesheet" href="../assets/style.css"/><link rel="stylesheet" href="../assets/highlight.css"/><script defer src="../assets/main.js"></script><script async src="../assets/icons.js" id="tsd-icons-script"></script><script async src="../assets/search.js" id="tsd-search-script"></script><script async src="../assets/navigation.js" id="tsd-nav-script"></script></head><body><script>document.documentElement.dataset.theme = localStorage.getItem("tsd-theme") || "os";document.body.style.display="none";setTimeout(() => app?app.showPage():document.body.style.removeProperty("display"),500)</script><header class="tsd-page-toolbar"><div class="tsd-toolbar-contents container"><div class="table-cell" id="tsd-search"><div class="field"><label for="tsd-search-field" class="tsd-widget tsd-toolbar-icon search no-caption"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-search"></use></svg></label><input type="text" id="tsd-search-field" aria-label="Search"/></div><div class="field"><div id="tsd-toolbar-links"></div></div><ul class="results"><li class="state loading">Preparing search index...</li><li class="state failure">The search index is not available</li></ul><a href="../index.html" class="title">solana-agent-kit</a></div><div class="table-cell" id="tsd-widgets"><a href="#" class="tsd-widget tsd-toolbar-icon menu no-caption" data-toggle="menu" aria-label="Menu"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-menu"></use></svg></a></div></div></header><div class="container container-main"><div class="col-content"><div class="tsd-page-title"><ul class="tsd-breadcrumb"><li><a href="../modules.html">solana-agent-kit</a></li><li><a href="createVercelAITools.html">createVercelAITools</a></li></ul><h1>Function createVercelAITools</h1></div><section class="tsd-panel"><ul class="tsd-signatures"><li class="tsd-signature tsd-anchor-link"><a id="createvercelaitools" class="tsd-anchor"></a><span class="tsd-kind-call-signature">createVercelAITools</span><span class="tsd-signature-symbol">(</span><span class="tsd-kind-parameter">solanaAgentKit</span><span class="tsd-signature-symbol">:</span> <a href="../classes/SolanaAgentKit.html" class="tsd-signature-type tsd-kind-class">SolanaAgentKit</a><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Record</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">,</span> <span class="tsd-signature-type">CoreTool</span><span class="tsd-signature-symbol">&gt;</span><a href="#createvercelaitools" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></li><li class="tsd-description"><div class="tsd-parameters"><h4 class="tsd-parameters-title">Parameters</h4><ul class="tsd-parameter-list"><li><span><span class="tsd-kind-parameter">solanaAgentKit</span>: <a href="../classes/SolanaAgentKit.html" class="tsd-signature-type tsd-kind-class">SolanaAgentKit</a></span></li></ul></div><h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Record</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">,</span> <span class="tsd-signature-type">CoreTool</span><span class="tsd-signature-symbol">&gt;</span></h4><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/vercel-ai/index.ts#L6">src/vercel-ai/index.ts:6</a></li></ul></aside></li></ul></section></div><div class="col-sidebar"><div class="page-menu"><div class="tsd-navigation settings"><details class="tsd-accordion"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Settings</h3></summary><div class="tsd-accordion-details"><div class="tsd-filter-visibility"><span class="settings-label">Member Visibility</span><ul id="tsd-filter-options"><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-protected" name="protected"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Protected</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-inherited" name="inherited" checked/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Inherited</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-external" name="external"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>External</span></label></li></ul></div><div class="tsd-theme-toggle"><label class="settings-label" for="tsd-theme">Theme</label><select id="tsd-theme"><option value="os">OS</option><option value="light">Light</option><option value="dark">Dark</option></select></div></div></details></div></div><div class="site-menu"><nav class="tsd-navigation"><a href="../modules.html">solana-agent-kit</a><ul class="tsd-small-nested-navigation" id="tsd-nav-container"><li>Loading...</li></ul></nav></div></div></div><footer><p class="tsd-generator">Generated using <a href="https://typedoc.org/" target="_blank">TypeDoc</a></p></footer><div class="overlay"></div></body></html>


================================================
File: docs/functions/executeAction.html
================================================
<!DOCTYPE html><html class="default" lang="en" data-base=".."><head><meta charset="utf-8"/><meta http-equiv="x-ua-compatible" content="IE=edge"/><title>executeAction | solana-agent-kit</title><meta name="description" content="Documentation for solana-agent-kit"/><meta name="viewport" content="width=device-width, initial-scale=1"/><link rel="stylesheet" href="../assets/style.css"/><link rel="stylesheet" href="../assets/highlight.css"/><script defer src="../assets/main.js"></script><script async src="../assets/icons.js" id="tsd-icons-script"></script><script async src="../assets/search.js" id="tsd-search-script"></script><script async src="../assets/navigation.js" id="tsd-nav-script"></script></head><body><script>document.documentElement.dataset.theme = localStorage.getItem("tsd-theme") || "os";document.body.style.display="none";setTimeout(() => app?app.showPage():document.body.style.removeProperty("display"),500)</script><header class="tsd-page-toolbar"><div class="tsd-toolbar-contents container"><div class="table-cell" id="tsd-search"><div class="field"><label for="tsd-search-field" class="tsd-widget tsd-toolbar-icon search no-caption"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-search"></use></svg></label><input type="text" id="tsd-search-field" aria-label="Search"/></div><div class="field"><div id="tsd-toolbar-links"></div></div><ul class="results"><li class="state loading">Preparing search index...</li><li class="state failure">The search index is not available</li></ul><a href="../index.html" class="title">solana-agent-kit</a></div><div class="table-cell" id="tsd-widgets"><a href="#" class="tsd-widget tsd-toolbar-icon menu no-caption" data-toggle="menu" aria-label="Menu"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-menu"></use></svg></a></div></div></header><div class="container container-main"><div class="col-content"><div class="tsd-page-title"><ul class="tsd-breadcrumb"><li><a href="../modules.html">solana-agent-kit</a></li><li><a href="executeAction.html">executeAction</a></li></ul><h1>Function executeAction</h1></div><section class="tsd-panel"><ul class="tsd-signatures"><li class="tsd-signature tsd-anchor-link"><a id="executeaction" class="tsd-anchor"></a><span class="tsd-kind-call-signature">executeAction</span><span class="tsd-signature-symbol">(</span><br/>    <span class="tsd-kind-parameter">action</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">,</span><br/>    <span class="tsd-kind-parameter">agent</span><span class="tsd-signature-symbol">:</span> <a href="../classes/SolanaAgentKit.html" class="tsd-signature-type tsd-kind-class">SolanaAgentKit</a><span class="tsd-signature-symbol">,</span><br/>    <span class="tsd-kind-parameter">input</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Record</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">,</span> <span class="tsd-signature-type">any</span><span class="tsd-signature-symbol">&gt;</span><span class="tsd-signature-symbol">,</span><br/><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">Record</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">,</span> <span class="tsd-signature-type">any</span><span class="tsd-signature-symbol">&gt;</span><span class="tsd-signature-symbol">&gt;</span><a href="#executeaction" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></li><li class="tsd-description"><div class="tsd-comment tsd-typography"><p>Execute an action with the given input</p>
</div><div class="tsd-parameters"><h4 class="tsd-parameters-title">Parameters</h4><ul class="tsd-parameter-list"><li><span><span class="tsd-kind-parameter">action</span>: <span class="tsd-signature-type">Action</span></span></li><li><span><span class="tsd-kind-parameter">agent</span>: <a href="../classes/SolanaAgentKit.html" class="tsd-signature-type tsd-kind-class">SolanaAgentKit</a></span></li><li><span><span class="tsd-kind-parameter">input</span>: <span class="tsd-signature-type">Record</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">,</span> <span class="tsd-signature-type">any</span><span class="tsd-signature-symbol">&gt;</span></span></li></ul></div><h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">Record</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">,</span> <span class="tsd-signature-type">any</span><span class="tsd-signature-symbol">&gt;</span><span class="tsd-signature-symbol">&gt;</span></h4><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/utils/actionExecutor.ts#L20">src/utils/actionExecutor.ts:20</a></li></ul></aside></li></ul></section></div><div class="col-sidebar"><div class="page-menu"><div class="tsd-navigation settings"><details class="tsd-accordion"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Settings</h3></summary><div class="tsd-accordion-details"><div class="tsd-filter-visibility"><span class="settings-label">Member Visibility</span><ul id="tsd-filter-options"><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-protected" name="protected"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Protected</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-inherited" name="inherited" checked/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Inherited</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-external" name="external"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>External</span></label></li></ul></div><div class="tsd-theme-toggle"><label class="settings-label" for="tsd-theme">Theme</label><select id="tsd-theme"><option value="os">OS</option><option value="light">Light</option><option value="dark">Dark</option></select></div></div></details></div></div><div class="site-menu"><nav class="tsd-navigation"><a href="../modules.html">solana-agent-kit</a><ul class="tsd-small-nested-navigation" id="tsd-nav-container"><li>Loading...</li></ul></nav></div></div></div><footer><p class="tsd-generator">Generated using <a href="https://typedoc.org/" target="_blank">TypeDoc</a></p></footer><div class="overlay"></div></body></html>


================================================
File: docs/functions/findAction.html
================================================
<!DOCTYPE html><html class="default" lang="en" data-base=".."><head><meta charset="utf-8"/><meta http-equiv="x-ua-compatible" content="IE=edge"/><title>findAction | solana-agent-kit</title><meta name="description" content="Documentation for solana-agent-kit"/><meta name="viewport" content="width=device-width, initial-scale=1"/><link rel="stylesheet" href="../assets/style.css"/><link rel="stylesheet" href="../assets/highlight.css"/><script defer src="../assets/main.js"></script><script async src="../assets/icons.js" id="tsd-icons-script"></script><script async src="../assets/search.js" id="tsd-search-script"></script><script async src="../assets/navigation.js" id="tsd-nav-script"></script></head><body><script>document.documentElement.dataset.theme = localStorage.getItem("tsd-theme") || "os";document.body.style.display="none";setTimeout(() => app?app.showPage():document.body.style.removeProperty("display"),500)</script><header class="tsd-page-toolbar"><div class="tsd-toolbar-contents container"><div class="table-cell" id="tsd-search"><div class="field"><label for="tsd-search-field" class="tsd-widget tsd-toolbar-icon search no-caption"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-search"></use></svg></label><input type="text" id="tsd-search-field" aria-label="Search"/></div><div class="field"><div id="tsd-toolbar-links"></div></div><ul class="results"><li class="state loading">Preparing search index...</li><li class="state failure">The search index is not available</li></ul><a href="../index.html" class="title">solana-agent-kit</a></div><div class="table-cell" id="tsd-widgets"><a href="#" class="tsd-widget tsd-toolbar-icon menu no-caption" data-toggle="menu" aria-label="Menu"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-menu"></use></svg></a></div></div></header><div class="container container-main"><div class="col-content"><div class="tsd-page-title"><ul class="tsd-breadcrumb"><li><a href="../modules.html">solana-agent-kit</a></li><li><a href="findAction.html">findAction</a></li></ul><h1>Function findAction</h1></div><section class="tsd-panel"><ul class="tsd-signatures"><li class="tsd-signature tsd-anchor-link"><a id="findaction" class="tsd-anchor"></a><span class="tsd-kind-call-signature">findAction</span><span class="tsd-signature-symbol">(</span><span class="tsd-kind-parameter">query</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">undefined</span><a href="#findaction" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></li><li class="tsd-description"><div class="tsd-comment tsd-typography"><p>Find an action by its name or one of its similes</p>
</div><div class="tsd-parameters"><h4 class="tsd-parameters-title">Parameters</h4><ul class="tsd-parameter-list"><li><span><span class="tsd-kind-parameter">query</span>: <span class="tsd-signature-type">string</span></span></li></ul></div><h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Action</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">undefined</span></h4><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/utils/actionExecutor.ts#L8">src/utils/actionExecutor.ts:8</a></li></ul></aside></li></ul></section></div><div class="col-sidebar"><div class="page-menu"><div class="tsd-navigation settings"><details class="tsd-accordion"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Settings</h3></summary><div class="tsd-accordion-details"><div class="tsd-filter-visibility"><span class="settings-label">Member Visibility</span><ul id="tsd-filter-options"><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-protected" name="protected"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Protected</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-inherited" name="inherited" checked/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Inherited</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-external" name="external"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>External</span></label></li></ul></div><div class="tsd-theme-toggle"><label class="settings-label" for="tsd-theme">Theme</label><select id="tsd-theme"><option value="os">OS</option><option value="light">Light</option><option value="dark">Dark</option></select></div></div></details></div></div><div class="site-menu"><nav class="tsd-navigation"><a href="../modules.html">solana-agent-kit</a><ul class="tsd-small-nested-navigation" id="tsd-nav-container"><li>Loading...</li></ul></nav></div></div></div><footer><p class="tsd-generator">Generated using <a href="https://typedoc.org/" target="_blank">TypeDoc</a></p></footer><div class="overlay"></div></body></html>


================================================
File: docs/functions/getActionExamples.html
================================================
<!DOCTYPE html><html class="default" lang="en" data-base=".."><head><meta charset="utf-8"/><meta http-equiv="x-ua-compatible" content="IE=edge"/><title>getActionExamples | solana-agent-kit</title><meta name="description" content="Documentation for solana-agent-kit"/><meta name="viewport" content="width=device-width, initial-scale=1"/><link rel="stylesheet" href="../assets/style.css"/><link rel="stylesheet" href="../assets/highlight.css"/><script defer src="../assets/main.js"></script><script async src="../assets/icons.js" id="tsd-icons-script"></script><script async src="../assets/search.js" id="tsd-search-script"></script><script async src="../assets/navigation.js" id="tsd-nav-script"></script></head><body><script>document.documentElement.dataset.theme = localStorage.getItem("tsd-theme") || "os";document.body.style.display="none";setTimeout(() => app?app.showPage():document.body.style.removeProperty("display"),500)</script><header class="tsd-page-toolbar"><div class="tsd-toolbar-contents container"><div class="table-cell" id="tsd-search"><div class="field"><label for="tsd-search-field" class="tsd-widget tsd-toolbar-icon search no-caption"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-search"></use></svg></label><input type="text" id="tsd-search-field" aria-label="Search"/></div><div class="field"><div id="tsd-toolbar-links"></div></div><ul class="results"><li class="state loading">Preparing search index...</li><li class="state failure">The search index is not available</li></ul><a href="../index.html" class="title">solana-agent-kit</a></div><div class="table-cell" id="tsd-widgets"><a href="#" class="tsd-widget tsd-toolbar-icon menu no-caption" data-toggle="menu" aria-label="Menu"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-menu"></use></svg></a></div></div></header><div class="container container-main"><div class="col-content"><div class="tsd-page-title"><ul class="tsd-breadcrumb"><li><a href="../modules.html">solana-agent-kit</a></li><li><a href="getActionExamples.html">getActionExamples</a></li></ul><h1>Function getActionExamples</h1></div><section class="tsd-panel"><ul class="tsd-signatures"><li class="tsd-signature tsd-anchor-link"><a id="getactionexamples" class="tsd-anchor"></a><span class="tsd-kind-call-signature">getActionExamples</span><span class="tsd-signature-symbol">(</span><span class="tsd-kind-parameter">action</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><a href="#getactionexamples" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></li><li class="tsd-description"><div class="tsd-comment tsd-typography"><p>Get examples for an action</p>
</div><div class="tsd-parameters"><h4 class="tsd-parameters-title">Parameters</h4><ul class="tsd-parameter-list"><li><span><span class="tsd-kind-parameter">action</span>: <span class="tsd-signature-type">Action</span></span></li></ul></div><h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">string</span></h4><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/utils/actionExecutor.ts#L58">src/utils/actionExecutor.ts:58</a></li></ul></aside></li></ul></section></div><div class="col-sidebar"><div class="page-menu"><div class="tsd-navigation settings"><details class="tsd-accordion"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Settings</h3></summary><div class="tsd-accordion-details"><div class="tsd-filter-visibility"><span class="settings-label">Member Visibility</span><ul id="tsd-filter-options"><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-protected" name="protected"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Protected</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-inherited" name="inherited" checked/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Inherited</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-external" name="external"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>External</span></label></li></ul></div><div class="tsd-theme-toggle"><label class="settings-label" for="tsd-theme">Theme</label><select id="tsd-theme"><option value="os">OS</option><option value="light">Light</option><option value="dark">Dark</option></select></div></div></details></div></div><div class="site-menu"><nav class="tsd-navigation"><a href="../modules.html">solana-agent-kit</a><ul class="tsd-small-nested-navigation" id="tsd-nav-container"><li>Loading...</li></ul></nav></div></div></div><footer><p class="tsd-generator">Generated using <a href="https://typedoc.org/" target="_blank">TypeDoc</a></p></footer><div class="overlay"></div></body></html>


================================================
File: docs/interfaces/Action.html
================================================
<!DOCTYPE html><html class="default" lang="en" data-base=".."><head><meta charset="utf-8"/><meta http-equiv="x-ua-compatible" content="IE=edge"/><title>Action | solana-agent-kit</title><meta name="description" content="Documentation for solana-agent-kit"/><meta name="viewport" content="width=device-width, initial-scale=1"/><link rel="stylesheet" href="../assets/style.css"/><link rel="stylesheet" href="../assets/highlight.css"/><script defer src="../assets/main.js"></script><script async src="../assets/icons.js" id="tsd-icons-script"></script><script async src="../assets/search.js" id="tsd-search-script"></script><script async src="../assets/navigation.js" id="tsd-nav-script"></script></head><body><script>document.documentElement.dataset.theme = localStorage.getItem("tsd-theme") || "os";document.body.style.display="none";setTimeout(() => app?app.showPage():document.body.style.removeProperty("display"),500)</script><header class="tsd-page-toolbar"><div class="tsd-toolbar-contents container"><div class="table-cell" id="tsd-search"><div class="field"><label for="tsd-search-field" class="tsd-widget tsd-toolbar-icon search no-caption"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-search"></use></svg></label><input type="text" id="tsd-search-field" aria-label="Search"/></div><div class="field"><div id="tsd-toolbar-links"></div></div><ul class="results"><li class="state loading">Preparing search index...</li><li class="state failure">The search index is not available</li></ul><a href="../index.html" class="title">solana-agent-kit</a></div><div class="table-cell" id="tsd-widgets"><a href="#" class="tsd-widget tsd-toolbar-icon menu no-caption" data-toggle="menu" aria-label="Menu"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-menu"></use></svg></a></div></div></header><div class="container container-main"><div class="col-content"><div class="tsd-page-title"><ul class="tsd-breadcrumb"><li><a href="../modules.html">solana-agent-kit</a></li><li><a href="Action.html">Action</a></li></ul><h1>Interface Action</h1></div><section class="tsd-panel tsd-comment"><div class="tsd-comment tsd-typography"><p>Main Action interface inspired by ELIZA
This interface makes it easier to implement actions across different frameworks</p>
</div><div class="tsd-comment tsd-typography"></div></section><div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">Action</span> <span class="tsd-signature-symbol">{</span><br/>    <a class="tsd-kind-property" href="Action.html#description">description</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="Action.html#examples">examples</a><span class="tsd-signature-symbol">:</span> <a href="ActionExample.html" class="tsd-signature-type tsd-kind-interface">ActionExample</a><span class="tsd-signature-symbol">[]</span><span class="tsd-signature-symbol">[]</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="Action.html#handler">handler</a><span class="tsd-signature-symbol">:</span> <a href="../types/Handler.html" class="tsd-signature-type tsd-kind-type-alias">Handler</a><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="Action.html#name">name</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="Action.html#schema">schema</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">ZodType</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="Action.html#similes">similes</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">[]</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L130">src/types/index.ts:130</a></li></ul></aside><section class="tsd-panel-group tsd-index-group"><section class="tsd-panel tsd-index-panel"><details class="tsd-index-content tsd-accordion" open><summary class="tsd-accordion-summary tsd-index-summary"><h5 class="tsd-index-heading uppercase" role="button" aria-expanded="false" tabIndex="0"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-chevronSmall"></use></svg> Index</h5></summary><div class="tsd-accordion-details"><section class="tsd-index-section"><h3 class="tsd-index-heading">Properties</h3><div class="tsd-index-list"><a href="Action.html#description" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>description</span></a>
<a href="Action.html#examples" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>examples</span></a>
<a href="Action.html#handler" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>handler</span></a>
<a href="Action.html#name" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>name</span></a>
<a href="Action.html#schema" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>schema</span></a>
<a href="Action.html#similes" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>similes</span></a>
</div></section></div></details></section></section><details class="tsd-panel-group tsd-member-group tsd-accordion" open><summary class="tsd-accordion-summary" data-key="section-Properties"><h2><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg> Properties</h2></summary><section><section class="tsd-panel tsd-member"><a id="description" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>description</span><a href="#description" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">description</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>Detailed description of what the action does</p>
</div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L144">src/types/index.ts:144</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="examples" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>examples</span><a href="#examples" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">examples</span><span class="tsd-signature-symbol">:</span> <a href="ActionExample.html" class="tsd-signature-type tsd-kind-interface">ActionExample</a><span class="tsd-signature-symbol">[]</span><span class="tsd-signature-symbol">[]</span></div><div class="tsd-comment tsd-typography"><p>Array of example inputs and outputs for the action
Each inner array represents a group of related examples</p>
</div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L150">src/types/index.ts:150</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="handler" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>handler</span><a href="#handler" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">handler</span><span class="tsd-signature-symbol">:</span> <a href="../types/Handler.html" class="tsd-signature-type tsd-kind-type-alias">Handler</a></div><div class="tsd-comment tsd-typography"><p>Function that executes the action</p>
</div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L160">src/types/index.ts:160</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="name" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>name</span><a href="#name" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">name</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><div class="tsd-comment tsd-typography"><p>Unique name of the action</p>
</div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L134">src/types/index.ts:134</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="schema" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>schema</span><a href="#schema" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">schema</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">ZodType</span></div><div class="tsd-comment tsd-typography"><p>Zod schema for input validation</p>
</div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L155">src/types/index.ts:155</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="similes" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>similes</span><a href="#similes" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">similes</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">[]</span></div><div class="tsd-comment tsd-typography"><p>Alternative names/phrases that can trigger this action</p>
</div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L139">src/types/index.ts:139</a></li></ul></aside></section></section></details></div><div class="col-sidebar"><div class="page-menu"><div class="tsd-navigation settings"><details class="tsd-accordion"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Settings</h3></summary><div class="tsd-accordion-details"><div class="tsd-filter-visibility"><span class="settings-label">Member Visibility</span><ul id="tsd-filter-options"><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-protected" name="protected"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Protected</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-inherited" name="inherited" checked/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Inherited</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-external" name="external"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>External</span></label></li></ul></div><div class="tsd-theme-toggle"><label class="settings-label" for="tsd-theme">Theme</label><select id="tsd-theme"><option value="os">OS</option><option value="light">Light</option><option value="dark">Dark</option></select></div></div></details></div><details open class="tsd-accordion tsd-page-navigation"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>On This Page</h3></summary><div class="tsd-accordion-details"><details open class="tsd-accordion tsd-page-navigation-section"><summary class="tsd-accordion-summary" data-key="section-Properties"><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Properties</summary><div><a href="#description" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>description</span></a><a href="#examples" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>examples</span></a><a href="#handler" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>handler</span></a><a href="#name" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>name</span></a><a href="#schema" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>schema</span></a><a href="#similes" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>similes</span></a></div></details></div></details></div><div class="site-menu"><nav class="tsd-navigation"><a href="../modules.html">solana-agent-kit</a><ul class="tsd-small-nested-navigation" id="tsd-nav-container"><li>Loading...</li></ul></nav></div></div></div><footer><p class="tsd-generator">Generated using <a href="https://typedoc.org/" target="_blank">TypeDoc</a></p></footer><div class="overlay"></div></body></html>


================================================
File: docs/interfaces/ActionExample.html
================================================
<!DOCTYPE html><html class="default" lang="en" data-base=".."><head><meta charset="utf-8"/><meta http-equiv="x-ua-compatible" content="IE=edge"/><title>ActionExample | solana-agent-kit</title><meta name="description" content="Documentation for solana-agent-kit"/><meta name="viewport" content="width=device-width, initial-scale=1"/><link rel="stylesheet" href="../assets/style.css"/><link rel="stylesheet" href="../assets/highlight.css"/><script defer src="../assets/main.js"></script><script async src="../assets/icons.js" id="tsd-icons-script"></script><script async src="../assets/search.js" id="tsd-search-script"></script><script async src="../assets/navigation.js" id="tsd-nav-script"></script></head><body><script>document.documentElement.dataset.theme = localStorage.getItem("tsd-theme") || "os";document.body.style.display="none";setTimeout(() => app?app.showPage():document.body.style.removeProperty("display"),500)</script><header class="tsd-page-toolbar"><div class="tsd-toolbar-contents container"><div class="table-cell" id="tsd-search"><div class="field"><label for="tsd-search-field" class="tsd-widget tsd-toolbar-icon search no-caption"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-search"></use></svg></label><input type="text" id="tsd-search-field" aria-label="Search"/></div><div class="field"><div id="tsd-toolbar-links"></div></div><ul class="results"><li class="state loading">Preparing search index...</li><li class="state failure">The search index is not available</li></ul><a href="../index.html" class="title">solana-agent-kit</a></div><div class="table-cell" id="tsd-widgets"><a href="#" class="tsd-widget tsd-toolbar-icon menu no-caption" data-toggle="menu" aria-label="Menu"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-menu"></use></svg></a></div></div></header><div class="container container-main"><div class="col-content"><div class="tsd-page-title"><ul class="tsd-breadcrumb"><li><a href="../modules.html">solana-agent-kit</a></li><li><a href="ActionExample.html">ActionExample</a></li></ul><h1>Interface ActionExample</h1></div><section class="tsd-panel tsd-comment"><div class="tsd-comment tsd-typography"><p>Example of an action with input and output</p>
</div><div class="tsd-comment tsd-typography"></div></section><div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">ActionExample</span> <span class="tsd-signature-symbol">{</span><br/>    <a class="tsd-kind-property" href="ActionExample.html#explanation">explanation</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="ActionExample.html#input">input</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Record</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">,</span> <span class="tsd-signature-type">any</span><span class="tsd-signature-symbol">&gt;</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="ActionExample.html#output">output</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Record</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">,</span> <span class="tsd-signature-type">any</span><span class="tsd-signature-symbol">&gt;</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L112">src/types/index.ts:112</a></li></ul></aside><section class="tsd-panel-group tsd-index-group"><section class="tsd-panel tsd-index-panel"><details class="tsd-index-content tsd-accordion" open><summary class="tsd-accordion-summary tsd-index-summary"><h5 class="tsd-index-heading uppercase" role="button" aria-expanded="false" tabIndex="0"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-chevronSmall"></use></svg> Index</h5></summary><div class="tsd-accordion-details"><section class="tsd-index-section"><h3 class="tsd-index-heading">Properties</h3><div class="tsd-index-list"><a href="ActionExample.html#explanation" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>explanation</span></a>
<a href="ActionExample.html#input" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>input</span></a>
<a href="ActionExample.html#output" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>output</span></a>
</div></section></div></details></section></section><details class="tsd-panel-group tsd-member-group tsd-accordion" open><summary class="tsd-accordion-summary" data-key="section-Properties"><h2><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg> Properties</h2></summary><section><section class="tsd-panel tsd-member"><a id="explanation" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>explanation</span><a href="#explanation" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">explanation</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L115">src/types/index.ts:115</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="input" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>input</span><a href="#input" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">input</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Record</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">,</span> <span class="tsd-signature-type">any</span><span class="tsd-signature-symbol">&gt;</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L113">src/types/index.ts:113</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="output" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>output</span><a href="#output" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">output</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Record</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">,</span> <span class="tsd-signature-type">any</span><span class="tsd-signature-symbol">&gt;</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L114">src/types/index.ts:114</a></li></ul></aside></section></section></details></div><div class="col-sidebar"><div class="page-menu"><div class="tsd-navigation settings"><details class="tsd-accordion"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Settings</h3></summary><div class="tsd-accordion-details"><div class="tsd-filter-visibility"><span class="settings-label">Member Visibility</span><ul id="tsd-filter-options"><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-protected" name="protected"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Protected</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-inherited" name="inherited" checked/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Inherited</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-external" name="external"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>External</span></label></li></ul></div><div class="tsd-theme-toggle"><label class="settings-label" for="tsd-theme">Theme</label><select id="tsd-theme"><option value="os">OS</option><option value="light">Light</option><option value="dark">Dark</option></select></div></div></details></div><details open class="tsd-accordion tsd-page-navigation"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>On This Page</h3></summary><div class="tsd-accordion-details"><details open class="tsd-accordion tsd-page-navigation-section"><summary class="tsd-accordion-summary" data-key="section-Properties"><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Properties</summary><div><a href="#explanation" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>explanation</span></a><a href="#input" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>input</span></a><a href="#output" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>output</span></a></div></details></div></details></div><div class="site-menu"><nav class="tsd-navigation"><a href="../modules.html">solana-agent-kit</a><ul class="tsd-small-nested-navigation" id="tsd-nav-container"><li>Loading...</li></ul></nav></div></div></div><footer><p class="tsd-generator">Generated using <a href="https://typedoc.org/" target="_blank">TypeDoc</a></p></footer><div class="overlay"></div></body></html>


================================================
File: docs/interfaces/BatchOrderPattern.html
================================================
<!DOCTYPE html><html class="default" lang="en" data-base=".."><head><meta charset="utf-8"/><meta http-equiv="x-ua-compatible" content="IE=edge"/><title>BatchOrderPattern | solana-agent-kit</title><meta name="description" content="Documentation for solana-agent-kit"/><meta name="viewport" content="width=device-width, initial-scale=1"/><link rel="stylesheet" href="../assets/style.css"/><link rel="stylesheet" href="../assets/highlight.css"/><script defer src="../assets/main.js"></script><script async src="../assets/icons.js" id="tsd-icons-script"></script><script async src="../assets/search.js" id="tsd-search-script"></script><script async src="../assets/navigation.js" id="tsd-nav-script"></script></head><body><script>document.documentElement.dataset.theme = localStorage.getItem("tsd-theme") || "os";document.body.style.display="none";setTimeout(() => app?app.showPage():document.body.style.removeProperty("display"),500)</script><header class="tsd-page-toolbar"><div class="tsd-toolbar-contents container"><div class="table-cell" id="tsd-search"><div class="field"><label for="tsd-search-field" class="tsd-widget tsd-toolbar-icon search no-caption"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-search"></use></svg></label><input type="text" id="tsd-search-field" aria-label="Search"/></div><div class="field"><div id="tsd-toolbar-links"></div></div><ul class="results"><li class="state loading">Preparing search index...</li><li class="state failure">The search index is not available</li></ul><a href="../index.html" class="title">solana-agent-kit</a></div><div class="table-cell" id="tsd-widgets"><a href="#" class="tsd-widget tsd-toolbar-icon menu no-caption" data-toggle="menu" aria-label="Menu"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-menu"></use></svg></a></div></div></header><div class="container container-main"><div class="col-content"><div class="tsd-page-title"><ul class="tsd-breadcrumb"><li><a href="../modules.html">solana-agent-kit</a></li><li><a href="BatchOrderPattern.html">BatchOrderPattern</a></li></ul><h1>Interface BatchOrderPattern</h1></div><div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">BatchOrderPattern</span> <span class="tsd-signature-symbol">{</span><br/>    <a class="tsd-kind-property" href="BatchOrderPattern.html#individualquantity">individualQuantity</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="BatchOrderPattern.html#numberoforders">numberOfOrders</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="BatchOrderPattern.html#pricerange">priceRange</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">{</span> <span class="tsd-kind-property">max</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">min</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="BatchOrderPattern.html#side">side</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="BatchOrderPattern.html#spacing">spacing</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">{</span> <span class="tsd-kind-property">type</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;percentage&quot;</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;fixed&quot;</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">value</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="BatchOrderPattern.html#totalquantity">totalQuantity</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L218">src/types/index.ts:218</a></li></ul></aside><section class="tsd-panel-group tsd-index-group"><section class="tsd-panel tsd-index-panel"><details class="tsd-index-content tsd-accordion" open><summary class="tsd-accordion-summary tsd-index-summary"><h5 class="tsd-index-heading uppercase" role="button" aria-expanded="false" tabIndex="0"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-chevronSmall"></use></svg> Index</h5></summary><div class="tsd-accordion-details"><section class="tsd-index-section"><h3 class="tsd-index-heading">Properties</h3><div class="tsd-index-list"><a href="BatchOrderPattern.html#individualquantity" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>individual<wbr/>Quantity?</span></a>
<a href="BatchOrderPattern.html#numberoforders" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>number<wbr/>Of<wbr/>Orders?</span></a>
<a href="BatchOrderPattern.html#pricerange" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>price<wbr/>Range?</span></a>
<a href="BatchOrderPattern.html#side" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>side</span></a>
<a href="BatchOrderPattern.html#spacing" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>spacing?</span></a>
<a href="BatchOrderPattern.html#totalquantity" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>total<wbr/>Quantity?</span></a>
</div></section></div></details></section></section><details class="tsd-panel-group tsd-member-group tsd-accordion" open><summary class="tsd-accordion-summary" data-key="section-Properties"><h2><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg> Properties</h2></summary><section><section class="tsd-panel tsd-member"><a id="individualquantity" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><code class="tsd-tag">Optional</code><span>individual<wbr/>Quantity</span><a href="#individualquantity" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">individualQuantity</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L230">src/types/index.ts:230</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="numberoforders" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><code class="tsd-tag">Optional</code><span>number<wbr/>Of<wbr/>Orders</span><a href="#numberoforders" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">numberOfOrders</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L229">src/types/index.ts:229</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="pricerange" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><code class="tsd-tag">Optional</code><span>price<wbr/>Range</span><a href="#pricerange" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">priceRange</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">{</span> <span class="tsd-kind-property">max</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">min</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span> <span class="tsd-signature-symbol">}</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L221">src/types/index.ts:221</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="side" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>side</span><a href="#side" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">side</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L219">src/types/index.ts:219</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="spacing" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><code class="tsd-tag">Optional</code><span>spacing</span><a href="#spacing" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">spacing</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-symbol">{</span> <span class="tsd-kind-property">type</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;percentage&quot;</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;fixed&quot;</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">value</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span> <span class="tsd-signature-symbol">}</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L225">src/types/index.ts:225</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="totalquantity" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><code class="tsd-tag">Optional</code><span>total<wbr/>Quantity</span><a href="#totalquantity" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">totalQuantity</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L220">src/types/index.ts:220</a></li></ul></aside></section></section></details></div><div class="col-sidebar"><div class="page-menu"><div class="tsd-navigation settings"><details class="tsd-accordion"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Settings</h3></summary><div class="tsd-accordion-details"><div class="tsd-filter-visibility"><span class="settings-label">Member Visibility</span><ul id="tsd-filter-options"><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-protected" name="protected"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Protected</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-inherited" name="inherited" checked/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Inherited</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-external" name="external"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>External</span></label></li></ul></div><div class="tsd-theme-toggle"><label class="settings-label" for="tsd-theme">Theme</label><select id="tsd-theme"><option value="os">OS</option><option value="light">Light</option><option value="dark">Dark</option></select></div></div></details></div><details open class="tsd-accordion tsd-page-navigation"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>On This Page</h3></summary><div class="tsd-accordion-details"><details open class="tsd-accordion tsd-page-navigation-section"><summary class="tsd-accordion-summary" data-key="section-Properties"><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Properties</summary><div><a href="#individualquantity" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>individual<wbr/>Quantity</span></a><a href="#numberoforders" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>number<wbr/>Of<wbr/>Orders</span></a><a href="#pricerange" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>price<wbr/>Range</span></a><a href="#side" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>side</span></a><a href="#spacing" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>spacing</span></a><a href="#totalquantity" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>total<wbr/>Quantity</span></a></div></details></div></details></div><div class="site-menu"><nav class="tsd-navigation"><a href="../modules.html">solana-agent-kit</a><ul class="tsd-small-nested-navigation" id="tsd-nav-container"><li>Loading...</li></ul></nav></div></div></div><footer><p class="tsd-generator">Generated using <a href="https://typedoc.org/" target="_blank">TypeDoc</a></p></footer><div class="overlay"></div></body></html>


================================================
File: docs/interfaces/CollectionDeployment.html
================================================
<!DOCTYPE html><html class="default" lang="en" data-base=".."><head><meta charset="utf-8"/><meta http-equiv="x-ua-compatible" content="IE=edge"/><title>CollectionDeployment | solana-agent-kit</title><meta name="description" content="Documentation for solana-agent-kit"/><meta name="viewport" content="width=device-width, initial-scale=1"/><link rel="stylesheet" href="../assets/style.css"/><link rel="stylesheet" href="../assets/highlight.css"/><script defer src="../assets/main.js"></script><script async src="../assets/icons.js" id="tsd-icons-script"></script><script async src="../assets/search.js" id="tsd-search-script"></script><script async src="../assets/navigation.js" id="tsd-nav-script"></script></head><body><script>document.documentElement.dataset.theme = localStorage.getItem("tsd-theme") || "os";document.body.style.display="none";setTimeout(() => app?app.showPage():document.body.style.removeProperty("display"),500)</script><header class="tsd-page-toolbar"><div class="tsd-toolbar-contents container"><div class="table-cell" id="tsd-search"><div class="field"><label for="tsd-search-field" class="tsd-widget tsd-toolbar-icon search no-caption"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-search"></use></svg></label><input type="text" id="tsd-search-field" aria-label="Search"/></div><div class="field"><div id="tsd-toolbar-links"></div></div><ul class="results"><li class="state loading">Preparing search index...</li><li class="state failure">The search index is not available</li></ul><a href="../index.html" class="title">solana-agent-kit</a></div><div class="table-cell" id="tsd-widgets"><a href="#" class="tsd-widget tsd-toolbar-icon menu no-caption" data-toggle="menu" aria-label="Menu"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-menu"></use></svg></a></div></div></header><div class="container container-main"><div class="col-content"><div class="tsd-page-title"><ul class="tsd-breadcrumb"><li><a href="../modules.html">solana-agent-kit</a></li><li><a href="CollectionDeployment.html">CollectionDeployment</a></li></ul><h1>Interface CollectionDeployment</h1></div><div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">CollectionDeployment</span> <span class="tsd-signature-symbol">{</span><br/>    <a class="tsd-kind-property" href="CollectionDeployment.html#collectionaddress">collectionAddress</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">PublicKey</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="CollectionDeployment.html#signature">signature</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Uint8Array</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L29">src/types/index.ts:29</a></li></ul></aside><section class="tsd-panel-group tsd-index-group"><section class="tsd-panel tsd-index-panel"><details class="tsd-index-content tsd-accordion" open><summary class="tsd-accordion-summary tsd-index-summary"><h5 class="tsd-index-heading uppercase" role="button" aria-expanded="false" tabIndex="0"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-chevronSmall"></use></svg> Index</h5></summary><div class="tsd-accordion-details"><section class="tsd-index-section"><h3 class="tsd-index-heading">Properties</h3><div class="tsd-index-list"><a href="CollectionDeployment.html#collectionaddress" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>collection<wbr/>Address</span></a>
<a href="CollectionDeployment.html#signature" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>signature</span></a>
</div></section></div></details></section></section><details class="tsd-panel-group tsd-member-group tsd-accordion" open><summary class="tsd-accordion-summary" data-key="section-Properties"><h2><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg> Properties</h2></summary><section><section class="tsd-panel tsd-member"><a id="collectionaddress" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>collection<wbr/>Address</span><a href="#collectionaddress" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">collectionAddress</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">PublicKey</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L30">src/types/index.ts:30</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="signature" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>signature</span><a href="#signature" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">signature</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Uint8Array</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L31">src/types/index.ts:31</a></li></ul></aside></section></section></details></div><div class="col-sidebar"><div class="page-menu"><div class="tsd-navigation settings"><details class="tsd-accordion"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Settings</h3></summary><div class="tsd-accordion-details"><div class="tsd-filter-visibility"><span class="settings-label">Member Visibility</span><ul id="tsd-filter-options"><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-protected" name="protected"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Protected</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-inherited" name="inherited" checked/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Inherited</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-external" name="external"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>External</span></label></li></ul></div><div class="tsd-theme-toggle"><label class="settings-label" for="tsd-theme">Theme</label><select id="tsd-theme"><option value="os">OS</option><option value="light">Light</option><option value="dark">Dark</option></select></div></div></details></div><details open class="tsd-accordion tsd-page-navigation"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>On This Page</h3></summary><div class="tsd-accordion-details"><details open class="tsd-accordion tsd-page-navigation-section"><summary class="tsd-accordion-summary" data-key="section-Properties"><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Properties</summary><div><a href="#collectionaddress" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>collection<wbr/>Address</span></a><a href="#signature" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>signature</span></a></div></details></div></details></div><div class="site-menu"><nav class="tsd-navigation"><a href="../modules.html">solana-agent-kit</a><ul class="tsd-small-nested-navigation" id="tsd-nav-container"><li>Loading...</li></ul></nav></div></div></div><footer><p class="tsd-generator">Generated using <a href="https://typedoc.org/" target="_blank">TypeDoc</a></p></footer><div class="overlay"></div></body></html>


================================================
File: docs/interfaces/CollectionOptions.html
================================================
<!DOCTYPE html><html class="default" lang="en" data-base=".."><head><meta charset="utf-8"/><meta http-equiv="x-ua-compatible" content="IE=edge"/><title>CollectionOptions | solana-agent-kit</title><meta name="description" content="Documentation for solana-agent-kit"/><meta name="viewport" content="width=device-width, initial-scale=1"/><link rel="stylesheet" href="../assets/style.css"/><link rel="stylesheet" href="../assets/highlight.css"/><script defer src="../assets/main.js"></script><script async src="../assets/icons.js" id="tsd-icons-script"></script><script async src="../assets/search.js" id="tsd-search-script"></script><script async src="../assets/navigation.js" id="tsd-nav-script"></script></head><body><script>document.documentElement.dataset.theme = localStorage.getItem("tsd-theme") || "os";document.body.style.display="none";setTimeout(() => app?app.showPage():document.body.style.removeProperty("display"),500)</script><header class="tsd-page-toolbar"><div class="tsd-toolbar-contents container"><div class="table-cell" id="tsd-search"><div class="field"><label for="tsd-search-field" class="tsd-widget tsd-toolbar-icon search no-caption"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-search"></use></svg></label><input type="text" id="tsd-search-field" aria-label="Search"/></div><div class="field"><div id="tsd-toolbar-links"></div></div><ul class="results"><li class="state loading">Preparing search index...</li><li class="state failure">The search index is not available</li></ul><a href="../index.html" class="title">solana-agent-kit</a></div><div class="table-cell" id="tsd-widgets"><a href="#" class="tsd-widget tsd-toolbar-icon menu no-caption" data-toggle="menu" aria-label="Menu"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-menu"></use></svg></a></div></div></header><div class="container container-main"><div class="col-content"><div class="tsd-page-title"><ul class="tsd-breadcrumb"><li><a href="../modules.html">solana-agent-kit</a></li><li><a href="CollectionOptions.html">CollectionOptions</a></li></ul><h1>Interface CollectionOptions</h1></div><div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">CollectionOptions</span> <span class="tsd-signature-symbol">{</span><br/>    <a class="tsd-kind-property" href="CollectionOptions.html#creators">creators</a><span class="tsd-signature-symbol">?:</span> <a href="Creator.html" class="tsd-signature-type tsd-kind-interface">Creator</a><span class="tsd-signature-symbol">[]</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="CollectionOptions.html#name">name</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="CollectionOptions.html#royaltybasispoints">royaltyBasisPoints</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="CollectionOptions.html#uri">uri</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L21">src/types/index.ts:21</a></li></ul></aside><section class="tsd-panel-group tsd-index-group"><section class="tsd-panel tsd-index-panel"><details class="tsd-index-content tsd-accordion" open><summary class="tsd-accordion-summary tsd-index-summary"><h5 class="tsd-index-heading uppercase" role="button" aria-expanded="false" tabIndex="0"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-chevronSmall"></use></svg> Index</h5></summary><div class="tsd-accordion-details"><section class="tsd-index-section"><h3 class="tsd-index-heading">Properties</h3><div class="tsd-index-list"><a href="CollectionOptions.html#creators" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>creators?</span></a>
<a href="CollectionOptions.html#name" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>name</span></a>
<a href="CollectionOptions.html#royaltybasispoints" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>royalty<wbr/>Basis<wbr/>Points?</span></a>
<a href="CollectionOptions.html#uri" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>uri</span></a>
</div></section></div></details></section></section><details class="tsd-panel-group tsd-member-group tsd-accordion" open><summary class="tsd-accordion-summary" data-key="section-Properties"><h2><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg> Properties</h2></summary><section><section class="tsd-panel tsd-member"><a id="creators" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><code class="tsd-tag">Optional</code><span>creators</span><a href="#creators" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">creators</span><span class="tsd-signature-symbol">?:</span> <a href="Creator.html" class="tsd-signature-type tsd-kind-interface">Creator</a><span class="tsd-signature-symbol">[]</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L25">src/types/index.ts:25</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="name" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>name</span><a href="#name" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">name</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L22">src/types/index.ts:22</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="royaltybasispoints" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><code class="tsd-tag">Optional</code><span>royalty<wbr/>Basis<wbr/>Points</span><a href="#royaltybasispoints" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">royaltyBasisPoints</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L24">src/types/index.ts:24</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="uri" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>uri</span><a href="#uri" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">uri</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L23">src/types/index.ts:23</a></li></ul></aside></section></section></details></div><div class="col-sidebar"><div class="page-menu"><div class="tsd-navigation settings"><details class="tsd-accordion"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Settings</h3></summary><div class="tsd-accordion-details"><div class="tsd-filter-visibility"><span class="settings-label">Member Visibility</span><ul id="tsd-filter-options"><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-protected" name="protected"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Protected</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-inherited" name="inherited" checked/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Inherited</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-external" name="external"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>External</span></label></li></ul></div><div class="tsd-theme-toggle"><label class="settings-label" for="tsd-theme">Theme</label><select id="tsd-theme"><option value="os">OS</option><option value="light">Light</option><option value="dark">Dark</option></select></div></div></details></div><details open class="tsd-accordion tsd-page-navigation"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>On This Page</h3></summary><div class="tsd-accordion-details"><details open class="tsd-accordion tsd-page-navigation-section"><summary class="tsd-accordion-summary" data-key="section-Properties"><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Properties</summary><div><a href="#creators" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>creators</span></a><a href="#name" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>name</span></a><a href="#royaltybasispoints" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>royalty<wbr/>Basis<wbr/>Points</span></a><a href="#uri" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>uri</span></a></div></details></div></details></div><div class="site-menu"><nav class="tsd-navigation"><a href="../modules.html">solana-agent-kit</a><ul class="tsd-small-nested-navigation" id="tsd-nav-container"><li>Loading...</li></ul></nav></div></div></div><footer><p class="tsd-generator">Generated using <a href="https://typedoc.org/" target="_blank">TypeDoc</a></p></footer><div class="overlay"></div></body></html>


================================================
File: docs/interfaces/Config.html
================================================
<!DOCTYPE html><html class="default" lang="en" data-base=".."><head><meta charset="utf-8"/><meta http-equiv="x-ua-compatible" content="IE=edge"/><title>Config | solana-agent-kit</title><meta name="description" content="Documentation for solana-agent-kit"/><meta name="viewport" content="width=device-width, initial-scale=1"/><link rel="stylesheet" href="../assets/style.css"/><link rel="stylesheet" href="../assets/highlight.css"/><script defer src="../assets/main.js"></script><script async src="../assets/icons.js" id="tsd-icons-script"></script><script async src="../assets/search.js" id="tsd-search-script"></script><script async src="../assets/navigation.js" id="tsd-nav-script"></script></head><body><script>document.documentElement.dataset.theme = localStorage.getItem("tsd-theme") || "os";document.body.style.display="none";setTimeout(() => app?app.showPage():document.body.style.removeProperty("display"),500)</script><header class="tsd-page-toolbar"><div class="tsd-toolbar-contents container"><div class="table-cell" id="tsd-search"><div class="field"><label for="tsd-search-field" class="tsd-widget tsd-toolbar-icon search no-caption"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-search"></use></svg></label><input type="text" id="tsd-search-field" aria-label="Search"/></div><div class="field"><div id="tsd-toolbar-links"></div></div><ul class="results"><li class="state loading">Preparing search index...</li><li class="state failure">The search index is not available</li></ul><a href="../index.html" class="title">solana-agent-kit</a></div><div class="table-cell" id="tsd-widgets"><a href="#" class="tsd-widget tsd-toolbar-icon menu no-caption" data-toggle="menu" aria-label="Menu"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-menu"></use></svg></a></div></div></header><div class="container container-main"><div class="col-content"><div class="tsd-page-title"><ul class="tsd-breadcrumb"><li><a href="../modules.html">solana-agent-kit</a></li><li><a href="Config.html">Config</a></li></ul><h1>Interface Config</h1></div><div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">Config</span> <span class="tsd-signature-symbol">{</span><br/>    <a class="tsd-kind-property" href="Config.html#flash_privilege">FLASH_PRIVILEGE</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="Config.html#flexlend_api_key">FLEXLEND_API_KEY</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="Config.html#helius_api_key">HELIUS_API_KEY</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="Config.html#jupiter_fee_bps">JUPITER_FEE_BPS</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="Config.html#jupiter_referral_account">JUPITER_REFERRAL_ACCOUNT</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="Config.html#openai_api_key">OPENAI_API_KEY</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="Config.html#perplexity_api_key">PERPLEXITY_API_KEY</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="Config.html#priority_level">PRIORITY_LEVEL</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L5">src/types/index.ts:5</a></li></ul></aside><section class="tsd-panel-group tsd-index-group"><section class="tsd-panel tsd-index-panel"><details class="tsd-index-content tsd-accordion" open><summary class="tsd-accordion-summary tsd-index-summary"><h5 class="tsd-index-heading uppercase" role="button" aria-expanded="false" tabIndex="0"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-chevronSmall"></use></svg> Index</h5></summary><div class="tsd-accordion-details"><section class="tsd-index-section"><h3 class="tsd-index-heading">Properties</h3><div class="tsd-index-list"><a href="Config.html#flash_privilege" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>FLASH_<wbr/>PRIVILEGE?</span></a>
<a href="Config.html#flexlend_api_key" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>FLEXLEND_<wbr/>API_<wbr/>KEY?</span></a>
<a href="Config.html#helius_api_key" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>HELIUS_<wbr/>API_<wbr/>KEY?</span></a>
<a href="Config.html#jupiter_fee_bps" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>JUPITER_<wbr/>FEE_<wbr/>BPS?</span></a>
<a href="Config.html#jupiter_referral_account" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>JUPITER_<wbr/>REFERRAL_<wbr/>ACCOUNT?</span></a>
<a href="Config.html#openai_api_key" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>OPENAI_<wbr/>API_<wbr/>KEY?</span></a>
<a href="Config.html#perplexity_api_key" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>PERPLEXITY_<wbr/>API_<wbr/>KEY?</span></a>
<a href="Config.html#priority_level" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>PRIORITY_<wbr/>LEVEL?</span></a>
</div></section></div></details></section></section><details class="tsd-panel-group tsd-member-group tsd-accordion" open><summary class="tsd-accordion-summary" data-key="section-Properties"><h2><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg> Properties</h2></summary><section><section class="tsd-panel tsd-member"><a id="flash_privilege" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><code class="tsd-tag">Optional</code><span>FLASH_<wbr/>PRIVILEGE</span><a href="#flash_privilege" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">FLASH_PRIVILEGE</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L10">src/types/index.ts:10</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="flexlend_api_key" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><code class="tsd-tag">Optional</code><span>FLEXLEND_<wbr/>API_<wbr/>KEY</span><a href="#flexlend_api_key" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">FLEXLEND_API_KEY</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L11">src/types/index.ts:11</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="helius_api_key" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><code class="tsd-tag">Optional</code><span>HELIUS_<wbr/>API_<wbr/>KEY</span><a href="#helius_api_key" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">HELIUS_API_KEY</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L12">src/types/index.ts:12</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="jupiter_fee_bps" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><code class="tsd-tag">Optional</code><span>JUPITER_<wbr/>FEE_<wbr/>BPS</span><a href="#jupiter_fee_bps" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">JUPITER_FEE_BPS</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L9">src/types/index.ts:9</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="jupiter_referral_account" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><code class="tsd-tag">Optional</code><span>JUPITER_<wbr/>REFERRAL_<wbr/>ACCOUNT</span><a href="#jupiter_referral_account" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">JUPITER_REFERRAL_ACCOUNT</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L8">src/types/index.ts:8</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="openai_api_key" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><code class="tsd-tag">Optional</code><span>OPENAI_<wbr/>API_<wbr/>KEY</span><a href="#openai_api_key" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">OPENAI_API_KEY</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L6">src/types/index.ts:6</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="perplexity_api_key" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><code class="tsd-tag">Optional</code><span>PERPLEXITY_<wbr/>API_<wbr/>KEY</span><a href="#perplexity_api_key" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">PERPLEXITY_API_KEY</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L7">src/types/index.ts:7</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="priority_level" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><code class="tsd-tag">Optional</code><span>PRIORITY_<wbr/>LEVEL</span><a href="#priority_level" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">PRIORITY_LEVEL</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L13">src/types/index.ts:13</a></li></ul></aside></section></section></details></div><div class="col-sidebar"><div class="page-menu"><div class="tsd-navigation settings"><details class="tsd-accordion"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Settings</h3></summary><div class="tsd-accordion-details"><div class="tsd-filter-visibility"><span class="settings-label">Member Visibility</span><ul id="tsd-filter-options"><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-protected" name="protected"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Protected</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-inherited" name="inherited" checked/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Inherited</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-external" name="external"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>External</span></label></li></ul></div><div class="tsd-theme-toggle"><label class="settings-label" for="tsd-theme">Theme</label><select id="tsd-theme"><option value="os">OS</option><option value="light">Light</option><option value="dark">Dark</option></select></div></div></details></div><details open class="tsd-accordion tsd-page-navigation"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>On This Page</h3></summary><div class="tsd-accordion-details"><details open class="tsd-accordion tsd-page-navigation-section"><summary class="tsd-accordion-summary" data-key="section-Properties"><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Properties</summary><div><a href="#flash_privilege" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>FLASH_<wbr/>PRIVILEGE</span></a><a href="#flexlend_api_key" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>FLEXLEND_<wbr/>API_<wbr/>KEY</span></a><a href="#helius_api_key" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>HELIUS_<wbr/>API_<wbr/>KEY</span></a><a href="#jupiter_fee_bps" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>JUPITER_<wbr/>FEE_<wbr/>BPS</span></a><a href="#jupiter_referral_account" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>JUPITER_<wbr/>REFERRAL_<wbr/>ACCOUNT</span></a><a href="#openai_api_key" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>OPENAI_<wbr/>API_<wbr/>KEY</span></a><a href="#perplexity_api_key" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>PERPLEXITY_<wbr/>API_<wbr/>KEY</span></a><a href="#priority_level" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>PRIORITY_<wbr/>LEVEL</span></a></div></details></div></details></div><div class="site-menu"><nav class="tsd-navigation"><a href="../modules.html">solana-agent-kit</a><ul class="tsd-small-nested-navigation" id="tsd-nav-container"><li>Loading...</li></ul></nav></div></div></div><footer><p class="tsd-generator">Generated using <a href="https://typedoc.org/" target="_blank">TypeDoc</a></p></footer><div class="overlay"></div></body></html>


================================================
File: docs/interfaces/Creator.html
================================================
<!DOCTYPE html><html class="default" lang="en" data-base=".."><head><meta charset="utf-8"/><meta http-equiv="x-ua-compatible" content="IE=edge"/><title>Creator | solana-agent-kit</title><meta name="description" content="Documentation for solana-agent-kit"/><meta name="viewport" content="width=device-width, initial-scale=1"/><link rel="stylesheet" href="../assets/style.css"/><link rel="stylesheet" href="../assets/highlight.css"/><script defer src="../assets/main.js"></script><script async src="../assets/icons.js" id="tsd-icons-script"></script><script async src="../assets/search.js" id="tsd-search-script"></script><script async src="../assets/navigation.js" id="tsd-nav-script"></script></head><body><script>document.documentElement.dataset.theme = localStorage.getItem("tsd-theme") || "os";document.body.style.display="none";setTimeout(() => app?app.showPage():document.body.style.removeProperty("display"),500)</script><header class="tsd-page-toolbar"><div class="tsd-toolbar-contents container"><div class="table-cell" id="tsd-search"><div class="field"><label for="tsd-search-field" class="tsd-widget tsd-toolbar-icon search no-caption"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-search"></use></svg></label><input type="text" id="tsd-search-field" aria-label="Search"/></div><div class="field"><div id="tsd-toolbar-links"></div></div><ul class="results"><li class="state loading">Preparing search index...</li><li class="state failure">The search index is not available</li></ul><a href="../index.html" class="title">solana-agent-kit</a></div><div class="table-cell" id="tsd-widgets"><a href="#" class="tsd-widget tsd-toolbar-icon menu no-caption" data-toggle="menu" aria-label="Menu"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-menu"></use></svg></a></div></div></header><div class="container container-main"><div class="col-content"><div class="tsd-page-title"><ul class="tsd-breadcrumb"><li><a href="../modules.html">solana-agent-kit</a></li><li><a href="Creator.html">Creator</a></li></ul><h1>Interface Creator</h1></div><div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">Creator</span> <span class="tsd-signature-symbol">{</span><br/>    <a class="tsd-kind-property" href="Creator.html#address">address</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="Creator.html#percentage">percentage</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L16">src/types/index.ts:16</a></li></ul></aside><section class="tsd-panel-group tsd-index-group"><section class="tsd-panel tsd-index-panel"><details class="tsd-index-content tsd-accordion" open><summary class="tsd-accordion-summary tsd-index-summary"><h5 class="tsd-index-heading uppercase" role="button" aria-expanded="false" tabIndex="0"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-chevronSmall"></use></svg> Index</h5></summary><div class="tsd-accordion-details"><section class="tsd-index-section"><h3 class="tsd-index-heading">Properties</h3><div class="tsd-index-list"><a href="Creator.html#address" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>address</span></a>
<a href="Creator.html#percentage" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>percentage</span></a>
</div></section></div></details></section></section><details class="tsd-panel-group tsd-member-group tsd-accordion" open><summary class="tsd-accordion-summary" data-key="section-Properties"><h2><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg> Properties</h2></summary><section><section class="tsd-panel tsd-member"><a id="address" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>address</span><a href="#address" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">address</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L17">src/types/index.ts:17</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="percentage" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>percentage</span><a href="#percentage" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">percentage</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L18">src/types/index.ts:18</a></li></ul></aside></section></section></details></div><div class="col-sidebar"><div class="page-menu"><div class="tsd-navigation settings"><details class="tsd-accordion"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Settings</h3></summary><div class="tsd-accordion-details"><div class="tsd-filter-visibility"><span class="settings-label">Member Visibility</span><ul id="tsd-filter-options"><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-protected" name="protected"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Protected</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-inherited" name="inherited" checked/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Inherited</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-external" name="external"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>External</span></label></li></ul></div><div class="tsd-theme-toggle"><label class="settings-label" for="tsd-theme">Theme</label><select id="tsd-theme"><option value="os">OS</option><option value="light">Light</option><option value="dark">Dark</option></select></div></div></details></div><details open class="tsd-accordion tsd-page-navigation"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>On This Page</h3></summary><div class="tsd-accordion-details"><details open class="tsd-accordion tsd-page-navigation-section"><summary class="tsd-accordion-summary" data-key="section-Properties"><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Properties</summary><div><a href="#address" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>address</span></a><a href="#percentage" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>percentage</span></a></div></details></div></details></div><div class="site-menu"><nav class="tsd-navigation"><a href="../modules.html">solana-agent-kit</a><ul class="tsd-small-nested-navigation" id="tsd-nav-container"><li>Loading...</li></ul></nav></div></div></div><footer><p class="tsd-generator">Generated using <a href="https://typedoc.org/" target="_blank">TypeDoc</a></p></footer><div class="overlay"></div></body></html>


================================================
File: docs/interfaces/FetchPriceResponse.html
================================================
<!DOCTYPE html><html class="default" lang="en" data-base=".."><head><meta charset="utf-8"/><meta http-equiv="x-ua-compatible" content="IE=edge"/><title>FetchPriceResponse | solana-agent-kit</title><meta name="description" content="Documentation for solana-agent-kit"/><meta name="viewport" content="width=device-width, initial-scale=1"/><link rel="stylesheet" href="../assets/style.css"/><link rel="stylesheet" href="../assets/highlight.css"/><script defer src="../assets/main.js"></script><script async src="../assets/icons.js" id="tsd-icons-script"></script><script async src="../assets/search.js" id="tsd-search-script"></script><script async src="../assets/navigation.js" id="tsd-nav-script"></script></head><body><script>document.documentElement.dataset.theme = localStorage.getItem("tsd-theme") || "os";document.body.style.display="none";setTimeout(() => app?app.showPage():document.body.style.removeProperty("display"),500)</script><header class="tsd-page-toolbar"><div class="tsd-toolbar-contents container"><div class="table-cell" id="tsd-search"><div class="field"><label for="tsd-search-field" class="tsd-widget tsd-toolbar-icon search no-caption"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-search"></use></svg></label><input type="text" id="tsd-search-field" aria-label="Search"/></div><div class="field"><div id="tsd-toolbar-links"></div></div><ul class="results"><li class="state loading">Preparing search index...</li><li class="state failure">The search index is not available</li></ul><a href="../index.html" class="title">solana-agent-kit</a></div><div class="table-cell" id="tsd-widgets"><a href="#" class="tsd-widget tsd-toolbar-icon menu no-caption" data-toggle="menu" aria-label="Menu"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-menu"></use></svg></a></div></div></header><div class="container container-main"><div class="col-content"><div class="tsd-page-title"><ul class="tsd-breadcrumb"><li><a href="../modules.html">solana-agent-kit</a></li><li><a href="FetchPriceResponse.html">FetchPriceResponse</a></li></ul><h1>Interface FetchPriceResponse</h1></div><div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">FetchPriceResponse</span> <span class="tsd-signature-symbol">{</span><br/>    <a class="tsd-kind-property" href="FetchPriceResponse.html#code">code</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="FetchPriceResponse.html#message">message</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="FetchPriceResponse.html#priceinusdc">priceInUSDC</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="FetchPriceResponse.html#status">status</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;success&quot;</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;error&quot;</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="FetchPriceResponse.html#tokenid">tokenId</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L86">src/types/index.ts:86</a></li></ul></aside><section class="tsd-panel-group tsd-index-group"><section class="tsd-panel tsd-index-panel"><details class="tsd-index-content tsd-accordion" open><summary class="tsd-accordion-summary tsd-index-summary"><h5 class="tsd-index-heading uppercase" role="button" aria-expanded="false" tabIndex="0"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-chevronSmall"></use></svg> Index</h5></summary><div class="tsd-accordion-details"><section class="tsd-index-section"><h3 class="tsd-index-heading">Properties</h3><div class="tsd-index-list"><a href="FetchPriceResponse.html#code" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>code?</span></a>
<a href="FetchPriceResponse.html#message" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>message?</span></a>
<a href="FetchPriceResponse.html#priceinusdc" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>price<wbr/>InUSDC?</span></a>
<a href="FetchPriceResponse.html#status" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>status</span></a>
<a href="FetchPriceResponse.html#tokenid" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>token<wbr/>Id?</span></a>
</div></section></div></details></section></section><details class="tsd-panel-group tsd-member-group tsd-accordion" open><summary class="tsd-accordion-summary" data-key="section-Properties"><h2><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg> Properties</h2></summary><section><section class="tsd-panel tsd-member"><a id="code" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><code class="tsd-tag">Optional</code><span>code</span><a href="#code" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">code</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L91">src/types/index.ts:91</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="message" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><code class="tsd-tag">Optional</code><span>message</span><a href="#message" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">message</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L90">src/types/index.ts:90</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="priceinusdc" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><code class="tsd-tag">Optional</code><span>price<wbr/>InUSDC</span><a href="#priceinusdc" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">priceInUSDC</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L89">src/types/index.ts:89</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="status" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>status</span><a href="#status" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">status</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;success&quot;</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;error&quot;</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L87">src/types/index.ts:87</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="tokenid" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><code class="tsd-tag">Optional</code><span>token<wbr/>Id</span><a href="#tokenid" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">tokenId</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L88">src/types/index.ts:88</a></li></ul></aside></section></section></details></div><div class="col-sidebar"><div class="page-menu"><div class="tsd-navigation settings"><details class="tsd-accordion"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Settings</h3></summary><div class="tsd-accordion-details"><div class="tsd-filter-visibility"><span class="settings-label">Member Visibility</span><ul id="tsd-filter-options"><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-protected" name="protected"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Protected</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-inherited" name="inherited" checked/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Inherited</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-external" name="external"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>External</span></label></li></ul></div><div class="tsd-theme-toggle"><label class="settings-label" for="tsd-theme">Theme</label><select id="tsd-theme"><option value="os">OS</option><option value="light">Light</option><option value="dark">Dark</option></select></div></div></details></div><details open class="tsd-accordion tsd-page-navigation"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>On This Page</h3></summary><div class="tsd-accordion-details"><details open class="tsd-accordion tsd-page-navigation-section"><summary class="tsd-accordion-summary" data-key="section-Properties"><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Properties</summary><div><a href="#code" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>code</span></a><a href="#message" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>message</span></a><a href="#priceinusdc" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>price<wbr/>InUSDC</span></a><a href="#status" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>status</span></a><a href="#tokenid" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>token<wbr/>Id</span></a></div></details></div></details></div><div class="site-menu"><nav class="tsd-navigation"><a href="../modules.html">solana-agent-kit</a><ul class="tsd-small-nested-navigation" id="tsd-nav-container"><li>Loading...</li></ul></nav></div></div></div><footer><p class="tsd-generator">Generated using <a href="https://typedoc.org/" target="_blank">TypeDoc</a></p></footer><div class="overlay"></div></body></html>


================================================
File: docs/interfaces/FlashCloseTradeParams.html
================================================
<!DOCTYPE html><html class="default" lang="en" data-base=".."><head><meta charset="utf-8"/><meta http-equiv="x-ua-compatible" content="IE=edge"/><title>FlashCloseTradeParams | solana-agent-kit</title><meta name="description" content="Documentation for solana-agent-kit"/><meta name="viewport" content="width=device-width, initial-scale=1"/><link rel="stylesheet" href="../assets/style.css"/><link rel="stylesheet" href="../assets/highlight.css"/><script defer src="../assets/main.js"></script><script async src="../assets/icons.js" id="tsd-icons-script"></script><script async src="../assets/search.js" id="tsd-search-script"></script><script async src="../assets/navigation.js" id="tsd-nav-script"></script></head><body><script>document.documentElement.dataset.theme = localStorage.getItem("tsd-theme") || "os";document.body.style.display="none";setTimeout(() => app?app.showPage():document.body.style.removeProperty("display"),500)</script><header class="tsd-page-toolbar"><div class="tsd-toolbar-contents container"><div class="table-cell" id="tsd-search"><div class="field"><label for="tsd-search-field" class="tsd-widget tsd-toolbar-icon search no-caption"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-search"></use></svg></label><input type="text" id="tsd-search-field" aria-label="Search"/></div><div class="field"><div id="tsd-toolbar-links"></div></div><ul class="results"><li class="state loading">Preparing search index...</li><li class="state failure">The search index is not available</li></ul><a href="../index.html" class="title">solana-agent-kit</a></div><div class="table-cell" id="tsd-widgets"><a href="#" class="tsd-widget tsd-toolbar-icon menu no-caption" data-toggle="menu" aria-label="Menu"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-menu"></use></svg></a></div></div></header><div class="container container-main"><div class="col-content"><div class="tsd-page-title"><ul class="tsd-breadcrumb"><li><a href="../modules.html">solana-agent-kit</a></li><li><a href="FlashCloseTradeParams.html">FlashCloseTradeParams</a></li></ul><h1>Interface FlashCloseTradeParams</h1></div><div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">FlashCloseTradeParams</span> <span class="tsd-signature-symbol">{</span><br/>    <a class="tsd-kind-property" href="FlashCloseTradeParams.html#side">side</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;long&quot;</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;short&quot;</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="FlashCloseTradeParams.html#token">token</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L240">src/types/index.ts:240</a></li></ul></aside><section class="tsd-panel-group tsd-index-group"><section class="tsd-panel tsd-index-panel"><details class="tsd-index-content tsd-accordion" open><summary class="tsd-accordion-summary tsd-index-summary"><h5 class="tsd-index-heading uppercase" role="button" aria-expanded="false" tabIndex="0"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-chevronSmall"></use></svg> Index</h5></summary><div class="tsd-accordion-details"><section class="tsd-index-section"><h3 class="tsd-index-heading">Properties</h3><div class="tsd-index-list"><a href="FlashCloseTradeParams.html#side" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>side</span></a>
<a href="FlashCloseTradeParams.html#token" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>token</span></a>
</div></section></div></details></section></section><details class="tsd-panel-group tsd-member-group tsd-accordion" open><summary class="tsd-accordion-summary" data-key="section-Properties"><h2><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg> Properties</h2></summary><section><section class="tsd-panel tsd-member"><a id="side" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>side</span><a href="#side" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">side</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;long&quot;</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;short&quot;</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L242">src/types/index.ts:242</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="token" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>token</span><a href="#token" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">token</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L241">src/types/index.ts:241</a></li></ul></aside></section></section></details></div><div class="col-sidebar"><div class="page-menu"><div class="tsd-navigation settings"><details class="tsd-accordion"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Settings</h3></summary><div class="tsd-accordion-details"><div class="tsd-filter-visibility"><span class="settings-label">Member Visibility</span><ul id="tsd-filter-options"><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-protected" name="protected"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Protected</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-inherited" name="inherited" checked/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Inherited</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-external" name="external"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>External</span></label></li></ul></div><div class="tsd-theme-toggle"><label class="settings-label" for="tsd-theme">Theme</label><select id="tsd-theme"><option value="os">OS</option><option value="light">Light</option><option value="dark">Dark</option></select></div></div></details></div><details open class="tsd-accordion tsd-page-navigation"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>On This Page</h3></summary><div class="tsd-accordion-details"><details open class="tsd-accordion tsd-page-navigation-section"><summary class="tsd-accordion-summary" data-key="section-Properties"><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Properties</summary><div><a href="#side" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>side</span></a><a href="#token" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>token</span></a></div></details></div></details></div><div class="site-menu"><nav class="tsd-navigation"><a href="../modules.html">solana-agent-kit</a><ul class="tsd-small-nested-navigation" id="tsd-nav-container"><li>Loading...</li></ul></nav></div></div></div><footer><p class="tsd-generator">Generated using <a href="https://typedoc.org/" target="_blank">TypeDoc</a></p></footer><div class="overlay"></div></body></html>


================================================
File: docs/interfaces/FlashTradeParams.html
================================================
<!DOCTYPE html><html class="default" lang="en" data-base=".."><head><meta charset="utf-8"/><meta http-equiv="x-ua-compatible" content="IE=edge"/><title>FlashTradeParams | solana-agent-kit</title><meta name="description" content="Documentation for solana-agent-kit"/><meta name="viewport" content="width=device-width, initial-scale=1"/><link rel="stylesheet" href="../assets/style.css"/><link rel="stylesheet" href="../assets/highlight.css"/><script defer src="../assets/main.js"></script><script async src="../assets/icons.js" id="tsd-icons-script"></script><script async src="../assets/search.js" id="tsd-search-script"></script><script async src="../assets/navigation.js" id="tsd-nav-script"></script></head><body><script>document.documentElement.dataset.theme = localStorage.getItem("tsd-theme") || "os";document.body.style.display="none";setTimeout(() => app?app.showPage():document.body.style.removeProperty("display"),500)</script><header class="tsd-page-toolbar"><div class="tsd-toolbar-contents container"><div class="table-cell" id="tsd-search"><div class="field"><label for="tsd-search-field" class="tsd-widget tsd-toolbar-icon search no-caption"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-search"></use></svg></label><input type="text" id="tsd-search-field" aria-label="Search"/></div><div class="field"><div id="tsd-toolbar-links"></div></div><ul class="results"><li class="state loading">Preparing search index...</li><li class="state failure">The search index is not available</li></ul><a href="../index.html" class="title">solana-agent-kit</a></div><div class="table-cell" id="tsd-widgets"><a href="#" class="tsd-widget tsd-toolbar-icon menu no-caption" data-toggle="menu" aria-label="Menu"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-menu"></use></svg></a></div></div></header><div class="container container-main"><div class="col-content"><div class="tsd-page-title"><ul class="tsd-breadcrumb"><li><a href="../modules.html">solana-agent-kit</a></li><li><a href="FlashTradeParams.html">FlashTradeParams</a></li></ul><h1>Interface FlashTradeParams</h1></div><div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">FlashTradeParams</span> <span class="tsd-signature-symbol">{</span><br/>    <a class="tsd-kind-property" href="FlashTradeParams.html#collateralusd">collateralUsd</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="FlashTradeParams.html#leverage">leverage</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="FlashTradeParams.html#side">side</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;long&quot;</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;short&quot;</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="FlashTradeParams.html#token">token</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L233">src/types/index.ts:233</a></li></ul></aside><section class="tsd-panel-group tsd-index-group"><section class="tsd-panel tsd-index-panel"><details class="tsd-index-content tsd-accordion" open><summary class="tsd-accordion-summary tsd-index-summary"><h5 class="tsd-index-heading uppercase" role="button" aria-expanded="false" tabIndex="0"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-chevronSmall"></use></svg> Index</h5></summary><div class="tsd-accordion-details"><section class="tsd-index-section"><h3 class="tsd-index-heading">Properties</h3><div class="tsd-index-list"><a href="FlashTradeParams.html#collateralusd" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>collateral<wbr/>Usd</span></a>
<a href="FlashTradeParams.html#leverage" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>leverage</span></a>
<a href="FlashTradeParams.html#side" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>side</span></a>
<a href="FlashTradeParams.html#token" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>token</span></a>
</div></section></div></details></section></section><details class="tsd-panel-group tsd-member-group tsd-accordion" open><summary class="tsd-accordion-summary" data-key="section-Properties"><h2><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg> Properties</h2></summary><section><section class="tsd-panel tsd-member"><a id="collateralusd" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>collateral<wbr/>Usd</span><a href="#collateralusd" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">collateralUsd</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L236">src/types/index.ts:236</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="leverage" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>leverage</span><a href="#leverage" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">leverage</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L237">src/types/index.ts:237</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="side" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>side</span><a href="#side" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">side</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;long&quot;</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;short&quot;</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L235">src/types/index.ts:235</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="token" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>token</span><a href="#token" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">token</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L234">src/types/index.ts:234</a></li></ul></aside></section></section></details></div><div class="col-sidebar"><div class="page-menu"><div class="tsd-navigation settings"><details class="tsd-accordion"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Settings</h3></summary><div class="tsd-accordion-details"><div class="tsd-filter-visibility"><span class="settings-label">Member Visibility</span><ul id="tsd-filter-options"><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-protected" name="protected"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Protected</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-inherited" name="inherited" checked/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Inherited</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-external" name="external"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>External</span></label></li></ul></div><div class="tsd-theme-toggle"><label class="settings-label" for="tsd-theme">Theme</label><select id="tsd-theme"><option value="os">OS</option><option value="light">Light</option><option value="dark">Dark</option></select></div></div></details></div><details open class="tsd-accordion tsd-page-navigation"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>On This Page</h3></summary><div class="tsd-accordion-details"><details open class="tsd-accordion tsd-page-navigation-section"><summary class="tsd-accordion-summary" data-key="section-Properties"><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Properties</summary><div><a href="#collateralusd" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>collateral<wbr/>Usd</span></a><a href="#leverage" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>leverage</span></a><a href="#side" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>side</span></a><a href="#token" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>token</span></a></div></details></div></details></div><div class="site-menu"><nav class="tsd-navigation"><a href="../modules.html">solana-agent-kit</a><ul class="tsd-small-nested-navigation" id="tsd-nav-container"><li>Loading...</li></ul></nav></div></div></div><footer><p class="tsd-generator">Generated using <a href="https://typedoc.org/" target="_blank">TypeDoc</a></p></footer><div class="overlay"></div></body></html>


================================================
File: docs/interfaces/GibworkCreateTaskReponse.html
================================================
<!DOCTYPE html><html class="default" lang="en" data-base=".."><head><meta charset="utf-8"/><meta http-equiv="x-ua-compatible" content="IE=edge"/><title>GibworkCreateTaskReponse | solana-agent-kit</title><meta name="description" content="Documentation for solana-agent-kit"/><meta name="viewport" content="width=device-width, initial-scale=1"/><link rel="stylesheet" href="../assets/style.css"/><link rel="stylesheet" href="../assets/highlight.css"/><script defer src="../assets/main.js"></script><script async src="../assets/icons.js" id="tsd-icons-script"></script><script async src="../assets/search.js" id="tsd-search-script"></script><script async src="../assets/navigation.js" id="tsd-nav-script"></script></head><body><script>document.documentElement.dataset.theme = localStorage.getItem("tsd-theme") || "os";document.body.style.display="none";setTimeout(() => app?app.showPage():document.body.style.removeProperty("display"),500)</script><header class="tsd-page-toolbar"><div class="tsd-toolbar-contents container"><div class="table-cell" id="tsd-search"><div class="field"><label for="tsd-search-field" class="tsd-widget tsd-toolbar-icon search no-caption"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-search"></use></svg></label><input type="text" id="tsd-search-field" aria-label="Search"/></div><div class="field"><div id="tsd-toolbar-links"></div></div><ul class="results"><li class="state loading">Preparing search index...</li><li class="state failure">The search index is not available</li></ul><a href="../index.html" class="title">solana-agent-kit</a></div><div class="table-cell" id="tsd-widgets"><a href="#" class="tsd-widget tsd-toolbar-icon menu no-caption" data-toggle="menu" aria-label="Menu"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-menu"></use></svg></a></div></div></header><div class="container container-main"><div class="col-content"><div class="tsd-page-title"><ul class="tsd-breadcrumb"><li><a href="../modules.html">solana-agent-kit</a></li><li><a href="GibworkCreateTaskReponse.html">GibworkCreateTaskReponse</a></li></ul><h1>Interface GibworkCreateTaskReponse</h1></div><div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">GibworkCreateTaskReponse</span> <span class="tsd-signature-symbol">{</span><br/>    <a class="tsd-kind-property" href="GibworkCreateTaskReponse.html#signature">signature</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="GibworkCreateTaskReponse.html#status">status</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;success&quot;</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;error&quot;</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="GibworkCreateTaskReponse.html#taskid">taskId</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L103">src/types/index.ts:103</a></li></ul></aside><section class="tsd-panel-group tsd-index-group"><section class="tsd-panel tsd-index-panel"><details class="tsd-index-content tsd-accordion" open><summary class="tsd-accordion-summary tsd-index-summary"><h5 class="tsd-index-heading uppercase" role="button" aria-expanded="false" tabIndex="0"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-chevronSmall"></use></svg> Index</h5></summary><div class="tsd-accordion-details"><section class="tsd-index-section"><h3 class="tsd-index-heading">Properties</h3><div class="tsd-index-list"><a href="GibworkCreateTaskReponse.html#signature" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>signature?</span></a>
<a href="GibworkCreateTaskReponse.html#status" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>status</span></a>
<a href="GibworkCreateTaskReponse.html#taskid" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>task<wbr/>Id?</span></a>
</div></section></div></details></section></section><details class="tsd-panel-group tsd-member-group tsd-accordion" open><summary class="tsd-accordion-summary" data-key="section-Properties"><h2><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg> Properties</h2></summary><section><section class="tsd-panel tsd-member"><a id="signature" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><code class="tsd-tag">Optional</code><span>signature</span><a href="#signature" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">signature</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L106">src/types/index.ts:106</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="status" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>status</span><a href="#status" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">status</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;success&quot;</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;error&quot;</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L104">src/types/index.ts:104</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="taskid" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><code class="tsd-tag">Optional</code><span>task<wbr/>Id</span><a href="#taskid" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">taskId</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L105">src/types/index.ts:105</a></li></ul></aside></section></section></details></div><div class="col-sidebar"><div class="page-menu"><div class="tsd-navigation settings"><details class="tsd-accordion"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Settings</h3></summary><div class="tsd-accordion-details"><div class="tsd-filter-visibility"><span class="settings-label">Member Visibility</span><ul id="tsd-filter-options"><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-protected" name="protected"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Protected</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-inherited" name="inherited" checked/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Inherited</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-external" name="external"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>External</span></label></li></ul></div><div class="tsd-theme-toggle"><label class="settings-label" for="tsd-theme">Theme</label><select id="tsd-theme"><option value="os">OS</option><option value="light">Light</option><option value="dark">Dark</option></select></div></div></details></div><details open class="tsd-accordion tsd-page-navigation"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>On This Page</h3></summary><div class="tsd-accordion-details"><details open class="tsd-accordion tsd-page-navigation-section"><summary class="tsd-accordion-summary" data-key="section-Properties"><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Properties</summary><div><a href="#signature" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>signature</span></a><a href="#status" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>status</span></a><a href="#taskid" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>task<wbr/>Id</span></a></div></details></div></details></div><div class="site-menu"><nav class="tsd-navigation"><a href="../modules.html">solana-agent-kit</a><ul class="tsd-small-nested-navigation" id="tsd-nav-container"><li>Loading...</li></ul></nav></div></div></div><footer><p class="tsd-generator">Generated using <a href="https://typedoc.org/" target="_blank">TypeDoc</a></p></footer><div class="overlay"></div></body></html>


================================================
File: docs/interfaces/HeliusWebhookIdResponse.html
================================================
<!DOCTYPE html><html class="default" lang="en" data-base=".."><head><meta charset="utf-8"/><meta http-equiv="x-ua-compatible" content="IE=edge"/><title>HeliusWebhookIdResponse | solana-agent-kit</title><meta name="description" content="Documentation for solana-agent-kit"/><meta name="viewport" content="width=device-width, initial-scale=1"/><link rel="stylesheet" href="../assets/style.css"/><link rel="stylesheet" href="../assets/highlight.css"/><script defer src="../assets/main.js"></script><script async src="../assets/icons.js" id="tsd-icons-script"></script><script async src="../assets/search.js" id="tsd-search-script"></script><script async src="../assets/navigation.js" id="tsd-nav-script"></script></head><body><script>document.documentElement.dataset.theme = localStorage.getItem("tsd-theme") || "os";document.body.style.display="none";setTimeout(() => app?app.showPage():document.body.style.removeProperty("display"),500)</script><header class="tsd-page-toolbar"><div class="tsd-toolbar-contents container"><div class="table-cell" id="tsd-search"><div class="field"><label for="tsd-search-field" class="tsd-widget tsd-toolbar-icon search no-caption"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-search"></use></svg></label><input type="text" id="tsd-search-field" aria-label="Search"/></div><div class="field"><div id="tsd-toolbar-links"></div></div><ul class="results"><li class="state loading">Preparing search index...</li><li class="state failure">The search index is not available</li></ul><a href="../index.html" class="title">solana-agent-kit</a></div><div class="table-cell" id="tsd-widgets"><a href="#" class="tsd-widget tsd-toolbar-icon menu no-caption" data-toggle="menu" aria-label="Menu"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-menu"></use></svg></a></div></div></header><div class="container container-main"><div class="col-content"><div class="tsd-page-title"><ul class="tsd-breadcrumb"><li><a href="../modules.html">solana-agent-kit</a></li><li><a href="HeliusWebhookIdResponse.html">HeliusWebhookIdResponse</a></li></ul><h1>Interface HeliusWebhookIdResponse</h1></div><div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">HeliusWebhookIdResponse</span> <span class="tsd-signature-symbol">{</span><br/>    <a class="tsd-kind-property" href="HeliusWebhookIdResponse.html#accountaddresses">accountAddresses</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">[]</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="HeliusWebhookIdResponse.html#transactiontypes">transactionTypes</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">[]</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="HeliusWebhookIdResponse.html#wallet">wallet</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="HeliusWebhookIdResponse.html#webhooktype">webhookType</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="HeliusWebhookIdResponse.html#webhookurl">webhookURL</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L249">src/types/index.ts:249</a></li></ul></aside><section class="tsd-panel-group tsd-index-group"><section class="tsd-panel tsd-index-panel"><details class="tsd-index-content tsd-accordion" open><summary class="tsd-accordion-summary tsd-index-summary"><h5 class="tsd-index-heading uppercase" role="button" aria-expanded="false" tabIndex="0"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-chevronSmall"></use></svg> Index</h5></summary><div class="tsd-accordion-details"><section class="tsd-index-section"><h3 class="tsd-index-heading">Properties</h3><div class="tsd-index-list"><a href="HeliusWebhookIdResponse.html#accountaddresses" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>account<wbr/>Addresses</span></a>
<a href="HeliusWebhookIdResponse.html#transactiontypes" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>transaction<wbr/>Types</span></a>
<a href="HeliusWebhookIdResponse.html#wallet" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>wallet</span></a>
<a href="HeliusWebhookIdResponse.html#webhooktype" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>webhook<wbr/>Type</span></a>
<a href="HeliusWebhookIdResponse.html#webhookurl" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>webhookURL</span></a>
</div></section></div></details></section></section><details class="tsd-panel-group tsd-member-group tsd-accordion" open><summary class="tsd-accordion-summary" data-key="section-Properties"><h2><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg> Properties</h2></summary><section><section class="tsd-panel tsd-member"><a id="accountaddresses" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>account<wbr/>Addresses</span><a href="#accountaddresses" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">accountAddresses</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">[]</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L253">src/types/index.ts:253</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="transactiontypes" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>transaction<wbr/>Types</span><a href="#transactiontypes" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">transactionTypes</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">[]</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L252">src/types/index.ts:252</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="wallet" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>wallet</span><a href="#wallet" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">wallet</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L250">src/types/index.ts:250</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="webhooktype" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>webhook<wbr/>Type</span><a href="#webhooktype" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">webhookType</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L254">src/types/index.ts:254</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="webhookurl" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>webhookURL</span><a href="#webhookurl" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">webhookURL</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L251">src/types/index.ts:251</a></li></ul></aside></section></section></details></div><div class="col-sidebar"><div class="page-menu"><div class="tsd-navigation settings"><details class="tsd-accordion"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Settings</h3></summary><div class="tsd-accordion-details"><div class="tsd-filter-visibility"><span class="settings-label">Member Visibility</span><ul id="tsd-filter-options"><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-protected" name="protected"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Protected</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-inherited" name="inherited" checked/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Inherited</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-external" name="external"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>External</span></label></li></ul></div><div class="tsd-theme-toggle"><label class="settings-label" for="tsd-theme">Theme</label><select id="tsd-theme"><option value="os">OS</option><option value="light">Light</option><option value="dark">Dark</option></select></div></div></details></div><details open class="tsd-accordion tsd-page-navigation"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>On This Page</h3></summary><div class="tsd-accordion-details"><details open class="tsd-accordion tsd-page-navigation-section"><summary class="tsd-accordion-summary" data-key="section-Properties"><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Properties</summary><div><a href="#accountaddresses" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>account<wbr/>Addresses</span></a><a href="#transactiontypes" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>transaction<wbr/>Types</span></a><a href="#wallet" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>wallet</span></a><a href="#webhooktype" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>webhook<wbr/>Type</span></a><a href="#webhookurl" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>webhookURL</span></a></div></details></div></details></div><div class="site-menu"><nav class="tsd-navigation"><a href="../modules.html">solana-agent-kit</a><ul class="tsd-small-nested-navigation" id="tsd-nav-container"><li>Loading...</li></ul></nav></div></div></div><footer><p class="tsd-generator">Generated using <a href="https://typedoc.org/" target="_blank">TypeDoc</a></p></footer><div class="overlay"></div></body></html>


================================================
File: docs/interfaces/HeliusWebhookResponse.html
================================================
<!DOCTYPE html><html class="default" lang="en" data-base=".."><head><meta charset="utf-8"/><meta http-equiv="x-ua-compatible" content="IE=edge"/><title>HeliusWebhookResponse | solana-agent-kit</title><meta name="description" content="Documentation for solana-agent-kit"/><meta name="viewport" content="width=device-width, initial-scale=1"/><link rel="stylesheet" href="../assets/style.css"/><link rel="stylesheet" href="../assets/highlight.css"/><script defer src="../assets/main.js"></script><script async src="../assets/icons.js" id="tsd-icons-script"></script><script async src="../assets/search.js" id="tsd-search-script"></script><script async src="../assets/navigation.js" id="tsd-nav-script"></script></head><body><script>document.documentElement.dataset.theme = localStorage.getItem("tsd-theme") || "os";document.body.style.display="none";setTimeout(() => app?app.showPage():document.body.style.removeProperty("display"),500)</script><header class="tsd-page-toolbar"><div class="tsd-toolbar-contents container"><div class="table-cell" id="tsd-search"><div class="field"><label for="tsd-search-field" class="tsd-widget tsd-toolbar-icon search no-caption"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-search"></use></svg></label><input type="text" id="tsd-search-field" aria-label="Search"/></div><div class="field"><div id="tsd-toolbar-links"></div></div><ul class="results"><li class="state loading">Preparing search index...</li><li class="state failure">The search index is not available</li></ul><a href="../index.html" class="title">solana-agent-kit</a></div><div class="table-cell" id="tsd-widgets"><a href="#" class="tsd-widget tsd-toolbar-icon menu no-caption" data-toggle="menu" aria-label="Menu"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-menu"></use></svg></a></div></div></header><div class="container container-main"><div class="col-content"><div class="tsd-page-title"><ul class="tsd-breadcrumb"><li><a href="../modules.html">solana-agent-kit</a></li><li><a href="HeliusWebhookResponse.html">HeliusWebhookResponse</a></li></ul><h1>Interface HeliusWebhookResponse</h1></div><div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">HeliusWebhookResponse</span> <span class="tsd-signature-symbol">{</span><br/>    <a class="tsd-kind-property" href="HeliusWebhookResponse.html#webhookid">webhookID</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="HeliusWebhookResponse.html#webhookurl">webhookURL</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L245">src/types/index.ts:245</a></li></ul></aside><section class="tsd-panel-group tsd-index-group"><section class="tsd-panel tsd-index-panel"><details class="tsd-index-content tsd-accordion" open><summary class="tsd-accordion-summary tsd-index-summary"><h5 class="tsd-index-heading uppercase" role="button" aria-expanded="false" tabIndex="0"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-chevronSmall"></use></svg> Index</h5></summary><div class="tsd-accordion-details"><section class="tsd-index-section"><h3 class="tsd-index-heading">Properties</h3><div class="tsd-index-list"><a href="HeliusWebhookResponse.html#webhookid" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>webhookID</span></a>
<a href="HeliusWebhookResponse.html#webhookurl" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>webhookURL</span></a>
</div></section></div></details></section></section><details class="tsd-panel-group tsd-member-group tsd-accordion" open><summary class="tsd-accordion-summary" data-key="section-Properties"><h2><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg> Properties</h2></summary><section><section class="tsd-panel tsd-member"><a id="webhookid" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>webhookID</span><a href="#webhookid" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">webhookID</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L247">src/types/index.ts:247</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="webhookurl" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>webhookURL</span><a href="#webhookurl" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">webhookURL</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L246">src/types/index.ts:246</a></li></ul></aside></section></section></details></div><div class="col-sidebar"><div class="page-menu"><div class="tsd-navigation settings"><details class="tsd-accordion"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Settings</h3></summary><div class="tsd-accordion-details"><div class="tsd-filter-visibility"><span class="settings-label">Member Visibility</span><ul id="tsd-filter-options"><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-protected" name="protected"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Protected</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-inherited" name="inherited" checked/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Inherited</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-external" name="external"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>External</span></label></li></ul></div><div class="tsd-theme-toggle"><label class="settings-label" for="tsd-theme">Theme</label><select id="tsd-theme"><option value="os">OS</option><option value="light">Light</option><option value="dark">Dark</option></select></div></div></details></div><details open class="tsd-accordion tsd-page-navigation"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>On This Page</h3></summary><div class="tsd-accordion-details"><details open class="tsd-accordion tsd-page-navigation-section"><summary class="tsd-accordion-summary" data-key="section-Properties"><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Properties</summary><div><a href="#webhookid" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>webhookID</span></a><a href="#webhookurl" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>webhookURL</span></a></div></details></div></details></div><div class="site-menu"><nav class="tsd-navigation"><a href="../modules.html">solana-agent-kit</a><ul class="tsd-small-nested-navigation" id="tsd-nav-container"><li>Loading...</li></ul></nav></div></div></div><footer><p class="tsd-generator">Generated using <a href="https://typedoc.org/" target="_blank">TypeDoc</a></p></footer><div class="overlay"></div></body></html>


================================================
File: docs/interfaces/JupiterTokenData.html
================================================
<!DOCTYPE html><html class="default" lang="en" data-base=".."><head><meta charset="utf-8"/><meta http-equiv="x-ua-compatible" content="IE=edge"/><title>JupiterTokenData | solana-agent-kit</title><meta name="description" content="Documentation for solana-agent-kit"/><meta name="viewport" content="width=device-width, initial-scale=1"/><link rel="stylesheet" href="../assets/style.css"/><link rel="stylesheet" href="../assets/highlight.css"/><script defer src="../assets/main.js"></script><script async src="../assets/icons.js" id="tsd-icons-script"></script><script async src="../assets/search.js" id="tsd-search-script"></script><script async src="../assets/navigation.js" id="tsd-nav-script"></script></head><body><script>document.documentElement.dataset.theme = localStorage.getItem("tsd-theme") || "os";document.body.style.display="none";setTimeout(() => app?app.showPage():document.body.style.removeProperty("display"),500)</script><header class="tsd-page-toolbar"><div class="tsd-toolbar-contents container"><div class="table-cell" id="tsd-search"><div class="field"><label for="tsd-search-field" class="tsd-widget tsd-toolbar-icon search no-caption"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-search"></use></svg></label><input type="text" id="tsd-search-field" aria-label="Search"/></div><div class="field"><div id="tsd-toolbar-links"></div></div><ul class="results"><li class="state loading">Preparing search index...</li><li class="state failure">The search index is not available</li></ul><a href="../index.html" class="title">solana-agent-kit</a></div><div class="table-cell" id="tsd-widgets"><a href="#" class="tsd-widget tsd-toolbar-icon menu no-caption" data-toggle="menu" aria-label="Menu"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-menu"></use></svg></a></div></div></header><div class="container container-main"><div class="col-content"><div class="tsd-page-title"><ul class="tsd-breadcrumb"><li><a href="../modules.html">solana-agent-kit</a></li><li><a href="JupiterTokenData.html">JupiterTokenData</a></li></ul><h1>Interface JupiterTokenData</h1></div><div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">JupiterTokenData</span> <span class="tsd-signature-symbol">{</span><br/>    <a class="tsd-kind-property" href="JupiterTokenData.html#address">address</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="JupiterTokenData.html#daily_volume">daily_volume</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="JupiterTokenData.html#decimals">decimals</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="JupiterTokenData.html#extensions">extensions</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">{</span> <span class="tsd-kind-property">coingeckoId</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="JupiterTokenData.html#freeze_authority">freeze_authority</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">null</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="JupiterTokenData.html#logouri">logoURI</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="JupiterTokenData.html#mint_authority">mint_authority</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">null</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="JupiterTokenData.html#name">name</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="JupiterTokenData.html#permanent_delegate">permanent_delegate</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">null</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="JupiterTokenData.html#symbol">symbol</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="JupiterTokenData.html#tags">tags</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">[]</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L70">src/types/index.ts:70</a></li></ul></aside><section class="tsd-panel-group tsd-index-group"><section class="tsd-panel tsd-index-panel"><details class="tsd-index-content tsd-accordion" open><summary class="tsd-accordion-summary tsd-index-summary"><h5 class="tsd-index-heading uppercase" role="button" aria-expanded="false" tabIndex="0"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-chevronSmall"></use></svg> Index</h5></summary><div class="tsd-accordion-details"><section class="tsd-index-section"><h3 class="tsd-index-heading">Properties</h3><div class="tsd-index-list"><a href="JupiterTokenData.html#address" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>address</span></a>
<a href="JupiterTokenData.html#daily_volume" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>daily_<wbr/>volume</span></a>
<a href="JupiterTokenData.html#decimals" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>decimals</span></a>
<a href="JupiterTokenData.html#extensions" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>extensions</span></a>
<a href="JupiterTokenData.html#freeze_authority" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>freeze_<wbr/>authority</span></a>
<a href="JupiterTokenData.html#logouri" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>logoURI</span></a>
<a href="JupiterTokenData.html#mint_authority" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>mint_<wbr/>authority</span></a>
<a href="JupiterTokenData.html#name" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>name</span></a>
<a href="JupiterTokenData.html#permanent_delegate" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>permanent_<wbr/>delegate</span></a>
<a href="JupiterTokenData.html#symbol" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>symbol</span></a>
<a href="JupiterTokenData.html#tags" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>tags</span></a>
</div></section></div></details></section></section><details class="tsd-panel-group tsd-member-group tsd-accordion" open><summary class="tsd-accordion-summary" data-key="section-Properties"><h2><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg> Properties</h2></summary><section><section class="tsd-panel tsd-member"><a id="address" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>address</span><a href="#address" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">address</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L71">src/types/index.ts:71</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="daily_volume" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>daily_<wbr/>volume</span><a href="#daily_volume" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">daily_volume</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L77">src/types/index.ts:77</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="decimals" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>decimals</span><a href="#decimals" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">decimals</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L74">src/types/index.ts:74</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="extensions" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>extensions</span><a href="#extensions" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">extensions</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">{</span> <span class="tsd-kind-property">coingeckoId</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L81">src/types/index.ts:81</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="freeze_authority" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>freeze_<wbr/>authority</span><a href="#freeze_authority" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">freeze_authority</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">null</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L78">src/types/index.ts:78</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="logouri" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>logoURI</span><a href="#logouri" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">logoURI</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L76">src/types/index.ts:76</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="mint_authority" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>mint_<wbr/>authority</span><a href="#mint_authority" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">mint_authority</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">null</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L79">src/types/index.ts:79</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="name" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>name</span><a href="#name" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">name</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L72">src/types/index.ts:72</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="permanent_delegate" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>permanent_<wbr/>delegate</span><a href="#permanent_delegate" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">permanent_delegate</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">null</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L80">src/types/index.ts:80</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="symbol" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>symbol</span><a href="#symbol" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">symbol</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L73">src/types/index.ts:73</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="tags" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>tags</span><a href="#tags" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">tags</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">[]</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L75">src/types/index.ts:75</a></li></ul></aside></section></section></details></div><div class="col-sidebar"><div class="page-menu"><div class="tsd-navigation settings"><details class="tsd-accordion"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Settings</h3></summary><div class="tsd-accordion-details"><div class="tsd-filter-visibility"><span class="settings-label">Member Visibility</span><ul id="tsd-filter-options"><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-protected" name="protected"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Protected</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-inherited" name="inherited" checked/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Inherited</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-external" name="external"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>External</span></label></li></ul></div><div class="tsd-theme-toggle"><label class="settings-label" for="tsd-theme">Theme</label><select id="tsd-theme"><option value="os">OS</option><option value="light">Light</option><option value="dark">Dark</option></select></div></div></details></div><details open class="tsd-accordion tsd-page-navigation"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>On This Page</h3></summary><div class="tsd-accordion-details"><details open class="tsd-accordion tsd-page-navigation-section"><summary class="tsd-accordion-summary" data-key="section-Properties"><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Properties</summary><div><a href="#address" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>address</span></a><a href="#daily_volume" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>daily_<wbr/>volume</span></a><a href="#decimals" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>decimals</span></a><a href="#extensions" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>extensions</span></a><a href="#freeze_authority" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>freeze_<wbr/>authority</span></a><a href="#logouri" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>logoURI</span></a><a href="#mint_authority" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>mint_<wbr/>authority</span></a><a href="#name" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>name</span></a><a href="#permanent_delegate" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>permanent_<wbr/>delegate</span></a><a href="#symbol" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>symbol</span></a><a href="#tags" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>tags</span></a></div></details></div></details></div><div class="site-menu"><nav class="tsd-navigation"><a href="../modules.html">solana-agent-kit</a><ul class="tsd-small-nested-navigation" id="tsd-nav-container"><li>Loading...</li></ul></nav></div></div></div><footer><p class="tsd-generator">Generated using <a href="https://typedoc.org/" target="_blank">TypeDoc</a></p></footer><div class="overlay"></div></body></html>


================================================
File: docs/interfaces/LuloAccountDetailsResponse.html
================================================
<!DOCTYPE html><html class="default" lang="en" data-base=".."><head><meta charset="utf-8"/><meta http-equiv="x-ua-compatible" content="IE=edge"/><title>LuloAccountDetailsResponse | solana-agent-kit</title><meta name="description" content="Documentation for solana-agent-kit"/><meta name="viewport" content="width=device-width, initial-scale=1"/><link rel="stylesheet" href="../assets/style.css"/><link rel="stylesheet" href="../assets/highlight.css"/><script defer src="../assets/main.js"></script><script async src="../assets/icons.js" id="tsd-icons-script"></script><script async src="../assets/search.js" id="tsd-search-script"></script><script async src="../assets/navigation.js" id="tsd-nav-script"></script></head><body><script>document.documentElement.dataset.theme = localStorage.getItem("tsd-theme") || "os";document.body.style.display="none";setTimeout(() => app?app.showPage():document.body.style.removeProperty("display"),500)</script><header class="tsd-page-toolbar"><div class="tsd-toolbar-contents container"><div class="table-cell" id="tsd-search"><div class="field"><label for="tsd-search-field" class="tsd-widget tsd-toolbar-icon search no-caption"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-search"></use></svg></label><input type="text" id="tsd-search-field" aria-label="Search"/></div><div class="field"><div id="tsd-toolbar-links"></div></div><ul class="results"><li class="state loading">Preparing search index...</li><li class="state failure">The search index is not available</li></ul><a href="../index.html" class="title">solana-agent-kit</a></div><div class="table-cell" id="tsd-widgets"><a href="#" class="tsd-widget tsd-toolbar-icon menu no-caption" data-toggle="menu" aria-label="Menu"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-menu"></use></svg></a></div></div></header><div class="container container-main"><div class="col-content"><div class="tsd-page-title"><ul class="tsd-breadcrumb"><li><a href="../modules.html">solana-agent-kit</a></li><li><a href="LuloAccountDetailsResponse.html">LuloAccountDetailsResponse</a></li></ul><h1>Interface LuloAccountDetailsResponse</h1></div><section class="tsd-panel tsd-comment"><div class="tsd-comment tsd-typography"><p>Lulo Account Details response format</p>
</div><div class="tsd-comment tsd-typography"></div></section><div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">LuloAccountDetailsResponse</span> <span class="tsd-signature-symbol">{</span><br/>    <a class="tsd-kind-property" href="LuloAccountDetailsResponse.html#interestearned">interestEarned</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="LuloAccountDetailsResponse.html#realtimeapy">realtimeApy</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="LuloAccountDetailsResponse.html#settings">settings</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">{</span><br/>        <span class="tsd-kind-property">allowedProtocols</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">null</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>        <span class="tsd-kind-property">homebase</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">null</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>        <span class="tsd-kind-property">minimumRate</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>        <span class="tsd-kind-property">owner</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="LuloAccountDetailsResponse.html#totalvalue">totalValue</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L58">src/types/index.ts:58</a></li></ul></aside><section class="tsd-panel-group tsd-index-group"><section class="tsd-panel tsd-index-panel"><details class="tsd-index-content tsd-accordion" open><summary class="tsd-accordion-summary tsd-index-summary"><h5 class="tsd-index-heading uppercase" role="button" aria-expanded="false" tabIndex="0"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-chevronSmall"></use></svg> Index</h5></summary><div class="tsd-accordion-details"><section class="tsd-index-section"><h3 class="tsd-index-heading">Properties</h3><div class="tsd-index-list"><a href="LuloAccountDetailsResponse.html#interestearned" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>interest<wbr/>Earned</span></a>
<a href="LuloAccountDetailsResponse.html#realtimeapy" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>realtime<wbr/>Apy</span></a>
<a href="LuloAccountDetailsResponse.html#settings" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>settings</span></a>
<a href="LuloAccountDetailsResponse.html#totalvalue" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>total<wbr/>Value</span></a>
</div></section></div></details></section></section><details class="tsd-panel-group tsd-member-group tsd-accordion" open><summary class="tsd-accordion-summary" data-key="section-Properties"><h2><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg> Properties</h2></summary><section><section class="tsd-panel tsd-member"><a id="interestearned" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>interest<wbr/>Earned</span><a href="#interestearned" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">interestEarned</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L60">src/types/index.ts:60</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="realtimeapy" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>realtime<wbr/>Apy</span><a href="#realtimeapy" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">realtimeApy</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L61">src/types/index.ts:61</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="settings" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>settings</span><a href="#settings" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">settings</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">{</span><br/>    <span class="tsd-kind-property">allowedProtocols</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">null</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">homebase</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">null</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">minimumRate</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">owner</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L62">src/types/index.ts:62</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="totalvalue" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>total<wbr/>Value</span><a href="#totalvalue" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">totalValue</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L59">src/types/index.ts:59</a></li></ul></aside></section></section></details></div><div class="col-sidebar"><div class="page-menu"><div class="tsd-navigation settings"><details class="tsd-accordion"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Settings</h3></summary><div class="tsd-accordion-details"><div class="tsd-filter-visibility"><span class="settings-label">Member Visibility</span><ul id="tsd-filter-options"><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-protected" name="protected"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Protected</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-inherited" name="inherited" checked/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Inherited</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-external" name="external"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>External</span></label></li></ul></div><div class="tsd-theme-toggle"><label class="settings-label" for="tsd-theme">Theme</label><select id="tsd-theme"><option value="os">OS</option><option value="light">Light</option><option value="dark">Dark</option></select></div></div></details></div><details open class="tsd-accordion tsd-page-navigation"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>On This Page</h3></summary><div class="tsd-accordion-details"><details open class="tsd-accordion tsd-page-navigation-section"><summary class="tsd-accordion-summary" data-key="section-Properties"><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Properties</summary><div><a href="#interestearned" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>interest<wbr/>Earned</span></a><a href="#realtimeapy" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>realtime<wbr/>Apy</span></a><a href="#settings" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>settings</span></a><a href="#totalvalue" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>total<wbr/>Value</span></a></div></details></div></details></div><div class="site-menu"><nav class="tsd-navigation"><a href="../modules.html">solana-agent-kit</a><ul class="tsd-small-nested-navigation" id="tsd-nav-container"><li>Loading...</li></ul></nav></div></div></div><footer><p class="tsd-generator">Generated using <a href="https://typedoc.org/" target="_blank">TypeDoc</a></p></footer><div class="overlay"></div></body></html>


================================================
File: docs/interfaces/MintCollectionNFTResponse.html
================================================
<!DOCTYPE html><html class="default" lang="en" data-base=".."><head><meta charset="utf-8"/><meta http-equiv="x-ua-compatible" content="IE=edge"/><title>MintCollectionNFTResponse | solana-agent-kit</title><meta name="description" content="Documentation for solana-agent-kit"/><meta name="viewport" content="width=device-width, initial-scale=1"/><link rel="stylesheet" href="../assets/style.css"/><link rel="stylesheet" href="../assets/highlight.css"/><script defer src="../assets/main.js"></script><script async src="../assets/icons.js" id="tsd-icons-script"></script><script async src="../assets/search.js" id="tsd-search-script"></script><script async src="../assets/navigation.js" id="tsd-nav-script"></script></head><body><script>document.documentElement.dataset.theme = localStorage.getItem("tsd-theme") || "os";document.body.style.display="none";setTimeout(() => app?app.showPage():document.body.style.removeProperty("display"),500)</script><header class="tsd-page-toolbar"><div class="tsd-toolbar-contents container"><div class="table-cell" id="tsd-search"><div class="field"><label for="tsd-search-field" class="tsd-widget tsd-toolbar-icon search no-caption"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-search"></use></svg></label><input type="text" id="tsd-search-field" aria-label="Search"/></div><div class="field"><div id="tsd-toolbar-links"></div></div><ul class="results"><li class="state loading">Preparing search index...</li><li class="state failure">The search index is not available</li></ul><a href="../index.html" class="title">solana-agent-kit</a></div><div class="table-cell" id="tsd-widgets"><a href="#" class="tsd-widget tsd-toolbar-icon menu no-caption" data-toggle="menu" aria-label="Menu"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-menu"></use></svg></a></div></div></header><div class="container container-main"><div class="col-content"><div class="tsd-page-title"><ul class="tsd-breadcrumb"><li><a href="../modules.html">solana-agent-kit</a></li><li><a href="MintCollectionNFTResponse.html">MintCollectionNFTResponse</a></li></ul><h1>Interface MintCollectionNFTResponse</h1></div><div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">MintCollectionNFTResponse</span> <span class="tsd-signature-symbol">{</span><br/>    <a class="tsd-kind-property" href="MintCollectionNFTResponse.html#metadata">metadata</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">PublicKey</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="MintCollectionNFTResponse.html#mint">mint</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">PublicKey</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L34">src/types/index.ts:34</a></li></ul></aside><section class="tsd-panel-group tsd-index-group"><section class="tsd-panel tsd-index-panel"><details class="tsd-index-content tsd-accordion" open><summary class="tsd-accordion-summary tsd-index-summary"><h5 class="tsd-index-heading uppercase" role="button" aria-expanded="false" tabIndex="0"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-chevronSmall"></use></svg> Index</h5></summary><div class="tsd-accordion-details"><section class="tsd-index-section"><h3 class="tsd-index-heading">Properties</h3><div class="tsd-index-list"><a href="MintCollectionNFTResponse.html#metadata" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>metadata</span></a>
<a href="MintCollectionNFTResponse.html#mint" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>mint</span></a>
</div></section></div></details></section></section><details class="tsd-panel-group tsd-member-group tsd-accordion" open><summary class="tsd-accordion-summary" data-key="section-Properties"><h2><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg> Properties</h2></summary><section><section class="tsd-panel tsd-member"><a id="metadata" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>metadata</span><a href="#metadata" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">metadata</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">PublicKey</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L36">src/types/index.ts:36</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="mint" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>mint</span><a href="#mint" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">mint</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">PublicKey</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L35">src/types/index.ts:35</a></li></ul></aside></section></section></details></div><div class="col-sidebar"><div class="page-menu"><div class="tsd-navigation settings"><details class="tsd-accordion"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Settings</h3></summary><div class="tsd-accordion-details"><div class="tsd-filter-visibility"><span class="settings-label">Member Visibility</span><ul id="tsd-filter-options"><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-protected" name="protected"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Protected</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-inherited" name="inherited" checked/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Inherited</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-external" name="external"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>External</span></label></li></ul></div><div class="tsd-theme-toggle"><label class="settings-label" for="tsd-theme">Theme</label><select id="tsd-theme"><option value="os">OS</option><option value="light">Light</option><option value="dark">Dark</option></select></div></div></details></div><details open class="tsd-accordion tsd-page-navigation"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>On This Page</h3></summary><div class="tsd-accordion-details"><details open class="tsd-accordion tsd-page-navigation-section"><summary class="tsd-accordion-summary" data-key="section-Properties"><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Properties</summary><div><a href="#metadata" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>metadata</span></a><a href="#mint" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>mint</span></a></div></details></div></details></div><div class="site-menu"><nav class="tsd-navigation"><a href="../modules.html">solana-agent-kit</a><ul class="tsd-small-nested-navigation" id="tsd-nav-container"><li>Loading...</li></ul></nav></div></div></div><footer><p class="tsd-generator">Generated using <a href="https://typedoc.org/" target="_blank">TypeDoc</a></p></footer><div class="overlay"></div></body></html>


================================================
File: docs/interfaces/OrderParams.html
================================================
<!DOCTYPE html><html class="default" lang="en" data-base=".."><head><meta charset="utf-8"/><meta http-equiv="x-ua-compatible" content="IE=edge"/><title>OrderParams | solana-agent-kit</title><meta name="description" content="Documentation for solana-agent-kit"/><meta name="viewport" content="width=device-width, initial-scale=1"/><link rel="stylesheet" href="../assets/style.css"/><link rel="stylesheet" href="../assets/highlight.css"/><script defer src="../assets/main.js"></script><script async src="../assets/icons.js" id="tsd-icons-script"></script><script async src="../assets/search.js" id="tsd-search-script"></script><script async src="../assets/navigation.js" id="tsd-nav-script"></script></head><body><script>document.documentElement.dataset.theme = localStorage.getItem("tsd-theme") || "os";document.body.style.display="none";setTimeout(() => app?app.showPage():document.body.style.removeProperty("display"),500)</script><header class="tsd-page-toolbar"><div class="tsd-toolbar-contents container"><div class="table-cell" id="tsd-search"><div class="field"><label for="tsd-search-field" class="tsd-widget tsd-toolbar-icon search no-caption"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-search"></use></svg></label><input type="text" id="tsd-search-field" aria-label="Search"/></div><div class="field"><div id="tsd-toolbar-links"></div></div><ul class="results"><li class="state loading">Preparing search index...</li><li class="state failure">The search index is not available</li></ul><a href="../index.html" class="title">solana-agent-kit</a></div><div class="table-cell" id="tsd-widgets"><a href="#" class="tsd-widget tsd-toolbar-icon menu no-caption" data-toggle="menu" aria-label="Menu"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-menu"></use></svg></a></div></div></header><div class="container container-main"><div class="col-content"><div class="tsd-page-title"><ul class="tsd-breadcrumb"><li><a href="../modules.html">solana-agent-kit</a></li><li><a href="OrderParams.html">OrderParams</a></li></ul><h1>Interface OrderParams</h1></div><div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">OrderParams</span> <span class="tsd-signature-symbol">{</span><br/>    <a class="tsd-kind-property" href="OrderParams.html#price">price</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="OrderParams.html#quantity">quantity</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="OrderParams.html#side">side</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L212">src/types/index.ts:212</a></li></ul></aside><section class="tsd-panel-group tsd-index-group"><section class="tsd-panel tsd-index-panel"><details class="tsd-index-content tsd-accordion" open><summary class="tsd-accordion-summary tsd-index-summary"><h5 class="tsd-index-heading uppercase" role="button" aria-expanded="false" tabIndex="0"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-chevronSmall"></use></svg> Index</h5></summary><div class="tsd-accordion-details"><section class="tsd-index-section"><h3 class="tsd-index-heading">Properties</h3><div class="tsd-index-list"><a href="OrderParams.html#price" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>price</span></a>
<a href="OrderParams.html#quantity" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>quantity</span></a>
<a href="OrderParams.html#side" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>side</span></a>
</div></section></div></details></section></section><details class="tsd-panel-group tsd-member-group tsd-accordion" open><summary class="tsd-accordion-summary" data-key="section-Properties"><h2><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg> Properties</h2></summary><section><section class="tsd-panel tsd-member"><a id="price" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>price</span><a href="#price" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">price</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L215">src/types/index.ts:215</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="quantity" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>quantity</span><a href="#quantity" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">quantity</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L213">src/types/index.ts:213</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="side" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>side</span><a href="#side" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">side</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L214">src/types/index.ts:214</a></li></ul></aside></section></section></details></div><div class="col-sidebar"><div class="page-menu"><div class="tsd-navigation settings"><details class="tsd-accordion"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Settings</h3></summary><div class="tsd-accordion-details"><div class="tsd-filter-visibility"><span class="settings-label">Member Visibility</span><ul id="tsd-filter-options"><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-protected" name="protected"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Protected</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-inherited" name="inherited" checked/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Inherited</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-external" name="external"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>External</span></label></li></ul></div><div class="tsd-theme-toggle"><label class="settings-label" for="tsd-theme">Theme</label><select id="tsd-theme"><option value="os">OS</option><option value="light">Light</option><option value="dark">Dark</option></select></div></div></details></div><details open class="tsd-accordion tsd-page-navigation"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>On This Page</h3></summary><div class="tsd-accordion-details"><details open class="tsd-accordion tsd-page-navigation-section"><summary class="tsd-accordion-summary" data-key="section-Properties"><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Properties</summary><div><a href="#price" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>price</span></a><a href="#quantity" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>quantity</span></a><a href="#side" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>side</span></a></div></details></div></details></div><div class="site-menu"><nav class="tsd-navigation"><a href="../modules.html">solana-agent-kit</a><ul class="tsd-small-nested-navigation" id="tsd-nav-container"><li>Loading...</li></ul></nav></div></div></div><footer><p class="tsd-generator">Generated using <a href="https://typedoc.org/" target="_blank">TypeDoc</a></p></footer><div class="overlay"></div></body></html>


================================================
File: docs/interfaces/PriorityFeeResponse.html
================================================
<!DOCTYPE html><html class="default" lang="en" data-base=".."><head><meta charset="utf-8"/><meta http-equiv="x-ua-compatible" content="IE=edge"/><title>PriorityFeeResponse | solana-agent-kit</title><meta name="description" content="Documentation for solana-agent-kit"/><meta name="viewport" content="width=device-width, initial-scale=1"/><link rel="stylesheet" href="../assets/style.css"/><link rel="stylesheet" href="../assets/highlight.css"/><script defer src="../assets/main.js"></script><script async src="../assets/icons.js" id="tsd-icons-script"></script><script async src="../assets/search.js" id="tsd-search-script"></script><script async src="../assets/navigation.js" id="tsd-nav-script"></script></head><body><script>document.documentElement.dataset.theme = localStorage.getItem("tsd-theme") || "os";document.body.style.display="none";setTimeout(() => app?app.showPage():document.body.style.removeProperty("display"),500)</script><header class="tsd-page-toolbar"><div class="tsd-toolbar-contents container"><div class="table-cell" id="tsd-search"><div class="field"><label for="tsd-search-field" class="tsd-widget tsd-toolbar-icon search no-caption"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-search"></use></svg></label><input type="text" id="tsd-search-field" aria-label="Search"/></div><div class="field"><div id="tsd-toolbar-links"></div></div><ul class="results"><li class="state loading">Preparing search index...</li><li class="state failure">The search index is not available</li></ul><a href="../index.html" class="title">solana-agent-kit</a></div><div class="table-cell" id="tsd-widgets"><a href="#" class="tsd-widget tsd-toolbar-icon menu no-caption" data-toggle="menu" aria-label="Menu"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-menu"></use></svg></a></div></div></header><div class="container container-main"><div class="col-content"><div class="tsd-page-title"><ul class="tsd-breadcrumb"><li><a href="../modules.html">solana-agent-kit</a></li><li><a href="PriorityFeeResponse.html">PriorityFeeResponse</a></li></ul><h1>Interface PriorityFeeResponse</h1></div><div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">PriorityFeeResponse</span> <span class="tsd-signature-symbol">{</span><br/>    <a class="tsd-kind-property" href="PriorityFeeResponse.html#id">id</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="PriorityFeeResponse.html#jsonrpc">jsonrpc</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="PriorityFeeResponse.html#method">method</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="PriorityFeeResponse.html#params">params</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">{</span> <span class="tsd-kind-property">options</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">{</span> <span class="tsd-kind-property">priorityLevel</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">transaction</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">[]</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L257">src/types/index.ts:257</a></li></ul></aside><section class="tsd-panel-group tsd-index-group"><section class="tsd-panel tsd-index-panel"><details class="tsd-index-content tsd-accordion" open><summary class="tsd-accordion-summary tsd-index-summary"><h5 class="tsd-index-heading uppercase" role="button" aria-expanded="false" tabIndex="0"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-chevronSmall"></use></svg> Index</h5></summary><div class="tsd-accordion-details"><section class="tsd-index-section"><h3 class="tsd-index-heading">Properties</h3><div class="tsd-index-list"><a href="PriorityFeeResponse.html#id" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>id</span></a>
<a href="PriorityFeeResponse.html#jsonrpc" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>jsonrpc</span></a>
<a href="PriorityFeeResponse.html#method" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>method</span></a>
<a href="PriorityFeeResponse.html#params" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>params</span></a>
</div></section></div></details></section></section><details class="tsd-panel-group tsd-member-group tsd-accordion" open><summary class="tsd-accordion-summary" data-key="section-Properties"><h2><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg> Properties</h2></summary><section><section class="tsd-panel tsd-member"><a id="id" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>id</span><a href="#id" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">id</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L259">src/types/index.ts:259</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="jsonrpc" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>jsonrpc</span><a href="#jsonrpc" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">jsonrpc</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L258">src/types/index.ts:258</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="method" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>method</span><a href="#method" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">method</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L260">src/types/index.ts:260</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="params" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>params</span><a href="#params" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">params</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">{</span> <span class="tsd-kind-property">options</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">{</span> <span class="tsd-kind-property">priorityLevel</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">transaction</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">[]</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L261">src/types/index.ts:261</a></li></ul></aside></section></section></details></div><div class="col-sidebar"><div class="page-menu"><div class="tsd-navigation settings"><details class="tsd-accordion"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Settings</h3></summary><div class="tsd-accordion-details"><div class="tsd-filter-visibility"><span class="settings-label">Member Visibility</span><ul id="tsd-filter-options"><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-protected" name="protected"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Protected</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-inherited" name="inherited" checked/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Inherited</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-external" name="external"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>External</span></label></li></ul></div><div class="tsd-theme-toggle"><label class="settings-label" for="tsd-theme">Theme</label><select id="tsd-theme"><option value="os">OS</option><option value="light">Light</option><option value="dark">Dark</option></select></div></div></details></div><details open class="tsd-accordion tsd-page-navigation"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>On This Page</h3></summary><div class="tsd-accordion-details"><details open class="tsd-accordion tsd-page-navigation-section"><summary class="tsd-accordion-summary" data-key="section-Properties"><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Properties</summary><div><a href="#id" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>id</span></a><a href="#jsonrpc" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>jsonrpc</span></a><a href="#method" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>method</span></a><a href="#params" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>params</span></a></div></details></div></details></div><div class="site-menu"><nav class="tsd-navigation"><a href="../modules.html">solana-agent-kit</a><ul class="tsd-small-nested-navigation" id="tsd-nav-container"><li>Loading...</li></ul></nav></div></div></div><footer><p class="tsd-generator">Generated using <a href="https://typedoc.org/" target="_blank">TypeDoc</a></p></footer><div class="overlay"></div></body></html>


================================================
File: docs/interfaces/PumpFunTokenOptions.html
================================================
<!DOCTYPE html><html class="default" lang="en" data-base=".."><head><meta charset="utf-8"/><meta http-equiv="x-ua-compatible" content="IE=edge"/><title>PumpFunTokenOptions | solana-agent-kit</title><meta name="description" content="Documentation for solana-agent-kit"/><meta name="viewport" content="width=device-width, initial-scale=1"/><link rel="stylesheet" href="../assets/style.css"/><link rel="stylesheet" href="../assets/highlight.css"/><script defer src="../assets/main.js"></script><script async src="../assets/icons.js" id="tsd-icons-script"></script><script async src="../assets/search.js" id="tsd-search-script"></script><script async src="../assets/navigation.js" id="tsd-nav-script"></script></head><body><script>document.documentElement.dataset.theme = localStorage.getItem("tsd-theme") || "os";document.body.style.display="none";setTimeout(() => app?app.showPage():document.body.style.removeProperty("display"),500)</script><header class="tsd-page-toolbar"><div class="tsd-toolbar-contents container"><div class="table-cell" id="tsd-search"><div class="field"><label for="tsd-search-field" class="tsd-widget tsd-toolbar-icon search no-caption"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-search"></use></svg></label><input type="text" id="tsd-search-field" aria-label="Search"/></div><div class="field"><div id="tsd-toolbar-links"></div></div><ul class="results"><li class="state loading">Preparing search index...</li><li class="state failure">The search index is not available</li></ul><a href="../index.html" class="title">solana-agent-kit</a></div><div class="table-cell" id="tsd-widgets"><a href="#" class="tsd-widget tsd-toolbar-icon menu no-caption" data-toggle="menu" aria-label="Menu"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-menu"></use></svg></a></div></div></header><div class="container container-main"><div class="col-content"><div class="tsd-page-title"><ul class="tsd-breadcrumb"><li><a href="../modules.html">solana-agent-kit</a></li><li><a href="PumpFunTokenOptions.html">PumpFunTokenOptions</a></li></ul><h1>Interface PumpFunTokenOptions</h1></div><div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">PumpFunTokenOptions</span> <span class="tsd-signature-symbol">{</span><br/>    <a class="tsd-kind-property" href="PumpFunTokenOptions.html#initialliquiditysol">initialLiquiditySOL</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="PumpFunTokenOptions.html#priorityfee">priorityFee</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="PumpFunTokenOptions.html#slippagebps">slippageBps</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="PumpFunTokenOptions.html#telegram">telegram</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="PumpFunTokenOptions.html#twitter">twitter</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="PumpFunTokenOptions.html#website">website</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L39">src/types/index.ts:39</a></li></ul></aside><section class="tsd-panel-group tsd-index-group"><section class="tsd-panel tsd-index-panel"><details class="tsd-index-content tsd-accordion" open><summary class="tsd-accordion-summary tsd-index-summary"><h5 class="tsd-index-heading uppercase" role="button" aria-expanded="false" tabIndex="0"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-chevronSmall"></use></svg> Index</h5></summary><div class="tsd-accordion-details"><section class="tsd-index-section"><h3 class="tsd-index-heading">Properties</h3><div class="tsd-index-list"><a href="PumpFunTokenOptions.html#initialliquiditysol" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>initial<wbr/>LiquiditySOL?</span></a>
<a href="PumpFunTokenOptions.html#priorityfee" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>priority<wbr/>Fee?</span></a>
<a href="PumpFunTokenOptions.html#slippagebps" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>slippage<wbr/>Bps?</span></a>
<a href="PumpFunTokenOptions.html#telegram" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>telegram?</span></a>
<a href="PumpFunTokenOptions.html#twitter" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>twitter?</span></a>
<a href="PumpFunTokenOptions.html#website" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>website?</span></a>
</div></section></div></details></section></section><details class="tsd-panel-group tsd-member-group tsd-accordion" open><summary class="tsd-accordion-summary" data-key="section-Properties"><h2><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg> Properties</h2></summary><section><section class="tsd-panel tsd-member"><a id="initialliquiditysol" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><code class="tsd-tag">Optional</code><span>initial<wbr/>LiquiditySOL</span><a href="#initialliquiditysol" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">initialLiquiditySOL</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L43">src/types/index.ts:43</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="priorityfee" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><code class="tsd-tag">Optional</code><span>priority<wbr/>Fee</span><a href="#priorityfee" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">priorityFee</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L45">src/types/index.ts:45</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="slippagebps" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><code class="tsd-tag">Optional</code><span>slippage<wbr/>Bps</span><a href="#slippagebps" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">slippageBps</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">number</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L44">src/types/index.ts:44</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="telegram" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><code class="tsd-tag">Optional</code><span>telegram</span><a href="#telegram" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">telegram</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L41">src/types/index.ts:41</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="twitter" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><code class="tsd-tag">Optional</code><span>twitter</span><a href="#twitter" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">twitter</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L40">src/types/index.ts:40</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="website" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><code class="tsd-tag">Optional</code><span>website</span><a href="#website" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">website</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L42">src/types/index.ts:42</a></li></ul></aside></section></section></details></div><div class="col-sidebar"><div class="page-menu"><div class="tsd-navigation settings"><details class="tsd-accordion"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Settings</h3></summary><div class="tsd-accordion-details"><div class="tsd-filter-visibility"><span class="settings-label">Member Visibility</span><ul id="tsd-filter-options"><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-protected" name="protected"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Protected</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-inherited" name="inherited" checked/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Inherited</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-external" name="external"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>External</span></label></li></ul></div><div class="tsd-theme-toggle"><label class="settings-label" for="tsd-theme">Theme</label><select id="tsd-theme"><option value="os">OS</option><option value="light">Light</option><option value="dark">Dark</option></select></div></div></details></div><details open class="tsd-accordion tsd-page-navigation"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>On This Page</h3></summary><div class="tsd-accordion-details"><details open class="tsd-accordion tsd-page-navigation-section"><summary class="tsd-accordion-summary" data-key="section-Properties"><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Properties</summary><div><a href="#initialliquiditysol" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>initial<wbr/>LiquiditySOL</span></a><a href="#priorityfee" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>priority<wbr/>Fee</span></a><a href="#slippagebps" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>slippage<wbr/>Bps</span></a><a href="#telegram" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>telegram</span></a><a href="#twitter" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>twitter</span></a><a href="#website" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>website</span></a></div></details></div></details></div><div class="site-menu"><nav class="tsd-navigation"><a href="../modules.html">solana-agent-kit</a><ul class="tsd-small-nested-navigation" id="tsd-nav-container"><li>Loading...</li></ul></nav></div></div></div><footer><p class="tsd-generator">Generated using <a href="https://typedoc.org/" target="_blank">TypeDoc</a></p></footer><div class="overlay"></div></body></html>


================================================
File: docs/interfaces/PumpfunLaunchResponse.html
================================================
<!DOCTYPE html><html class="default" lang="en" data-base=".."><head><meta charset="utf-8"/><meta http-equiv="x-ua-compatible" content="IE=edge"/><title>PumpfunLaunchResponse | solana-agent-kit</title><meta name="description" content="Documentation for solana-agent-kit"/><meta name="viewport" content="width=device-width, initial-scale=1"/><link rel="stylesheet" href="../assets/style.css"/><link rel="stylesheet" href="../assets/highlight.css"/><script defer src="../assets/main.js"></script><script async src="../assets/icons.js" id="tsd-icons-script"></script><script async src="../assets/search.js" id="tsd-search-script"></script><script async src="../assets/navigation.js" id="tsd-nav-script"></script></head><body><script>document.documentElement.dataset.theme = localStorage.getItem("tsd-theme") || "os";document.body.style.display="none";setTimeout(() => app?app.showPage():document.body.style.removeProperty("display"),500)</script><header class="tsd-page-toolbar"><div class="tsd-toolbar-contents container"><div class="table-cell" id="tsd-search"><div class="field"><label for="tsd-search-field" class="tsd-widget tsd-toolbar-icon search no-caption"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-search"></use></svg></label><input type="text" id="tsd-search-field" aria-label="Search"/></div><div class="field"><div id="tsd-toolbar-links"></div></div><ul class="results"><li class="state loading">Preparing search index...</li><li class="state failure">The search index is not available</li></ul><a href="../index.html" class="title">solana-agent-kit</a></div><div class="table-cell" id="tsd-widgets"><a href="#" class="tsd-widget tsd-toolbar-icon menu no-caption" data-toggle="menu" aria-label="Menu"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-menu"></use></svg></a></div></div></header><div class="container container-main"><div class="col-content"><div class="tsd-page-title"><ul class="tsd-breadcrumb"><li><a href="../modules.html">solana-agent-kit</a></li><li><a href="PumpfunLaunchResponse.html">PumpfunLaunchResponse</a></li></ul><h1>Interface PumpfunLaunchResponse</h1></div><div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">PumpfunLaunchResponse</span> <span class="tsd-signature-symbol">{</span><br/>    <a class="tsd-kind-property" href="PumpfunLaunchResponse.html#error">error</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="PumpfunLaunchResponse.html#metadatauri">metadataUri</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="PumpfunLaunchResponse.html#mint">mint</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="PumpfunLaunchResponse.html#signature">signature</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L48">src/types/index.ts:48</a></li></ul></aside><section class="tsd-panel-group tsd-index-group"><section class="tsd-panel tsd-index-panel"><details class="tsd-index-content tsd-accordion" open><summary class="tsd-accordion-summary tsd-index-summary"><h5 class="tsd-index-heading uppercase" role="button" aria-expanded="false" tabIndex="0"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-chevronSmall"></use></svg> Index</h5></summary><div class="tsd-accordion-details"><section class="tsd-index-section"><h3 class="tsd-index-heading">Properties</h3><div class="tsd-index-list"><a href="PumpfunLaunchResponse.html#error" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>error?</span></a>
<a href="PumpfunLaunchResponse.html#metadatauri" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>metadata<wbr/>Uri?</span></a>
<a href="PumpfunLaunchResponse.html#mint" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>mint</span></a>
<a href="PumpfunLaunchResponse.html#signature" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>signature</span></a>
</div></section></div></details></section></section><details class="tsd-panel-group tsd-member-group tsd-accordion" open><summary class="tsd-accordion-summary" data-key="section-Properties"><h2><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg> Properties</h2></summary><section><section class="tsd-panel tsd-member"><a id="error" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><code class="tsd-tag">Optional</code><span>error</span><a href="#error" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">error</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L52">src/types/index.ts:52</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="metadatauri" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><code class="tsd-tag">Optional</code><span>metadata<wbr/>Uri</span><a href="#metadatauri" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">metadataUri</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L51">src/types/index.ts:51</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="mint" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>mint</span><a href="#mint" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">mint</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L50">src/types/index.ts:50</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="signature" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>signature</span><a href="#signature" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">signature</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L49">src/types/index.ts:49</a></li></ul></aside></section></section></details></div><div class="col-sidebar"><div class="page-menu"><div class="tsd-navigation settings"><details class="tsd-accordion"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Settings</h3></summary><div class="tsd-accordion-details"><div class="tsd-filter-visibility"><span class="settings-label">Member Visibility</span><ul id="tsd-filter-options"><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-protected" name="protected"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Protected</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-inherited" name="inherited" checked/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Inherited</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-external" name="external"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>External</span></label></li></ul></div><div class="tsd-theme-toggle"><label class="settings-label" for="tsd-theme">Theme</label><select id="tsd-theme"><option value="os">OS</option><option value="light">Light</option><option value="dark">Dark</option></select></div></div></details></div><details open class="tsd-accordion tsd-page-navigation"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>On This Page</h3></summary><div class="tsd-accordion-details"><details open class="tsd-accordion tsd-page-navigation-section"><summary class="tsd-accordion-summary" data-key="section-Properties"><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Properties</summary><div><a href="#error" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>error</span></a><a href="#metadatauri" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>metadata<wbr/>Uri</span></a><a href="#mint" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>mint</span></a><a href="#signature" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>signature</span></a></div></details></div></details></div><div class="site-menu"><nav class="tsd-navigation"><a href="../modules.html">solana-agent-kit</a><ul class="tsd-small-nested-navigation" id="tsd-nav-container"><li>Loading...</li></ul></nav></div></div></div><footer><p class="tsd-generator">Generated using <a href="https://typedoc.org/" target="_blank">TypeDoc</a></p></footer><div class="overlay"></div></body></html>


================================================
File: docs/interfaces/PythFetchPriceResponse.html
================================================
<!DOCTYPE html><html class="default" lang="en" data-base=".."><head><meta charset="utf-8"/><meta http-equiv="x-ua-compatible" content="IE=edge"/><title>PythFetchPriceResponse | solana-agent-kit</title><meta name="description" content="Documentation for solana-agent-kit"/><meta name="viewport" content="width=device-width, initial-scale=1"/><link rel="stylesheet" href="../assets/style.css"/><link rel="stylesheet" href="../assets/highlight.css"/><script defer src="../assets/main.js"></script><script async src="../assets/icons.js" id="tsd-icons-script"></script><script async src="../assets/search.js" id="tsd-search-script"></script><script async src="../assets/navigation.js" id="tsd-nav-script"></script></head><body><script>document.documentElement.dataset.theme = localStorage.getItem("tsd-theme") || "os";document.body.style.display="none";setTimeout(() => app?app.showPage():document.body.style.removeProperty("display"),500)</script><header class="tsd-page-toolbar"><div class="tsd-toolbar-contents container"><div class="table-cell" id="tsd-search"><div class="field"><label for="tsd-search-field" class="tsd-widget tsd-toolbar-icon search no-caption"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-search"></use></svg></label><input type="text" id="tsd-search-field" aria-label="Search"/></div><div class="field"><div id="tsd-toolbar-links"></div></div><ul class="results"><li class="state loading">Preparing search index...</li><li class="state failure">The search index is not available</li></ul><a href="../index.html" class="title">solana-agent-kit</a></div><div class="table-cell" id="tsd-widgets"><a href="#" class="tsd-widget tsd-toolbar-icon menu no-caption" data-toggle="menu" aria-label="Menu"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-menu"></use></svg></a></div></div></header><div class="container container-main"><div class="col-content"><div class="tsd-page-title"><ul class="tsd-breadcrumb"><li><a href="../modules.html">solana-agent-kit</a></li><li><a href="PythFetchPriceResponse.html">PythFetchPriceResponse</a></li></ul><h1>Interface PythFetchPriceResponse</h1></div><div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">PythFetchPriceResponse</span> <span class="tsd-signature-symbol">{</span><br/>    <a class="tsd-kind-property" href="PythFetchPriceResponse.html#code">code</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="PythFetchPriceResponse.html#message">message</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="PythFetchPriceResponse.html#price">price</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="PythFetchPriceResponse.html#pricefeedid">priceFeedID</a><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="PythFetchPriceResponse.html#status">status</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;success&quot;</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;error&quot;</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="PythFetchPriceResponse.html#tokensymbol">tokenSymbol</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L94">src/types/index.ts:94</a></li></ul></aside><section class="tsd-panel-group tsd-index-group"><section class="tsd-panel tsd-index-panel"><details class="tsd-index-content tsd-accordion" open><summary class="tsd-accordion-summary tsd-index-summary"><h5 class="tsd-index-heading uppercase" role="button" aria-expanded="false" tabIndex="0"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-chevronSmall"></use></svg> Index</h5></summary><div class="tsd-accordion-details"><section class="tsd-index-section"><h3 class="tsd-index-heading">Properties</h3><div class="tsd-index-list"><a href="PythFetchPriceResponse.html#code" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>code?</span></a>
<a href="PythFetchPriceResponse.html#message" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>message?</span></a>
<a href="PythFetchPriceResponse.html#price" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>price?</span></a>
<a href="PythFetchPriceResponse.html#pricefeedid" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>price<wbr/>FeedID?</span></a>
<a href="PythFetchPriceResponse.html#status" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>status</span></a>
<a href="PythFetchPriceResponse.html#tokensymbol" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>token<wbr/>Symbol</span></a>
</div></section></div></details></section></section><details class="tsd-panel-group tsd-member-group tsd-accordion" open><summary class="tsd-accordion-summary" data-key="section-Properties"><h2><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg> Properties</h2></summary><section><section class="tsd-panel tsd-member"><a id="code" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><code class="tsd-tag">Optional</code><span>code</span><a href="#code" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">code</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L100">src/types/index.ts:100</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="message" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><code class="tsd-tag">Optional</code><span>message</span><a href="#message" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">message</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L99">src/types/index.ts:99</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="price" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><code class="tsd-tag">Optional</code><span>price</span><a href="#price" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">price</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L98">src/types/index.ts:98</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="pricefeedid" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><code class="tsd-tag">Optional</code><span>price<wbr/>FeedID</span><a href="#pricefeedid" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">priceFeedID</span><span class="tsd-signature-symbol">?:</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L97">src/types/index.ts:97</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="status" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>status</span><a href="#status" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">status</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">&quot;success&quot;</span> <span class="tsd-signature-symbol">|</span> <span class="tsd-signature-type">&quot;error&quot;</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L95">src/types/index.ts:95</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="tokensymbol" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>token<wbr/>Symbol</span><a href="#tokensymbol" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">tokenSymbol</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L96">src/types/index.ts:96</a></li></ul></aside></section></section></details></div><div class="col-sidebar"><div class="page-menu"><div class="tsd-navigation settings"><details class="tsd-accordion"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Settings</h3></summary><div class="tsd-accordion-details"><div class="tsd-filter-visibility"><span class="settings-label">Member Visibility</span><ul id="tsd-filter-options"><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-protected" name="protected"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Protected</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-inherited" name="inherited" checked/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Inherited</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-external" name="external"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>External</span></label></li></ul></div><div class="tsd-theme-toggle"><label class="settings-label" for="tsd-theme">Theme</label><select id="tsd-theme"><option value="os">OS</option><option value="light">Light</option><option value="dark">Dark</option></select></div></div></details></div><details open class="tsd-accordion tsd-page-navigation"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>On This Page</h3></summary><div class="tsd-accordion-details"><details open class="tsd-accordion tsd-page-navigation-section"><summary class="tsd-accordion-summary" data-key="section-Properties"><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Properties</summary><div><a href="#code" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>code</span></a><a href="#message" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>message</span></a><a href="#price" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>price</span></a><a href="#pricefeedid" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>price<wbr/>FeedID</span></a><a href="#status" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>status</span></a><a href="#tokensymbol" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>token<wbr/>Symbol</span></a></div></details></div></details></div><div class="site-menu"><nav class="tsd-navigation"><a href="../modules.html">solana-agent-kit</a><ul class="tsd-small-nested-navigation" id="tsd-nav-container"><li>Loading...</li></ul></nav></div></div></div><footer><p class="tsd-generator">Generated using <a href="https://typedoc.org/" target="_blank">TypeDoc</a></p></footer><div class="overlay"></div></body></html>


================================================
File: docs/interfaces/PythPriceFeedIDItem.html
================================================
<!DOCTYPE html><html class="default" lang="en" data-base=".."><head><meta charset="utf-8"/><meta http-equiv="x-ua-compatible" content="IE=edge"/><title>PythPriceFeedIDItem | solana-agent-kit</title><meta name="description" content="Documentation for solana-agent-kit"/><meta name="viewport" content="width=device-width, initial-scale=1"/><link rel="stylesheet" href="../assets/style.css"/><link rel="stylesheet" href="../assets/highlight.css"/><script defer src="../assets/main.js"></script><script async src="../assets/icons.js" id="tsd-icons-script"></script><script async src="../assets/search.js" id="tsd-search-script"></script><script async src="../assets/navigation.js" id="tsd-nav-script"></script></head><body><script>document.documentElement.dataset.theme = localStorage.getItem("tsd-theme") || "os";document.body.style.display="none";setTimeout(() => app?app.showPage():document.body.style.removeProperty("display"),500)</script><header class="tsd-page-toolbar"><div class="tsd-toolbar-contents container"><div class="table-cell" id="tsd-search"><div class="field"><label for="tsd-search-field" class="tsd-widget tsd-toolbar-icon search no-caption"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-search"></use></svg></label><input type="text" id="tsd-search-field" aria-label="Search"/></div><div class="field"><div id="tsd-toolbar-links"></div></div><ul class="results"><li class="state loading">Preparing search index...</li><li class="state failure">The search index is not available</li></ul><a href="../index.html" class="title">solana-agent-kit</a></div><div class="table-cell" id="tsd-widgets"><a href="#" class="tsd-widget tsd-toolbar-icon menu no-caption" data-toggle="menu" aria-label="Menu"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-menu"></use></svg></a></div></div></header><div class="container container-main"><div class="col-content"><div class="tsd-page-title"><ul class="tsd-breadcrumb"><li><a href="../modules.html">solana-agent-kit</a></li><li><a href="PythPriceFeedIDItem.html">PythPriceFeedIDItem</a></li></ul><h1>Interface PythPriceFeedIDItem</h1></div><div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">PythPriceFeedIDItem</span> <span class="tsd-signature-symbol">{</span><br/>    <a class="tsd-kind-property" href="PythPriceFeedIDItem.html#attributes">attributes</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">{</span> <span class="tsd-kind-property">asset_type</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">base</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="PythPriceFeedIDItem.html#id">id</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L175">src/types/index.ts:175</a></li></ul></aside><section class="tsd-panel-group tsd-index-group"><section class="tsd-panel tsd-index-panel"><details class="tsd-index-content tsd-accordion" open><summary class="tsd-accordion-summary tsd-index-summary"><h5 class="tsd-index-heading uppercase" role="button" aria-expanded="false" tabIndex="0"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-chevronSmall"></use></svg> Index</h5></summary><div class="tsd-accordion-details"><section class="tsd-index-section"><h3 class="tsd-index-heading">Properties</h3><div class="tsd-index-list"><a href="PythPriceFeedIDItem.html#attributes" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>attributes</span></a>
<a href="PythPriceFeedIDItem.html#id" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>id</span></a>
</div></section></div></details></section></section><details class="tsd-panel-group tsd-member-group tsd-accordion" open><summary class="tsd-accordion-summary" data-key="section-Properties"><h2><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg> Properties</h2></summary><section><section class="tsd-panel tsd-member"><a id="attributes" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>attributes</span><a href="#attributes" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">attributes</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">{</span> <span class="tsd-kind-property">asset_type</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">base</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L177">src/types/index.ts:177</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="id" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>id</span><a href="#id" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">id</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L176">src/types/index.ts:176</a></li></ul></aside></section></section></details></div><div class="col-sidebar"><div class="page-menu"><div class="tsd-navigation settings"><details class="tsd-accordion"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Settings</h3></summary><div class="tsd-accordion-details"><div class="tsd-filter-visibility"><span class="settings-label">Member Visibility</span><ul id="tsd-filter-options"><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-protected" name="protected"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Protected</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-inherited" name="inherited" checked/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Inherited</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-external" name="external"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>External</span></label></li></ul></div><div class="tsd-theme-toggle"><label class="settings-label" for="tsd-theme">Theme</label><select id="tsd-theme"><option value="os">OS</option><option value="light">Light</option><option value="dark">Dark</option></select></div></div></details></div><details open class="tsd-accordion tsd-page-navigation"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>On This Page</h3></summary><div class="tsd-accordion-details"><details open class="tsd-accordion tsd-page-navigation-section"><summary class="tsd-accordion-summary" data-key="section-Properties"><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Properties</summary><div><a href="#attributes" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>attributes</span></a><a href="#id" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>id</span></a></div></details></div></details></div><div class="site-menu"><nav class="tsd-navigation"><a href="../modules.html">solana-agent-kit</a><ul class="tsd-small-nested-navigation" id="tsd-nav-container"><li>Loading...</li></ul></nav></div></div></div><footer><p class="tsd-generator">Generated using <a href="https://typedoc.org/" target="_blank">TypeDoc</a></p></footer><div class="overlay"></div></body></html>


================================================
File: docs/interfaces/PythPriceItem.html
================================================
<!DOCTYPE html><html class="default" lang="en" data-base=".."><head><meta charset="utf-8"/><meta http-equiv="x-ua-compatible" content="IE=edge"/><title>PythPriceItem | solana-agent-kit</title><meta name="description" content="Documentation for solana-agent-kit"/><meta name="viewport" content="width=device-width, initial-scale=1"/><link rel="stylesheet" href="../assets/style.css"/><link rel="stylesheet" href="../assets/highlight.css"/><script defer src="../assets/main.js"></script><script async src="../assets/icons.js" id="tsd-icons-script"></script><script async src="../assets/search.js" id="tsd-search-script"></script><script async src="../assets/navigation.js" id="tsd-nav-script"></script></head><body><script>document.documentElement.dataset.theme = localStorage.getItem("tsd-theme") || "os";document.body.style.display="none";setTimeout(() => app?app.showPage():document.body.style.removeProperty("display"),500)</script><header class="tsd-page-toolbar"><div class="tsd-toolbar-contents container"><div class="table-cell" id="tsd-search"><div class="field"><label for="tsd-search-field" class="tsd-widget tsd-toolbar-icon search no-caption"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-search"></use></svg></label><input type="text" id="tsd-search-field" aria-label="Search"/></div><div class="field"><div id="tsd-toolbar-links"></div></div><ul class="results"><li class="state loading">Preparing search index...</li><li class="state failure">The search index is not available</li></ul><a href="../index.html" class="title">solana-agent-kit</a></div><div class="table-cell" id="tsd-widgets"><a href="#" class="tsd-widget tsd-toolbar-icon menu no-caption" data-toggle="menu" aria-label="Menu"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-menu"></use></svg></a></div></div></header><div class="container container-main"><div class="col-content"><div class="tsd-page-title"><ul class="tsd-breadcrumb"><li><a href="../modules.html">solana-agent-kit</a></li><li><a href="PythPriceItem.html">PythPriceItem</a></li></ul><h1>Interface PythPriceItem</h1></div><div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">PythPriceItem</span> <span class="tsd-signature-symbol">{</span><br/>    <a class="tsd-kind-property" href="PythPriceItem.html#binary">binary</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">{</span> <span class="tsd-kind-property">data</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">[]</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">encoding</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="PythPriceItem.html#parsed">parsed</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">[</span><br/>        <span class="tsd-signature-symbol">{</span><br/>            <span class="tsd-kind-property">ema_price</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">{</span><br/>                <span class="tsd-kind-property">conf</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>                <span class="tsd-kind-property">expo</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>                <span class="tsd-kind-property">price</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>                <span class="tsd-kind-property">publish_time</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>            <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>            <span class="tsd-kind-property">id</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>            <span class="tsd-kind-property">metadata</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">{</span><br/>                <span class="tsd-kind-property">prev_publish_time</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>                <span class="tsd-kind-property">proof_available_time</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>                <span class="tsd-kind-property">slot</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>            <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>            <span class="tsd-kind-property">price</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">{</span><br/>                <span class="tsd-kind-property">conf</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>                <span class="tsd-kind-property">expo</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>                <span class="tsd-kind-property">price</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>                <span class="tsd-kind-property">publish_time</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>            <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>        <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">[]</span><span class="tsd-signature-symbol">,</span><br/>    <span class="tsd-signature-symbol">]</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L183">src/types/index.ts:183</a></li></ul></aside><section class="tsd-panel-group tsd-index-group"><section class="tsd-panel tsd-index-panel"><details class="tsd-index-content tsd-accordion" open><summary class="tsd-accordion-summary tsd-index-summary"><h5 class="tsd-index-heading uppercase" role="button" aria-expanded="false" tabIndex="0"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-chevronSmall"></use></svg> Index</h5></summary><div class="tsd-accordion-details"><section class="tsd-index-section"><h3 class="tsd-index-heading">Properties</h3><div class="tsd-index-list"><a href="PythPriceItem.html#binary" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>binary</span></a>
<a href="PythPriceItem.html#parsed" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>parsed</span></a>
</div></section></div></details></section></section><details class="tsd-panel-group tsd-member-group tsd-accordion" open><summary class="tsd-accordion-summary" data-key="section-Properties"><h2><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg> Properties</h2></summary><section><section class="tsd-panel tsd-member"><a id="binary" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>binary</span><a href="#binary" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">binary</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">{</span> <span class="tsd-kind-property">data</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">[]</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">encoding</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span> <span class="tsd-signature-symbol">}</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L184">src/types/index.ts:184</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="parsed" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>parsed</span><a href="#parsed" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">parsed</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">[</span><br/>    <span class="tsd-signature-symbol">{</span><br/>        <span class="tsd-kind-property">ema_price</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">{</span><br/>            <span class="tsd-kind-property">conf</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>            <span class="tsd-kind-property">expo</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>            <span class="tsd-kind-property">price</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>            <span class="tsd-kind-property">publish_time</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>        <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>        <span class="tsd-kind-property">id</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>        <span class="tsd-kind-property">metadata</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">{</span><br/>            <span class="tsd-kind-property">prev_publish_time</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>            <span class="tsd-kind-property">proof_available_time</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>            <span class="tsd-kind-property">slot</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>        <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>        <span class="tsd-kind-property">price</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">{</span> <span class="tsd-kind-property">conf</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">expo</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">price</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">publish_time</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">[]</span><span class="tsd-signature-symbol">,</span><br/><span class="tsd-signature-symbol">]</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L188">src/types/index.ts:188</a></li></ul></aside></section></section></details></div><div class="col-sidebar"><div class="page-menu"><div class="tsd-navigation settings"><details class="tsd-accordion"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Settings</h3></summary><div class="tsd-accordion-details"><div class="tsd-filter-visibility"><span class="settings-label">Member Visibility</span><ul id="tsd-filter-options"><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-protected" name="protected"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Protected</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-inherited" name="inherited" checked/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Inherited</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-external" name="external"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>External</span></label></li></ul></div><div class="tsd-theme-toggle"><label class="settings-label" for="tsd-theme">Theme</label><select id="tsd-theme"><option value="os">OS</option><option value="light">Light</option><option value="dark">Dark</option></select></div></div></details></div><details open class="tsd-accordion tsd-page-navigation"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>On This Page</h3></summary><div class="tsd-accordion-details"><details open class="tsd-accordion tsd-page-navigation-section"><summary class="tsd-accordion-summary" data-key="section-Properties"><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Properties</summary><div><a href="#binary" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>binary</span></a><a href="#parsed" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>parsed</span></a></div></details></div></details></div><div class="site-menu"><nav class="tsd-navigation"><a href="../modules.html">solana-agent-kit</a><ul class="tsd-small-nested-navigation" id="tsd-nav-container"><li>Loading...</li></ul></nav></div></div></div><footer><p class="tsd-generator">Generated using <a href="https://typedoc.org/" target="_blank">TypeDoc</a></p></footer><div class="overlay"></div></body></html>


================================================
File: docs/interfaces/TokenCheck.html
================================================
<!DOCTYPE html><html class="default" lang="en" data-base=".."><head><meta charset="utf-8"/><meta http-equiv="x-ua-compatible" content="IE=edge"/><title>TokenCheck | solana-agent-kit</title><meta name="description" content="Documentation for solana-agent-kit"/><meta name="viewport" content="width=device-width, initial-scale=1"/><link rel="stylesheet" href="../assets/style.css"/><link rel="stylesheet" href="../assets/highlight.css"/><script defer src="../assets/main.js"></script><script async src="../assets/icons.js" id="tsd-icons-script"></script><script async src="../assets/search.js" id="tsd-search-script"></script><script async src="../assets/navigation.js" id="tsd-nav-script"></script></head><body><script>document.documentElement.dataset.theme = localStorage.getItem("tsd-theme") || "os";document.body.style.display="none";setTimeout(() => app?app.showPage():document.body.style.removeProperty("display"),500)</script><header class="tsd-page-toolbar"><div class="tsd-toolbar-contents container"><div class="table-cell" id="tsd-search"><div class="field"><label for="tsd-search-field" class="tsd-widget tsd-toolbar-icon search no-caption"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-search"></use></svg></label><input type="text" id="tsd-search-field" aria-label="Search"/></div><div class="field"><div id="tsd-toolbar-links"></div></div><ul class="results"><li class="state loading">Preparing search index...</li><li class="state failure">The search index is not available</li></ul><a href="../index.html" class="title">solana-agent-kit</a></div><div class="table-cell" id="tsd-widgets"><a href="#" class="tsd-widget tsd-toolbar-icon menu no-caption" data-toggle="menu" aria-label="Menu"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-menu"></use></svg></a></div></div></header><div class="container container-main"><div class="col-content"><div class="tsd-page-title"><ul class="tsd-breadcrumb"><li><a href="../modules.html">solana-agent-kit</a></li><li><a href="TokenCheck.html">TokenCheck</a></li></ul><h1>Interface TokenCheck</h1></div><div class="tsd-signature"><span class="tsd-signature-keyword">interface</span> <span class="tsd-kind-interface">TokenCheck</span> <span class="tsd-signature-symbol">{</span><br/>    <a class="tsd-kind-property" href="TokenCheck.html#risks">risks</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">{</span><br/>        <span class="tsd-kind-property">description</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>        <span class="tsd-kind-property">level</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>        <span class="tsd-kind-property">name</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>        <span class="tsd-kind-property">score</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">[]</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="TokenCheck.html#score">score</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="TokenCheck.html#tokenprogram">tokenProgram</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/>    <a class="tsd-kind-property" href="TokenCheck.html#tokentype">tokenType</a><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L163">src/types/index.ts:163</a></li></ul></aside><section class="tsd-panel-group tsd-index-group"><section class="tsd-panel tsd-index-panel"><details class="tsd-index-content tsd-accordion" open><summary class="tsd-accordion-summary tsd-index-summary"><h5 class="tsd-index-heading uppercase" role="button" aria-expanded="false" tabIndex="0"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-chevronSmall"></use></svg> Index</h5></summary><div class="tsd-accordion-details"><section class="tsd-index-section"><h3 class="tsd-index-heading">Properties</h3><div class="tsd-index-list"><a href="TokenCheck.html#risks" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>risks</span></a>
<a href="TokenCheck.html#score" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>score</span></a>
<a href="TokenCheck.html#tokenprogram" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>token<wbr/>Program</span></a>
<a href="TokenCheck.html#tokentype" class="tsd-index-link"><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>token<wbr/>Type</span></a>
</div></section></div></details></section></section><details class="tsd-panel-group tsd-member-group tsd-accordion" open><summary class="tsd-accordion-summary" data-key="section-Properties"><h2><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg> Properties</h2></summary><section><section class="tsd-panel tsd-member"><a id="risks" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>risks</span><a href="#risks" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">risks</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">{</span> <span class="tsd-kind-property">description</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">level</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">name</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">;</span> <span class="tsd-kind-property">score</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span> <span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol">[]</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L166">src/types/index.ts:166</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="score" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>score</span><a href="#score" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">score</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">number</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L172">src/types/index.ts:172</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="tokenprogram" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>token<wbr/>Program</span><a href="#tokenprogram" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">tokenProgram</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L164">src/types/index.ts:164</a></li></ul></aside></section><section class="tsd-panel tsd-member"><a id="tokentype" class="tsd-anchor"></a><h3 class="tsd-anchor-link"><span>token<wbr/>Type</span><a href="#tokentype" aria-label="Permalink" class="tsd-anchor-icon"><svg viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-anchor"></use></svg></a></h3><div class="tsd-signature"><span class="tsd-kind-property">tokenType</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">string</span></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L165">src/types/index.ts:165</a></li></ul></aside></section></section></details></div><div class="col-sidebar"><div class="page-menu"><div class="tsd-navigation settings"><details class="tsd-accordion"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Settings</h3></summary><div class="tsd-accordion-details"><div class="tsd-filter-visibility"><span class="settings-label">Member Visibility</span><ul id="tsd-filter-options"><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-protected" name="protected"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Protected</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-inherited" name="inherited" checked/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Inherited</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-external" name="external"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>External</span></label></li></ul></div><div class="tsd-theme-toggle"><label class="settings-label" for="tsd-theme">Theme</label><select id="tsd-theme"><option value="os">OS</option><option value="light">Light</option><option value="dark">Dark</option></select></div></div></details></div><details open class="tsd-accordion tsd-page-navigation"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>On This Page</h3></summary><div class="tsd-accordion-details"><details open class="tsd-accordion tsd-page-navigation-section"><summary class="tsd-accordion-summary" data-key="section-Properties"><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Properties</summary><div><a href="#risks" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>risks</span></a><a href="#score" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>score</span></a><a href="#tokenprogram" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>token<wbr/>Program</span></a><a href="#tokentype" class=""><svg class="tsd-kind-icon" viewBox="0 0 24 24"><use href="../assets/icons.svg#icon-1024"></use></svg><span>token<wbr/>Type</span></a></div></details></div></details></div><div class="site-menu"><nav class="tsd-navigation"><a href="../modules.html">solana-agent-kit</a><ul class="tsd-small-nested-navigation" id="tsd-nav-container"><li>Loading...</li></ul></nav></div></div></div><footer><p class="tsd-generator">Generated using <a href="https://typedoc.org/" target="_blank">TypeDoc</a></p></footer><div class="overlay"></div></body></html>


================================================
File: docs/media/CONTRIBUTING.md
================================================
# Contributing to Solana Agent Kit

First off, thank you for considering contributing to Solana Agent Kit! 🎉 Your contributions are **greatly appreciated**.

## Table of Contents

- [Contributing to Solana Agent Kit](#contributing-to-solana-agent-kit)
  - [Table of Contents](#table-of-contents)
  - [Code of Conduct](#code-of-conduct)
  - [How Can I Contribute?](#how-can-i-contribute)
    - [Reporting Bugs](#reporting-bugs)
    - [Suggesting Enhancements](#suggesting-enhancements)
    - [Your First Code Contribution](#your-first-code-contribution)
    - [Pull Requests](#pull-requests)
  - [Style Guides](#style-guides)
    - [Code Style](#code-style)
    - [Commit Messages](#commit-messages)
    - [Naming Conventions](#naming-conventions)
  - [Development Setup](#development-setup)
    - [Prerequisites](#prerequisites)
    - [Installation](#installation)
    - [Building the Project](#building-the-project)
    - [Running Tests](#running-tests)
    - [Generating Documentation](#generating-documentation)
  - [Security](#security)
  - [License](#license)

## Code of Conduct

This project adheres to the [Contributor Covenant Code of Conduct](https://www.contributor-covenant.org/version/2/0/code_of_conduct/). By participating, you are expected to uphold this code. Please report unacceptable behavior to [aryan@sendai.fun](mailto:aryan@sendai.fun).

## How Can I Contribute?

### Reporting Bugs

**Great**! Opening an issue is the best way to help us improve. Here's how you can report a bug:

1. **Search** the [existing issues](https://github.com/sendaifun/solana-agent-kit/issues) to make sure it hasn't been reported.
2. **Open a new issue** and fill out the template with as much information as possible.
3. **Provide reproduction steps** if applicable.

### Suggesting Enhancements

We welcome your ideas for improving Solana Agent Kit! To suggest an enhancement:

1. **Search** the [existing issues](https://github.com/sendaifun/solana-agent-kit/issues) to see if it's already been suggested.
2. **Open a new issue** and describe your idea in detail.

### Your First Code Contribution

Unsure where to start? You can help out by:

- Fixing simple bugs.
- Improving documentation.
- Adding tests.

Check out the [Good First Issues](https://github.com/sendaifun/solana-agent-kit/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22) to get started!

### Pull Requests

1. **Fork** the repository.
2. **Create** a new branch for your feature or bugfix.
   ```bash
   git checkout -b feature/your-feature-name
   ```
3. **Commit** your changes with clear and descriptive messages.
4. **Push** to your fork.
   ```bash
   git push origin feature/your-feature-name
   ```
5. **Open a Pull Request** against the `main` branch of this repository.

## Style Guides

### Code Style

- **Language**: TypeScript
- **Formatting**: Follow the existing codebase formatting. Consider using [Prettier](https://prettier.io/) for consistent code formatting.
- **Code Quality**: Adhere to the code quality rules defined in `.eslintrc`. Ensure all checks pass before submitting a PR.

### Commit Messages

Use [Conventional Commits](https://www.conventionalcommits.org/en/v1.0.0/) for your commit messages. Examples:

- `feat: add ability to deploy new SPL token`
- `fix: handle edge case when deploying collection`
- `docs: update README with new usage examples`

### Naming Conventions

- **Variables and Functions**: `camelCase`
- **Classes and Types**: `PascalCase`
- **Constants**: `UPPER_SNAKE_CASE`

## Development Setup

### Prerequisites

- **Node.js**: v23.x or higher
- **npm**: v10.x or higher
- **Git**: Installed and configured

### Installation

1. **Clone** the repository:
   ```bash
   git clone https://github.com/yourusername/solana-agent-kit.git
   ```
2. **Navigate** to the project directory:
   ```bash
   cd solana-agent-kit
   ```
3. **Install** dependencies:
   ```bash
   pnpm install
   ```

### Building the Project

To compile the TypeScript code:

```bash
pnpm run build
```

### Running Tests

To execute the test suite:

```bash
pnpm run test
```

### Generating Documentation

To generate the project documentation using TypeDoc:

```bash
npm run docs
```

The documentation will be available in the `docs/` directory.

## Security

This toolkit handles sensitive information such as private keys and API keys. **Ensure you never commit `.env` files or any sensitive data**. Review the `.gitignore` to confirm that sensitive files are excluded.

For security vulnerabilities, please follow the [responsible disclosure](mailto:aryan@sendai.fun) process.

## License

This project is licensed under the [ISC License](LICENSE).

---


================================================
File: docs/types/Handler.html
================================================
<!DOCTYPE html><html class="default" lang="en" data-base=".."><head><meta charset="utf-8"/><meta http-equiv="x-ua-compatible" content="IE=edge"/><title>Handler | solana-agent-kit</title><meta name="description" content="Documentation for solana-agent-kit"/><meta name="viewport" content="width=device-width, initial-scale=1"/><link rel="stylesheet" href="../assets/style.css"/><link rel="stylesheet" href="../assets/highlight.css"/><script defer src="../assets/main.js"></script><script async src="../assets/icons.js" id="tsd-icons-script"></script><script async src="../assets/search.js" id="tsd-search-script"></script><script async src="../assets/navigation.js" id="tsd-nav-script"></script></head><body><script>document.documentElement.dataset.theme = localStorage.getItem("tsd-theme") || "os";document.body.style.display="none";setTimeout(() => app?app.showPage():document.body.style.removeProperty("display"),500)</script><header class="tsd-page-toolbar"><div class="tsd-toolbar-contents container"><div class="table-cell" id="tsd-search"><div class="field"><label for="tsd-search-field" class="tsd-widget tsd-toolbar-icon search no-caption"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-search"></use></svg></label><input type="text" id="tsd-search-field" aria-label="Search"/></div><div class="field"><div id="tsd-toolbar-links"></div></div><ul class="results"><li class="state loading">Preparing search index...</li><li class="state failure">The search index is not available</li></ul><a href="../index.html" class="title">solana-agent-kit</a></div><div class="table-cell" id="tsd-widgets"><a href="#" class="tsd-widget tsd-toolbar-icon menu no-caption" data-toggle="menu" aria-label="Menu"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-menu"></use></svg></a></div></div></header><div class="container container-main"><div class="col-content"><div class="tsd-page-title"><ul class="tsd-breadcrumb"><li><a href="../modules.html">solana-agent-kit</a></li><li><a href="Handler.html">Handler</a></li></ul><h1>Type Alias Handler</h1></div><div class="tsd-signature"><span class="tsd-kind-type-alias">Handler</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">(</span><br/>    <span class="tsd-kind-parameter">agent</span><span class="tsd-signature-symbol">:</span> <a href="../classes/SolanaAgentKit.html" class="tsd-signature-type tsd-kind-class">SolanaAgentKit</a><span class="tsd-signature-symbol">,</span><br/>    <span class="tsd-kind-parameter">input</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Record</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">,</span> <span class="tsd-signature-type">any</span><span class="tsd-signature-symbol">&gt;</span><span class="tsd-signature-symbol">,</span><br/><span class="tsd-signature-symbol">)</span> <span class="tsd-signature-symbol">=&gt;</span> <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">Record</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">,</span> <span class="tsd-signature-type">any</span><span class="tsd-signature-symbol">&gt;</span><span class="tsd-signature-symbol">&gt;</span></div><div class="tsd-comment tsd-typography"><p>Handler function type for executing the action</p>
</div><div class="tsd-type-declaration"><h4>Type declaration</h4><ul class="tsd-parameters"><li class="tsd-parameter-signature"><ul class="tsd-signatures"><li class="tsd-signature" id="__type"><span class="tsd-signature-symbol">(</span><br/>    <span class="tsd-kind-parameter">agent</span><span class="tsd-signature-symbol">:</span> <a href="../classes/SolanaAgentKit.html" class="tsd-signature-type tsd-kind-class">SolanaAgentKit</a><span class="tsd-signature-symbol">,</span><br/>    <span class="tsd-kind-parameter">input</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Record</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">,</span> <span class="tsd-signature-type">any</span><span class="tsd-signature-symbol">&gt;</span><span class="tsd-signature-symbol">,</span><br/><span class="tsd-signature-symbol">)</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">Record</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">,</span> <span class="tsd-signature-type">any</span><span class="tsd-signature-symbol">&gt;</span><span class="tsd-signature-symbol">&gt;</span></li><li class="tsd-description"><div class="tsd-parameters"><h4 class="tsd-parameters-title">Parameters</h4><ul class="tsd-parameter-list"><li><span><span class="tsd-kind-parameter">agent</span>: <a href="../classes/SolanaAgentKit.html" class="tsd-signature-type tsd-kind-class">SolanaAgentKit</a></span></li><li><span><span class="tsd-kind-parameter">input</span>: <span class="tsd-signature-type">Record</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">,</span> <span class="tsd-signature-type">any</span><span class="tsd-signature-symbol">&gt;</span></span></li></ul></div><h4 class="tsd-returns-title">Returns <span class="tsd-signature-type">Promise</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">Record</span><span class="tsd-signature-symbol">&lt;</span><span class="tsd-signature-type">string</span><span class="tsd-signature-symbol">,</span> <span class="tsd-signature-type">any</span><span class="tsd-signature-symbol">&gt;</span><span class="tsd-signature-symbol">&gt;</span></h4></li></ul></li></ul></div><div class="tsd-comment tsd-typography"></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/types/index.ts#L121">src/types/index.ts:121</a></li></ul></aside></div><div class="col-sidebar"><div class="page-menu"><div class="tsd-navigation settings"><details class="tsd-accordion"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Settings</h3></summary><div class="tsd-accordion-details"><div class="tsd-filter-visibility"><span class="settings-label">Member Visibility</span><ul id="tsd-filter-options"><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-protected" name="protected"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Protected</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-inherited" name="inherited" checked/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Inherited</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-external" name="external"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>External</span></label></li></ul></div><div class="tsd-theme-toggle"><label class="settings-label" for="tsd-theme">Theme</label><select id="tsd-theme"><option value="os">OS</option><option value="light">Light</option><option value="dark">Dark</option></select></div></div></details></div></div><div class="site-menu"><nav class="tsd-navigation"><a href="../modules.html">solana-agent-kit</a><ul class="tsd-small-nested-navigation" id="tsd-nav-container"><li>Loading...</li></ul></nav></div></div></div><footer><p class="tsd-generator">Generated using <a href="https://typedoc.org/" target="_blank">TypeDoc</a></p></footer><div class="overlay"></div></body></html>


================================================
File: docs/variables/actions.html
================================================
<!DOCTYPE html><html class="default" lang="en" data-base=".."><head><meta charset="utf-8"/><meta http-equiv="x-ua-compatible" content="IE=edge"/><title>ACTIONS | solana-agent-kit</title><meta name="description" content="Documentation for solana-agent-kit"/><meta name="viewport" content="width=device-width, initial-scale=1"/><link rel="stylesheet" href="../assets/style.css"/><link rel="stylesheet" href="../assets/highlight.css"/><script defer src="../assets/main.js"></script><script async src="../assets/icons.js" id="tsd-icons-script"></script><script async src="../assets/search.js" id="tsd-search-script"></script><script async src="../assets/navigation.js" id="tsd-nav-script"></script></head><body><script>document.documentElement.dataset.theme = localStorage.getItem("tsd-theme") || "os";document.body.style.display="none";setTimeout(() => app?app.showPage():document.body.style.removeProperty("display"),500)</script><header class="tsd-page-toolbar"><div class="tsd-toolbar-contents container"><div class="table-cell" id="tsd-search"><div class="field"><label for="tsd-search-field" class="tsd-widget tsd-toolbar-icon search no-caption"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-search"></use></svg></label><input type="text" id="tsd-search-field" aria-label="Search"/></div><div class="field"><div id="tsd-toolbar-links"></div></div><ul class="results"><li class="state loading">Preparing search index...</li><li class="state failure">The search index is not available</li></ul><a href="../index.html" class="title">solana-agent-kit</a></div><div class="table-cell" id="tsd-widgets"><a href="#" class="tsd-widget tsd-toolbar-icon menu no-caption" data-toggle="menu" aria-label="Menu"><svg width="16" height="16" viewBox="0 0 16 16" fill="none"><use href="../assets/icons.svg#icon-menu"></use></svg></a></div></div></header><div class="container container-main"><div class="col-content"><div class="tsd-page-title"><ul class="tsd-breadcrumb"><li><a href="../modules.html">solana-agent-kit</a></li><li><a href="ACTIONS.html">ACTIONS</a></li></ul><h1>Variable ACTIONS<code class="tsd-tag">Const</code></h1></div><div class="tsd-signature"><span class="tsd-kind-variable">ACTIONS</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-symbol">{</span><br/>    <span class="tsd-kind-property">APPROVE_MULTISIG_PROPOSAL_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">AVAILABLE_DRIFT_MARKETS_ACTION</span><span class="tsd-signature-symbol">:</span> <a href="../interfaces/Action.html" class="tsd-signature-type tsd-kind-interface">Action</a><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">BALANCE_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">CREATE_DRIFT_USER_ACCOUNT_ACTION</span><span class="tsd-signature-symbol">:</span> <a href="../interfaces/Action.html" class="tsd-signature-type tsd-kind-interface">Action</a><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">CREATE_DRIFT_VAULT_ACTION</span><span class="tsd-signature-symbol">:</span> <a href="../interfaces/Action.html" class="tsd-signature-type tsd-kind-interface">Action</a><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">CREATE_GIBWORK_TASK_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">CREATE_IMAGE_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">CREATE_MULTISIG_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">CREATE_MULTISIG_PROPOSAL_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">CREATE_ORCA_SINGLE_SIDED_WHIRLPOOL_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">CREATE_WEBHOOK_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">DELETE_WEBHOOK_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">DEPLOY_COLLECTION_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">DEPLOY_TOKEN_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">DEPOSIT_INTO_DRIFT_VAULT_ACTION</span><span class="tsd-signature-symbol">:</span> <a href="../interfaces/Action.html" class="tsd-signature-type tsd-kind-interface">Action</a><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">DEPOSIT_TO_DRIFT_USER_ACCOUNT_ACTION</span><span class="tsd-signature-symbol">:</span> <a href="../interfaces/Action.html" class="tsd-signature-type tsd-kind-interface">Action</a><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">DEPOSIT_TO_MULTISIG_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">DEPOSIT_VOLTR_STRATEGY_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">DERIVE_DRIFT_VAULT_ADDRESS_ACTION</span><span class="tsd-signature-symbol">:</span> <a href="../interfaces/Action.html" class="tsd-signature-type tsd-kind-interface">Action</a><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">DOES_USER_HAVE_DRIFT_ACCOUNT_ACTION</span><span class="tsd-signature-symbol">:</span> <a href="../interfaces/Action.html" class="tsd-signature-type tsd-kind-interface">Action</a><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">DRIFT_GET_ENTRY_QUOTE_OF_PERP_TRADE_ACTION</span><span class="tsd-signature-symbol">:</span> <a href="../interfaces/Action.html" class="tsd-signature-type tsd-kind-interface">Action</a><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">DRIFT_GET_LEND_AND_BORROW_APY_ACTION</span><span class="tsd-signature-symbol">:</span> <a href="../interfaces/Action.html" class="tsd-signature-type tsd-kind-interface">Action</a><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">DRIFT_PERP_MARKET_FUNDING_RATE_ACTION</span><span class="tsd-signature-symbol">:</span> <a href="../interfaces/Action.html" class="tsd-signature-type tsd-kind-interface">Action</a><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">DRIFT_SPOT_TOKEN_SWAP_ACTION</span><span class="tsd-signature-symbol">:</span> <a href="../interfaces/Action.html" class="tsd-signature-type tsd-kind-interface">Action</a><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">DRIFT_USER_ACCOUNT_INFO_ACTION</span><span class="tsd-signature-symbol">:</span> <a href="../interfaces/Action.html" class="tsd-signature-type tsd-kind-interface">Action</a><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">DRIFT_VAULT_INFO_ACTION</span><span class="tsd-signature-symbol">:</span> <a href="../interfaces/Action.html" class="tsd-signature-type tsd-kind-interface">Action</a><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">EXECUTE_MULTISIG_PROPOSAL_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">FETCH_PRICE_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">FLASH_CLOSE_TRADE_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">FLASH_OPEN_TRADE_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">GET_ALL_DOMAINS_TLDS_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">GET_ALL_REGISTERED_ALL_DOMAINS_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">GET_ASSET_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">GET_ASSETS_BY_AUTHORITY_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">GET_ASSETS_BY_CREATOR_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">GET_ASSETS_BY_OWNER_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">GET_INFO_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">GET_MAIN_ALL_DOMAINS_DOMAIN_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">GET_OWNED_ALL_DOMAINS_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">GET_OWNED_DOMAINS_FOR_TLD_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">GET_PRIMARY_DOMAIN_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">GET_TOKEN_DATA_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">GET_TPS_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">GET_VOLTR_POSITION_VALUES_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">GET_WEBHOOK_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">LAUNCH_PUMPFUN_TOKEN_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">LEND_ASSET_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">LULO_LEND_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">LULO_WITHDRAW_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">MINT_NFT_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">PARSE_TRANSACTION_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">PYTH_FETCH_PRICE_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">RAYDIUM_CREATE_AMM_V4_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">RAYDIUM_CREATE_CPMM_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">REGISTER_DOMAIN_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">REJECT_MULTISIG_PROPOSAL_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">REQUEST_FUNDS_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">REQUEST_UNSTAKE_FROM_DRIFT_INSURANCE_FUND_ACTION</span><span class="tsd-signature-symbol">:</span> <a href="../interfaces/Action.html" class="tsd-signature-type tsd-kind-interface">Action</a><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">REQUEST_WITHDRAWAL_FROM_DRIFT_VAULT_ACTION</span><span class="tsd-signature-symbol">:</span> <a href="../interfaces/Action.html" class="tsd-signature-type tsd-kind-interface">Action</a><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">RESOLVE_DOMAIN_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">RESOLVE_SOL_DOMAIN_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">SEND_TRANSACTION_WITH_PRIORITY_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">STAKE_TO_DRIFT_INSURANCE_FUND_ACTION</span><span class="tsd-signature-symbol">:</span> <a href="../interfaces/Action.html" class="tsd-signature-type tsd-kind-interface">Action</a><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">STAKE_WITH_JUP_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">STAKE_WITH_SOLAYER_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">TOKEN_BALANCES_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">TRADE_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">TRADE_DELEGATED_DRIFT_VAULT_ACTION</span><span class="tsd-signature-symbol">:</span> <a href="../interfaces/Action.html" class="tsd-signature-type tsd-kind-interface">Action</a><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">TRADE_DRIFT_PERP_ACCOUNT_ACTION</span><span class="tsd-signature-symbol">:</span> <a href="../interfaces/Action.html" class="tsd-signature-type tsd-kind-interface">Action</a><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">TRANSFER_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">TRANSFER_FROM_MULTISIG_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">UNSTAKE_FROM_DRIFT_INSURANCE_FUND_ACTION</span><span class="tsd-signature-symbol">:</span> <a href="../interfaces/Action.html" class="tsd-signature-type tsd-kind-interface">Action</a><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">UPDATE_DRIFT_VAULT_ACTION</span><span class="tsd-signature-symbol">:</span> <a href="../interfaces/Action.html" class="tsd-signature-type tsd-kind-interface">Action</a><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">UPDATE_DRIFT_VAULT_DELEGATE_ACTION</span><span class="tsd-signature-symbol">:</span> <a href="../interfaces/Action.html" class="tsd-signature-type tsd-kind-interface">Action</a><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">WALLET_ADDRESS_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">WITHDRAW_FROM_DRIFT_VAULT_ACTION</span><span class="tsd-signature-symbol">:</span> <a href="../interfaces/Action.html" class="tsd-signature-type tsd-kind-interface">Action</a><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">WITHDRAW_OR_BORROW_FROM_DRIFT_ACCOUNT_ACTION</span><span class="tsd-signature-symbol">:</span> <a href="../interfaces/Action.html" class="tsd-signature-type tsd-kind-interface">Action</a><span class="tsd-signature-symbol">;</span><br/>    <span class="tsd-kind-property">WITHDRAW_VOLTR_STRATEGY_ACTION</span><span class="tsd-signature-symbol">:</span> <span class="tsd-signature-type">Action</span><span class="tsd-signature-symbol">;</span><br/><span class="tsd-signature-symbol">}</span><span class="tsd-signature-symbol"> = ...</span></div><div class="tsd-type-declaration"><h4>Type declaration</h4><ul class="tsd-parameters"><li class="tsd-parameter"><h5><span class="tsd-kind-property">APPROVE_MULTISIG_PROPOSAL_ACTION</span><a id="__typeapprove_multisig_proposal_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">AVAILABLE_DRIFT_MARKETS_ACTION</span><a id="__typeavailable_drift_markets_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><a href="../interfaces/Action.html" class="tsd-signature-type tsd-kind-interface">Action</a></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">BALANCE_ACTION</span><a id="__typebalance_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">CREATE_DRIFT_USER_ACCOUNT_ACTION</span><a id="__typecreate_drift_user_account_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><a href="../interfaces/Action.html" class="tsd-signature-type tsd-kind-interface">Action</a></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">CREATE_DRIFT_VAULT_ACTION</span><a id="__typecreate_drift_vault_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><a href="../interfaces/Action.html" class="tsd-signature-type tsd-kind-interface">Action</a></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">CREATE_GIBWORK_TASK_ACTION</span><a id="__typecreate_gibwork_task_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">CREATE_IMAGE_ACTION</span><a id="__typecreate_image_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">CREATE_MULTISIG_ACTION</span><a id="__typecreate_multisig_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">CREATE_MULTISIG_PROPOSAL_ACTION</span><a id="__typecreate_multisig_proposal_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">CREATE_ORCA_SINGLE_SIDED_WHIRLPOOL_ACTION</span><a id="__typecreate_orca_single_sided_whirlpool_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">CREATE_WEBHOOK_ACTION</span><a id="__typecreate_webhook_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">DELETE_WEBHOOK_ACTION</span><a id="__typedelete_webhook_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">DEPLOY_COLLECTION_ACTION</span><a id="__typedeploy_collection_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">DEPLOY_TOKEN_ACTION</span><a id="__typedeploy_token_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">DEPOSIT_INTO_DRIFT_VAULT_ACTION</span><a id="__typedeposit_into_drift_vault_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><a href="../interfaces/Action.html" class="tsd-signature-type tsd-kind-interface">Action</a></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">DEPOSIT_TO_DRIFT_USER_ACCOUNT_ACTION</span><a id="__typedeposit_to_drift_user_account_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><a href="../interfaces/Action.html" class="tsd-signature-type tsd-kind-interface">Action</a></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">DEPOSIT_TO_MULTISIG_ACTION</span><a id="__typedeposit_to_multisig_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">DEPOSIT_VOLTR_STRATEGY_ACTION</span><a id="__typedeposit_voltr_strategy_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">DERIVE_DRIFT_VAULT_ADDRESS_ACTION</span><a id="__typederive_drift_vault_address_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><a href="../interfaces/Action.html" class="tsd-signature-type tsd-kind-interface">Action</a></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">DOES_USER_HAVE_DRIFT_ACCOUNT_ACTION</span><a id="__typedoes_user_have_drift_account_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><a href="../interfaces/Action.html" class="tsd-signature-type tsd-kind-interface">Action</a></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">DRIFT_GET_ENTRY_QUOTE_OF_PERP_TRADE_ACTION</span><a id="__typedrift_get_entry_quote_of_perp_trade_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><a href="../interfaces/Action.html" class="tsd-signature-type tsd-kind-interface">Action</a></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">DRIFT_GET_LEND_AND_BORROW_APY_ACTION</span><a id="__typedrift_get_lend_and_borrow_apy_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><a href="../interfaces/Action.html" class="tsd-signature-type tsd-kind-interface">Action</a></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">DRIFT_PERP_MARKET_FUNDING_RATE_ACTION</span><a id="__typedrift_perp_market_funding_rate_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><a href="../interfaces/Action.html" class="tsd-signature-type tsd-kind-interface">Action</a></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">DRIFT_SPOT_TOKEN_SWAP_ACTION</span><a id="__typedrift_spot_token_swap_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><a href="../interfaces/Action.html" class="tsd-signature-type tsd-kind-interface">Action</a></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">DRIFT_USER_ACCOUNT_INFO_ACTION</span><a id="__typedrift_user_account_info_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><a href="../interfaces/Action.html" class="tsd-signature-type tsd-kind-interface">Action</a></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">DRIFT_VAULT_INFO_ACTION</span><a id="__typedrift_vault_info_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><a href="../interfaces/Action.html" class="tsd-signature-type tsd-kind-interface">Action</a></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">EXECUTE_MULTISIG_PROPOSAL_ACTION</span><a id="__typeexecute_multisig_proposal_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">FETCH_PRICE_ACTION</span><a id="__typefetch_price_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">FLASH_CLOSE_TRADE_ACTION</span><a id="__typeflash_close_trade_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">FLASH_OPEN_TRADE_ACTION</span><a id="__typeflash_open_trade_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">GET_ALL_DOMAINS_TLDS_ACTION</span><a id="__typeget_all_domains_tlds_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">GET_ALL_REGISTERED_ALL_DOMAINS_ACTION</span><a id="__typeget_all_registered_all_domains_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">GET_ASSET_ACTION</span><a id="__typeget_asset_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">GET_ASSETS_BY_AUTHORITY_ACTION</span><a id="__typeget_assets_by_authority_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">GET_ASSETS_BY_CREATOR_ACTION</span><a id="__typeget_assets_by_creator_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">GET_ASSETS_BY_OWNER_ACTION</span><a id="__typeget_assets_by_owner_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">GET_INFO_ACTION</span><a id="__typeget_info_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">GET_MAIN_ALL_DOMAINS_DOMAIN_ACTION</span><a id="__typeget_main_all_domains_domain_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">GET_OWNED_ALL_DOMAINS_ACTION</span><a id="__typeget_owned_all_domains_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">GET_OWNED_DOMAINS_FOR_TLD_ACTION</span><a id="__typeget_owned_domains_for_tld_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">GET_PRIMARY_DOMAIN_ACTION</span><a id="__typeget_primary_domain_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">GET_TOKEN_DATA_ACTION</span><a id="__typeget_token_data_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">GET_TPS_ACTION</span><a id="__typeget_tps_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">GET_VOLTR_POSITION_VALUES_ACTION</span><a id="__typeget_voltr_position_values_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">GET_WEBHOOK_ACTION</span><a id="__typeget_webhook_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">LAUNCH_PUMPFUN_TOKEN_ACTION</span><a id="__typelaunch_pumpfun_token_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">LEND_ASSET_ACTION</span><a id="__typelend_asset_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">LULO_LEND_ACTION</span><a id="__typelulo_lend_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">LULO_WITHDRAW_ACTION</span><a id="__typelulo_withdraw_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">MINT_NFT_ACTION</span><a id="__typemint_nft_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">PARSE_TRANSACTION_ACTION</span><a id="__typeparse_transaction_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">PYTH_FETCH_PRICE_ACTION</span><a id="__typepyth_fetch_price_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">RAYDIUM_CREATE_AMM_V4_ACTION</span><a id="__typeraydium_create_amm_v4_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">RAYDIUM_CREATE_CPMM_ACTION</span><a id="__typeraydium_create_cpmm_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">REGISTER_DOMAIN_ACTION</span><a id="__typeregister_domain_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">REJECT_MULTISIG_PROPOSAL_ACTION</span><a id="__typereject_multisig_proposal_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">REQUEST_FUNDS_ACTION</span><a id="__typerequest_funds_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">REQUEST_UNSTAKE_FROM_DRIFT_INSURANCE_FUND_ACTION</span><a id="__typerequest_unstake_from_drift_insurance_fund_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><a href="../interfaces/Action.html" class="tsd-signature-type tsd-kind-interface">Action</a></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">REQUEST_WITHDRAWAL_FROM_DRIFT_VAULT_ACTION</span><a id="__typerequest_withdrawal_from_drift_vault_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><a href="../interfaces/Action.html" class="tsd-signature-type tsd-kind-interface">Action</a></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">RESOLVE_DOMAIN_ACTION</span><a id="__typeresolve_domain_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">RESOLVE_SOL_DOMAIN_ACTION</span><a id="__typeresolve_sol_domain_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">SEND_TRANSACTION_WITH_PRIORITY_ACTION</span><a id="__typesend_transaction_with_priority_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">STAKE_TO_DRIFT_INSURANCE_FUND_ACTION</span><a id="__typestake_to_drift_insurance_fund_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><a href="../interfaces/Action.html" class="tsd-signature-type tsd-kind-interface">Action</a></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">STAKE_WITH_JUP_ACTION</span><a id="__typestake_with_jup_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">STAKE_WITH_SOLAYER_ACTION</span><a id="__typestake_with_solayer_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">TOKEN_BALANCES_ACTION</span><a id="__typetoken_balances_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">TRADE_ACTION</span><a id="__typetrade_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">TRADE_DELEGATED_DRIFT_VAULT_ACTION</span><a id="__typetrade_delegated_drift_vault_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><a href="../interfaces/Action.html" class="tsd-signature-type tsd-kind-interface">Action</a></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">TRADE_DRIFT_PERP_ACCOUNT_ACTION</span><a id="__typetrade_drift_perp_account_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><a href="../interfaces/Action.html" class="tsd-signature-type tsd-kind-interface">Action</a></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">TRANSFER_ACTION</span><a id="__typetransfer_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">TRANSFER_FROM_MULTISIG_ACTION</span><a id="__typetransfer_from_multisig_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">UNSTAKE_FROM_DRIFT_INSURANCE_FUND_ACTION</span><a id="__typeunstake_from_drift_insurance_fund_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><a href="../interfaces/Action.html" class="tsd-signature-type tsd-kind-interface">Action</a></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">UPDATE_DRIFT_VAULT_ACTION</span><a id="__typeupdate_drift_vault_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><a href="../interfaces/Action.html" class="tsd-signature-type tsd-kind-interface">Action</a></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">UPDATE_DRIFT_VAULT_DELEGATE_ACTION</span><a id="__typeupdate_drift_vault_delegate_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><a href="../interfaces/Action.html" class="tsd-signature-type tsd-kind-interface">Action</a></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">WALLET_ADDRESS_ACTION</span><a id="__typewallet_address_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">WITHDRAW_FROM_DRIFT_VAULT_ACTION</span><a id="__typewithdraw_from_drift_vault_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><a href="../interfaces/Action.html" class="tsd-signature-type tsd-kind-interface">Action</a></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">WITHDRAW_OR_BORROW_FROM_DRIFT_ACCOUNT_ACTION</span><a id="__typewithdraw_or_borrow_from_drift_account_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><a href="../interfaces/Action.html" class="tsd-signature-type tsd-kind-interface">Action</a></h5></li><li class="tsd-parameter"><h5><span class="tsd-kind-property">WITHDRAW_VOLTR_STRATEGY_ACTION</span><a id="__typewithdraw_voltr_strategy_action" class="tsd-anchor"></a><span class="tsd-signature-symbol">: </span><span class="tsd-signature-type">Action</span></h5></li></ul></div><aside class="tsd-sources"><ul><li>Defined in <a href="https://github.com/sendaifun/solana-agent-kit/blob/776e94aa6e58d44504f103bd1a089237ace88b2e/src/actions/index.ts#L80">src/actions/index.ts:80</a></li></ul></aside></div><div class="col-sidebar"><div class="page-menu"><div class="tsd-navigation settings"><details class="tsd-accordion"><summary class="tsd-accordion-summary"><h3><svg width="20" height="20" viewBox="0 0 24 24" fill="none"><use href="../assets/icons.svg#icon-chevronDown"></use></svg>Settings</h3></summary><div class="tsd-accordion-details"><div class="tsd-filter-visibility"><span class="settings-label">Member Visibility</span><ul id="tsd-filter-options"><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-protected" name="protected"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Protected</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-inherited" name="inherited" checked/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>Inherited</span></label></li><li class="tsd-filter-item"><label class="tsd-filter-input"><input type="checkbox" id="tsd-filter-external" name="external"/><svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><rect class="tsd-checkbox-background" width="30" height="30" x="1" y="1" rx="6" fill="none"></rect><path class="tsd-checkbox-checkmark" d="M8.35422 16.8214L13.2143 21.75L24.6458 10.25" stroke="none" stroke-width="3.5" stroke-linejoin="round" fill="none"></path></svg><span>External</span></label></li></ul></div><div class="tsd-theme-toggle"><label class="settings-label" for="tsd-theme">Theme</label><select id="tsd-theme"><option value="os">OS</option><option value="light">Light</option><option value="dark">Dark</option></select></div></div></details></div></div><div class="site-menu"><nav class="tsd-navigation"><a href="../modules.html">solana-agent-kit</a><ul class="tsd-small-nested-navigation" id="tsd-nav-container"><li>Loading...</li></ul></nav></div></div></div><footer><p class="tsd-generator">Generated using <a href="https://typedoc.org/" target="_blank">TypeDoc</a></p></footer><div class="overlay"></div></body></html>


================================================
File: examples/agent-kit-langgraph/README.md
================================================
# Agent Kit LangGraph Example

This example demonstrates how to build an advanced Solana agent using LangGraph and the Solana Agent Kit. It showcases a multi-agent system that can handle various Solana-related tasks through a directed workflow.

![Solana Agent Kit LangGraph Architecture](./assets/architecture.png)

## Features

- Multi-agent architecture using LangGraph's StateGraph
- Specialized agents for different tasks:
  - General purpose agent for basic queries (with optional Tavily search integration)
  - Transfer/Swap agent for transaction operations
  - Read agent for blockchain data queries
  - Manager agent for routing and orchestration
- Environment-based configuration
- TypeScript implementation with full type safety

## Prerequisites

- Node.js (v16 or higher)
- pnpm package manager
- Solana development environment

## Installation

1. Clone the repository and navigate to the example directory:
```bash
cd examples/agent-kit-langgraph
```

2. Install dependencies:
```bash
pnpm install
```

3. Configure environment variables:
```bash
cp .env.example .env
```

Edit the `.env` file with your configuration:
- Add your OpenAI API key
- Add your Tavily API key (optional, enables web search capabilities)
- Configure any other required environment variables

## Project Structure

```
src/
├── agents/         # Individual agent implementations
├── helper/         # Helper utilities and examples
├── prompts/        # Agent prompts and templates
├── tools/          # Custom tools for agents
└── utils/          # Utility functions and configurations
```

## Usage

To run the example:

```bash
pnpm dev src/index.ts
```

The example demonstrates a workflow where:
1. The manager agent receives the initial query
2. Based on the query type, it routes to the appropriate specialized agent:
   - General queries → Generalist Agent
   - Transfer/Swap operations → TransferSwap Agent
   - Blockchain data queries → Read Agent

## Dependencies

- `@langchain/community`: LangChain community tools and utilities
  - Includes Tavily search integration for enhanced query responses
- `@langchain/core`: Core LangChain functionality
- `@langchain/langgraph`: Graph-based agent workflows
- `solana-agent-kit`: Solana Agent Kit for blockchain interactions
- `zod`: Runtime type checking

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## License

ISC License


================================================
File: examples/agent-kit-langgraph/langgraph.json
================================================
{
    "node_version": "20",
    "dockerfile_lines": [],
    "dependencies": ["."],
  "graphs": {
    "solanaAgent": "./src/index.ts:graph"
  },
    "env": ".env"
  }

================================================
File: examples/agent-kit-langgraph/package.json
================================================
{
  "name": "agent-kit-langgraph",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "type": "module",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "dev": "tsx"
  },
  "dependencies": {
    "@langchain/community": "^0.3.20",
    "@langchain/core": "^0.3.26",
    "@langchain/langgraph": "^0.2.36",
    "dotenv": "^16.4.7",
    "solana-agent-kit": "^1.3.0",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "tsx": "^4.19.2",
    "typescript": "^5.0.0"
  }
}


================================================
File: examples/agent-kit-langgraph/tsconfig.json
================================================
{
    "compilerOptions": {
      "target": "es2022",
      "module": "es2022",
      "moduleResolution": "node",
      "esModuleInterop": true,
      "strict": true,
      "outDir": "./dist"
    },
    "include": ["src/**/*"],
    "exclude": ["node_modules"]
  }

================================================
File: examples/agent-kit-langgraph/.env.example
================================================
OPENAI_API_KEY=
RPC_URL=
SOLANA_PRIVATE_KEY=
TAVILY_API_KEY=       #Optional: for search functionality


================================================
File: examples/agent-kit-langgraph/.gitignore
================================================
# Dependencies
node_modules/
package-lock.json

# Environment variables
.env
.env.local

# Build output
dist/
build/

================================================
File: examples/agent-kit-langgraph/src/index.ts
================================================
import { StateGraph } from "@langchain/langgraph";
import { solanaAgentState } from "./utils/state";
import { generalistNode } from "./agents/generalAgent";
import { transferSwapNode } from "./agents/transferOrSwap";
import { managerNode } from "./agents/manager";
import { readNode } from "./agents/readAgent";
import { START, END } from "@langchain/langgraph";
import { managerRouter } from "./utils/route";
import { HumanMessage } from "@langchain/core/messages";

const workflow = new StateGraph(solanaAgentState)
  .addNode("generalist", generalistNode)
  .addNode("manager", managerNode)
  .addNode("transferSwap", transferSwapNode)
  .addNode("read", readNode)
  .addEdge(START, "manager")
  .addConditionalEdges("manager", managerRouter)
  .addEdge("generalist", END)
  .addEdge("transferSwap", END)
  .addEdge("read", END);

export const graph = workflow.compile();

const result = await graph.invoke({
  messages: [new HumanMessage("what is the price of SOL")],
});

console.log(result);


================================================
File: examples/agent-kit-langgraph/src/agents/generalAgent.ts
================================================
import { createReactAgent } from "@langchain/langgraph/prebuilt";
import { gpt4o } from "../utils/model";
import { solanaAgentState } from "../utils/state";
import { TavilySearchResults } from "@langchain/community/tools/tavily_search";

// Initialize tools array
const searchTools = [];

// Only add Tavily search if API key is available
if (process.env.TAVILY_API_KEY) {
  searchTools.push(new TavilySearchResults());
}

const generalAgent = createReactAgent({
  llm: gpt4o,
  tools: searchTools,
});

export const generalistNode = async (state: typeof solanaAgentState.State) => {
  const { messages } = state;

  const result = await generalAgent.invoke({ messages });

  return { messages: [...result.messages] };
};


================================================
File: examples/agent-kit-langgraph/src/agents/manager.ts
================================================
import { prompt, parser } from "../prompts/manager";
import { RunnableSequence } from "@langchain/core/runnables";
import { solanaAgentState } from "../utils/state";
import { gpt4o } from "../utils/model";

const chain = RunnableSequence.from([prompt, gpt4o, parser]);

export const managerNode = async (state: typeof solanaAgentState.State) => {
  const { messages } = state;

  const result = await chain.invoke({
    formatInstructions: parser.getFormatInstructions(),
    messages: messages,
  });

  const { isSolanaReadQuery, isSolanaWriteQuery, isGeneralQuery } = result;

  return {
    isSolanaReadQuery,
    isSolanaWriteQuery,
    isGeneralQuery,
  };
};


================================================
File: examples/agent-kit-langgraph/src/agents/readAgent.ts
================================================
import { createReactAgent } from "@langchain/langgraph/prebuilt";
import { gpt4o } from "../utils/model";
import { solanaAgentState } from "../utils/state";
import { agentKit } from "../utils/solanaAgent";
import {
  SolanaBalanceTool,
  SolanaFetchPriceTool,
} from "solana-agent-kit/dist/langchain";

const readAgent = createReactAgent({
  llm: gpt4o,
  tools: [new SolanaBalanceTool(agentKit), new SolanaFetchPriceTool(agentKit)],
});

export const readNode = async (state: typeof solanaAgentState.State) => {
  const { messages } = state;

  const result = await readAgent.invoke({ messages });

  return { messages: [...result.messages] };
};


================================================
File: examples/agent-kit-langgraph/src/agents/transferOrSwap.ts
================================================
import { gpt4o } from "../utils/model";
import { agentKit } from "../utils/solanaAgent";
import { solanaAgentState } from "../utils/state";
import { createReactAgent } from "@langchain/langgraph/prebuilt";
import { SolanaTransferTool } from "solana-agent-kit/dist/langchain";
import { transferSwapPrompt } from "../prompts/transferSwap";
import { swapTool } from "../tools/swap";

const transferOrSwapAgent = createReactAgent({
  stateModifier: transferSwapPrompt,
  llm: gpt4o,
  tools: [new SolanaTransferTool(agentKit), swapTool],
});

export const transferSwapNode = async (
  state: typeof solanaAgentState.State,
) => {
  const { messages } = state;

  const result = await transferOrSwapAgent.invoke({
    messages,
  });

  return result;
};


================================================
File: examples/agent-kit-langgraph/src/helper/examples.ts
================================================
import { HumanMessage } from "@langchain/core/messages";

export const generalQuestion = [
  new HumanMessage("Who is the president of Ecuador?"),
];

export const solanaReadQuery = [new HumanMessage("what is the price of SOL")];

export const solanaWriteQuery = [new HumanMessage("swap 0.1 usdc to sol")];


================================================
File: examples/agent-kit-langgraph/src/helper/tokenList.ts
================================================
export const tokenList = [
  {
    name: "USDC",
    ticker: "USDC",
    decimal: 6,
    mintAddress: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",
  },
  {
    name: "USDT",
    ticker: "USDT",
    decimal: 6,
    mintAddress: "Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB",
  },
  {
    name: "USDS",
    ticker: "USDS",
    decimal: 6,
    mintAddress: "USDSwr9ApdHk5bvJKMjzff41FfuX8bSxdKcR81vTwcA",
  },
  {
    name: "SOL",
    ticker: "SOL",
    decimal: 9,
    mintAddress: "So11111111111111111111111111111111111111112",
  },
  {
    name: "jitoSOL",
    ticker: "jitoSOL",
    decimal: 9,
    mintAddress: "J1toso1uCk3RLmjorhTtrVwY9HJ7X8V9yYac6Y7kGCPn",
  },
  {
    name: "bSOL",
    ticker: "bSOL",
    decimal: 9,
    mintAddress: "bSo13r4TkiE4KumL71LsHTPpL2euBYLFx6h9HP3piy1",
  },
  {
    name: "mSOL",
    ticker: "mSOL",
    decimal: 9,
    mintAddress: "mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So",
  },
  {
    name: "BONK",
    ticker: "BONK",
    decimal: 9,
    mintAddress: "DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263",
  },
];


================================================
File: examples/agent-kit-langgraph/src/prompts/manager.ts
================================================
import { StructuredOutputParser } from "@langchain/core/output_parsers";
import { z } from "zod";
import { PromptTemplate } from "@langchain/core/prompts";

export const parser = StructuredOutputParser.fromZodSchema(
  z.object({
    isSolanaReadQuery: z
      .boolean()
      .describe("Query requires reading data from Solana blockchain"),
    isSolanaWriteQuery: z
      .boolean()
      .describe("Query requires writing/modifying data on Solana blockchain"),
    isGeneralQuery: z
      .boolean()
      .describe("Query is about non-blockchain topics"),
  }),
);

export const prompt = PromptTemplate.fromTemplate(
  `
    You are the Chief Routing Officer for a multi-blockchain agent network. Your role is to:
    1. Analyze and classify incoming queries
    2. Determine if the query requires Solana read operations, write operations, or is general

    Format your response according to:
    {formatInstructions}

    Classification Guidelines:
    - Solana Read Operations include: 
      * Checking account balances
      * Viewing NFT metadata
      * Getting program data
      * Querying transaction history
      * Checking token prices or holdings
    - Solana Write Operations include:
      * Creating or updating programs
      * Sending tokens or SOL
      * Minting NFTs
      * Creating accounts
      * Any transaction that modifies blockchain state
    - General queries include: 
      * Non-blockchain topics
      * Internet searches
      * General knowledge questions

    \n {messages} \n
    `,
);


================================================
File: examples/agent-kit-langgraph/src/prompts/transferSwap.ts
================================================
import {
  ChatPromptTemplate,
  MessagesPlaceholder,
} from "@langchain/core/prompts";
import { tokenList } from "../helper/tokenList";

// Convert token list to a more readable format for the prompt
const formattedTokenList = tokenList
  .map(
    (token) =>
      `- ${token.name} (${token.ticker}) - Decimals: ${token.decimal} - Address: ${token.mintAddress}`,
  )
  .join("\n    ");

export const transferSwapPrompt = ChatPromptTemplate.fromMessages([
  [
    "system",
    `You are an agent that is an expert in Solana transactions, specialized in token transfers and swaps. You can execute these transactions using the available tools based on user input.

    When processing token amounts:
    1. Use EXACTLY the decimal amount specified by the user without any modifications
    2. Do not round or adjust the numbers
    3. Maintain precise decimal places as provided in the user input

    For transfers:
    - User must specify the token, amount, and recipient address
    - The same token will be used for input and output

    For swaps:
    - User must specify the input token, output token, and amount to swap
    - Input and output tokens must be different
    - Select tokens from this list of supported tokens:

    ${formattedTokenList}

    Example amounts:
    If you say "0.01 SOL", I will use exactly 0.01 (not 0.010 or 0.0100)
    If you say "1.234 USDC", I will use exactly 1.234 (not 1.23 or 1.2340)
    For swaps, have the slippage be 200 bps
    `,
  ],
  new MessagesPlaceholder("messages"),
]);


================================================
File: examples/agent-kit-langgraph/src/tools/swap.ts
================================================
import { agentKit } from "../utils/solanaAgent";
import { tool } from "@langchain/core/tools";
import { z } from "zod";
import { PublicKey } from "@solana/web3.js";

export const swapTool = tool(
  async ({ outputMint, inputAmount, inputMint, inputDecimal }) => {
    try {
      const inputAmountWithDecimals = inputAmount * 10 ** inputDecimal;
      const outputMintAddress = new PublicKey(outputMint);
      const inputMintAddress = new PublicKey(inputMint);

      console.log(inputAmountWithDecimals, outputMintAddress, inputMintAddress);
      const tx = await agentKit.trade(
        outputMintAddress,
        inputAmountWithDecimals,
        inputMintAddress,
        200,
      );
      return tx;
    } catch (error) {
      console.error(error);
      return "error";
    }
  },
  {
    name: "swap",
    description:
      "call to swap/trade tokens from one token to the other using Jupiter exchange",
    schema: z.object({
      outputMint: z
        .string()
        .describe("The mint address of destination token to be swapped to"),
      inputAmount: z
        .number()
        .describe(
          "the input amount of the token to be swapped without adding any decimals",
        ),
      inputMint: z.string().describe("The mint address of the origin token "),
      inputDecimal: z
        .number()
        .describe("The decimal of the input token that is being traded"),
    }),
  },
);


================================================
File: examples/agent-kit-langgraph/src/utils/model.ts
================================================
import { ChatOpenAI } from "@langchain/openai";
import "dotenv/config";

export const gpt4o = new ChatOpenAI({
  modelName: "gpt-4o",
  apiKey: process.env.OPENAI_API_KEY!,
});

export const gpt4oMini = new ChatOpenAI({
  modelName: "gpt-4o-mini",
  apiKey: process.env.OPENAI_API_KEY!,
});


================================================
File: examples/agent-kit-langgraph/src/utils/route.ts
================================================
import { solanaAgentState } from "./state";
import { END } from "@langchain/langgraph";

export const managerRouter = (state: typeof solanaAgentState.State) => {
  const { isSolanaReadQuery, isSolanaWriteQuery, isGeneralQuery } = state;

  if (isGeneralQuery) {
    return "generalist";
  } else if (isSolanaWriteQuery) {
    return "transferSwap";
  } else if (isSolanaReadQuery) {
    return "read";
  } else {
    return END;
  }
};


================================================
File: examples/agent-kit-langgraph/src/utils/solanaAgent.ts
================================================
import { SolanaAgentKit, createSolanaTools } from "solana-agent-kit";

export const agentKit = new SolanaAgentKit(
  process.env.SOLANA_PRIVATE_KEY!,
  process.env.RPC_URL!,
  { OPENAI_API_KEY: process.env.OPENAI_API_KEY! },
);

export const solanaTools = createSolanaTools(agentKit);


================================================
File: examples/agent-kit-langgraph/src/utils/state.ts
================================================
import { Annotation } from "@langchain/langgraph";
import { BaseMessage } from "@langchain/core/messages";
import { messagesStateReducer } from "@langchain/langgraph";

export const solanaAgentState = Annotation.Root({
  messages: Annotation<BaseMessage[]>({
    reducer: messagesStateReducer,
    default: () => [],
  }),

  isSolanaReadQuery: Annotation<boolean>({
    reducer: (x, y) => y ?? x ?? false,
    default: () => false,
  }),

  isSolanaWriteQuery: Annotation<boolean>({
    reducer: (x, y) => y ?? x ?? false,
    default: () => false,
  }),

  isGeneralQuery: Annotation<boolean>({
    reducer: (x, y) => y ?? x ?? false,
    default: () => false,
  }),
});


================================================
File: examples/agent-kit-nextjs-langchain/README.md
================================================
# SolanaAgentKit 🦜️🔗 LangChain + Next.js Starter Template

[![Open in GitHub Codespaces](https://github.com/codespaces/badge.svg)](https://codespaces.new/michaelessiet/solana-agent-nextjs-starter-langchain)
[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fsendaifun%2Fsolana-agent-kit%2Ftree%2Fmain%2Fexamples%2Fagent-kit-nextjs-langchain&env=OPENAI_API_KEY,RPC_URL,SOLANA_PRIVATE_KEY&project-name=solana-agent-kit&repository-name=sak-yourprojectname)

This template scaffolds a SolanaAgentKit + LangChain.js + Next.js starter app.

The agent uses [LangGraph.js](https://langchain-ai.github.io/langgraphjs/), LangChain's framework for building agentic workflows. They use preconfigured helper functions to minimize boilerplate, but you can replace them with custom graphs as desired.

![Demo GIF](/public/images/agent-convo.gif)

It's free-tier friendly too! Check out the [bundle size stats below](#-bundle-size).

## 🚀 Getting Started

First, clone this repo and download it locally.

Next, you'll need to set up environment variables in your repo's `.env.local` file. Copy the `.env.example` file to `.env.local`.
To start, you'll just need to add your OpenAI API key, Solana RPC URL and wallet private key in base 58 string form.

Next, install the required packages using your preferred package manager (e.g. `pnpm`).

```bash
pnpm install
```

Now you're ready to run the development server:

```bash
pnpm dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result! Ask the bot something and you'll see a streamed response:

![A streaming conversation between the user and the AI](/public/images/chat-conversation.png)

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

Backend logic lives in `app/api/chat/route.ts`. From here, you can change the prompt and model, or add other modules and logic.

## 📚 Learn More

To learn more about what you can do with SolanaAgentKit and LangChain.js, check out the docs here:

- https://github.com/sendaifun/solana-agent-kit
- https://js.langchain.com/docs/

## ▲ Deploy on Vercel

When ready, you can deploy your app on the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme).

Check out the [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.

## Thank You!

Thanks for reading! If you have any questions or comments, please drop an issue on this repo or reach out to us on [X](https://x.com/sendaifun)


================================================
File: examples/agent-kit-nextjs-langchain/LICENSE
================================================
MIT License

Copyright (c) 2023 LangChain

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


================================================
File: examples/agent-kit-nextjs-langchain/next.config.js
================================================
const withBundleAnalyzer = require('@next/bundle-analyzer')({
  enabled: process.env.ANALYZE === 'true',
})
module.exports = withBundleAnalyzer({})

================================================
File: examples/agent-kit-nextjs-langchain/package.json
================================================
{
	"name": "langchain-nextjs-template",
	"version": "0.0.0",
	"private": true,
	"scripts": {
		"dev": "next dev",
		"build": "next build",
		"start": "next start",
		"lint": "next lint",
		"format": "prettier --write \"app\""
	},
	"engines": {
		"node": ">=18"
	},
	"dependencies": {
		"@langchain/community": "^0.3.11",
		"@langchain/core": "^0.3.17",
		"@langchain/langgraph": "^0.2.20",
		"@langchain/openai": "^0.3.11",
		"@next/bundle-analyzer": "^13.4.19",
		"@supabase/supabase-js": "^2.32.0",
		"@tailwindcss/typography": "^0.5.15",
		"@types/node": "20.12.12",
		"@types/react": "18.3.2",
		"@types/react-dom": "18.3.0",
		"ai": "^3.1.12",
		"autoprefixer": "10.4.14",
		"eslint": "8.46.0",
		"eslint-config-next": "13.4.12",
		"isomorphic-dompurify": "^2.19.0",
		"langchain": "^0.3.5",
		"marked": "^15.0.4",
		"next": "^14.2.3",
		"postcss": "8.4.27",
		"react": "^18.3.1",
		"react-dom": "^18.3.1",
		"react-toastify": "^9.1.3",
		"solana-agent-kit": "^1.3.0",
		"tailwindcss": "3.3.3",
		"typescript": "5.1.6",
		"zod": "^3.22.3",
		"zod-to-json-schema": "^3.21.4"
	},
	"devDependencies": {
		"prettier": "3.0.0"
	}
}


================================================
File: examples/agent-kit-nextjs-langchain/postcss.config.js
================================================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}


================================================
File: examples/agent-kit-nextjs-langchain/tailwind.config.js
================================================
/** @type {import('tailwindcss').Config} */
module.exports = {
	content: [
		"./pages/**/*.{js,ts,jsx,tsx,mdx}",
		"./components/**/*.{js,ts,jsx,tsx,mdx}",
		"./app/**/*.{js,ts,jsx,tsx,mdx}",
	],
	theme: {
		extend: {
			backgroundImage: {
				"gradient-radial": "radial-gradient(var(--tw-gradient-stops))",
				"gradient-conic":
					"conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))",
			},
		},
	},
	plugins: [require("@tailwindcss/typography")],
};


================================================
File: examples/agent-kit-nextjs-langchain/tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}


================================================
File: examples/agent-kit-nextjs-langchain/.env.example
================================================
LANGCHAIN_CALLBACKS_BACKGROUND=false
OPENAI_API_KEY=
RPC_URL=
SOLANA_PRIVATE_KEY=


================================================
File: examples/agent-kit-nextjs-langchain/.eslintrc.json
================================================
{
  "extends": "next/core-web-vitals"
}


================================================
File: examples/agent-kit-nextjs-langchain/.gitignore
================================================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/sdks
!.yarn/versions
.env

================================================
File: examples/agent-kit-nextjs-langchain/.prettierrc.json
================================================
{}


================================================
File: examples/agent-kit-nextjs-langchain/app/globals.css
================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  color: #f8f8f8;
  background: #131318;
}

body input,
body textarea {
  color: black;
}

a {
  color: #2d7bd4;
}

a:hover {
  border-bottom: 1px solid;
}

p {
  margin: 8px 0;
}

code {
  color: #ffa500;
}

li {
  padding: 4px;
}


================================================
File: examples/agent-kit-nextjs-langchain/app/layout.tsx
================================================
import "./globals.css";
import { Public_Sans } from "next/font/google";

const publicSans = Public_Sans({ subsets: ["latin"] });

export default function RootLayout({
	children,
}: {
	children: React.ReactNode;
}) {
	return (
		<html lang="en">
			<head>
				<title>SolanaAgentKit + LangChain + Next.js Template</title>
				<link rel="shortcut icon" href="/images/favicon.ico" />
				<meta
					name="description"
					content="Starter template showing how to use SolanaAgentKit with Langchain in Next.js projects."
				/>
				<meta
					property="og:title"
					content="SolanaAgentKit + LangChain + Next.js Template"
				/>
				<meta
					property="og:description"
					content="Starter template showing how to use SolanaAgentKit with LangChain in Next.js projects."
				/>
				<meta property="og:image" content="/images/title-card.png" />
				<meta name="twitter:card" content="summary_large_image" />
				<meta
					name="twitter:title"
					content="SolanaAgentKit + LangChain + Next.js Template"
				/>
				<meta
					name="twitter:description"
					content="Starter template showing how to use SolanaAgentKit with LangChain in Next.js projects."
				/>
				<meta name="twitter:image" content="/images/title-card.png" />
			</head>
			<body className={publicSans.className}>
				<div className="flex flex-col p-4 md:p-12 h-[100vh]">{children}</div>
			</body>
		</html>
	);
}


================================================
File: examples/agent-kit-nextjs-langchain/app/page.tsx
================================================
import { ChatWindow } from "@/components/ChatWindow";

export default function Home() {
	const InfoCard = (
		<div className="p-4 md:p-8 rounded bg-[#25252d] w-full max-h-[85%] overflow-hidden">
			<h1 className="text-3xl md:text-4xl mb-4">
				SolanaAgentKit + LangChain.js 🦜🔗 + Next.js
			</h1>
			<ul>
				<li className="text-l">
					🤝
					<span className="ml-2">
						This template showcases a simple agent chatbot using{" "}
						<a href="https://https://www.solanaagentkit.xyz/">SolanaAgentKit</a>
						{", "}
						<a href="https://js.langchain.com/" target="_blank">
							LangChain.js
						</a>{" "}
						and the Vercel{" "}
						<a href="https://sdk.vercel.ai/docs" target="_blank">
							AI SDK
						</a>{" "}
						in a{" "}
						<a href="https://nextjs.org/" target="_blank">
							Next.js
						</a>{" "}
						project.
					</span>
				</li>
				<li className="hidden text-l md:block">
					💻
					<span className="ml-2">
						You can find the prompt and model logic for this use-case in{" "}
						<code>app/api/chat/route.ts</code>.
					</span>
				</li>
				<li className="hidden text-l md:block">
					🎨
					<span className="ml-2">
						The main frontend logic is found in <code>app/page.tsx</code>.
					</span>
				</li>
				<li className="text-l">
					🐙
					<span className="ml-2">
						This template is open source - you can see the source code and
						deploy your own version{" "}
						<a
							href="https://github.com/michaelessiet/solana-agent-nextjs-starter-langchain"
							target="_blank"
						>
							from the GitHub repo
						</a>
						!
					</span>
				</li>
				<li className="text-l">
					👇
					<span className="ml-2">
						Try asking e.g. <code>What is my wallet address?</code> below!
					</span>
				</li>
			</ul>
		</div>
	);
	return (
		<ChatWindow
			endpoint="api/chat"
			emoji="🤖"
			titleText="Solana agent"
			placeholder="I'm your friendly Solana agent! Ask me anything..."
			emptyStateComponent={InfoCard}
		></ChatWindow>
	);
}


================================================
File: examples/agent-kit-nextjs-langchain/app/api/chat/route.ts
================================================
import { NextRequest, NextResponse } from "next/server";
import { ChatOpenAI } from "@langchain/openai";
import { MemorySaver } from "@langchain/langgraph";
import { createReactAgent } from "@langchain/langgraph/prebuilt";
import { SolanaAgentKit, createSolanaTools } from "solana-agent-kit";

const llm = new ChatOpenAI({
  temperature: 0.7,
  model: "gpt-4o-mini",
});

const solanaAgent = new SolanaAgentKit(
  process.env.SOLANA_PRIVATE_KEY!,
  process.env.RPC_URL,
  process.env.OPENAI_API_KEY!,
);

const tools = createSolanaTools(solanaAgent);
const memory = new MemorySaver();

const agent = createReactAgent({
  llm,
  tools,
  checkpointSaver: memory,
  messageModifier: `
      You are a helpful agent that can interact onchain using the Solana Agent Kit. You are
      empowered to interact onchain using your tools. If you ever need funds, you can request them from the
      faucet. If not, you can provide your wallet details and request funds from the user. If there is a 5XX
      (internal) HTTP error code, ask the user to try again later. If someone asks you to do something you
      can't do with your currently available tools, you must say so, and encourage them to implement it
      themselves using the Solana Agent Kit, recommend they go to https://www.solanaagentkit.xyz for more information. Be
      concise and helpful with your responses. Refrain from restating your tools' descriptions unless it is explicitly requested.
    `,
});

export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    const messages = body.messages ?? [];

    const eventStream = agent.streamEvents(
      {
        messages,
      },
      {
        version: "v2",
        configurable: {
          thread_id: "Solana Agent Kit!",
        },
      },
    );

    const textEncoder = new TextEncoder();
    const transformStream = new ReadableStream({
      async start(controller) {
        for await (const { event, data } of eventStream) {
          if (event === "on_chat_model_stream") {
            if (data.chunk.content) {
              controller.enqueue(textEncoder.encode(data.chunk.content));
            }
          }
        }
        controller.close();
      },
    });

    return new Response(transformStream);
  } catch (e: any) {
    return NextResponse.json({ error: e.message }, { status: e.status ?? 500 });
  }
}


================================================
File: examples/agent-kit-nextjs-langchain/components/ChatMessageBubble.tsx
================================================
import markdownToHtml from "@/utils/markdownToHTML";
import type { Message } from "ai/react";
import { useMemo } from "react";

export function ChatMessageBubble(props: {
	message: Message;
	aiEmoji?: string;
	sources: any[];
}) {
	const colorClassName =
		props.message.role === "user" ? "bg-sky-600" : "bg-slate-50 text-black";
	const alignmentClassName =
		props.message.role === "user" ? "ml-auto" : "mr-auto";
	const prefix = props.message.role === "user" ? "🧑" : props.aiEmoji;

	const content = useMemo(() => {
		return markdownToHtml(props.message.content);
	}, [props.message.content]);

	return (
		<div
			className={`${alignmentClassName} ${colorClassName} rounded px-4 py-2 max-w-[80%] mb-8 flex`}
		>
			<div className="mr-2">{prefix}</div>
			<div className="flex flex-col">
				<div
					className="prose prose-lg max-w-none"
					dangerouslySetInnerHTML={{ __html: content }}
				></div>
				{props.sources && props.sources.length ? (
					<>
						<code className="mt-4 mr-auto bg-slate-600 px-2 py-1 rounded">
							<h2>🔍 Sources:</h2>
						</code>
						<code className="mt-1 mr-2 bg-slate-600 px-2 py-1 rounded text-xs">
							{props.sources?.map((source, i) => (
								<div className="mt-2" key={"source:" + i}>
									{i + 1}. &quot;{source.pageContent}&quot;
									{source.metadata?.loc?.lines !== undefined ? (
										<div>
											<br />
											Lines {source.metadata?.loc?.lines?.from} to{" "}
											{source.metadata?.loc?.lines?.to}
										</div>
									) : (
										""
									)}
								</div>
							))}
						</code>
					</>
				) : (
					""
				)}
			</div>
		</div>
	);
}


================================================
File: examples/agent-kit-nextjs-langchain/components/ChatWindow.tsx
================================================
"use client";

import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

import { Message } from "ai";
import { useChat } from "ai/react";
import { useRef, useState, ReactElement } from "react";
import type { FormEvent } from "react";

import { ChatMessageBubble } from "@/components/ChatMessageBubble";
import { IntermediateStep } from "./IntermediateStep";

export function ChatWindow(props: {
	endpoint: string;
	emptyStateComponent: ReactElement;
	placeholder?: string;
	titleText?: string;
	emoji?: string;
	showIntermediateStepsToggle?: boolean;
}) {
	const messageContainerRef = useRef<HTMLDivElement | null>(null);

	const {
		endpoint,
		emptyStateComponent,
		placeholder,
		titleText = "An LLM",
		showIntermediateStepsToggle,
		emoji,
	} = props;

	const [showIntermediateSteps, setShowIntermediateSteps] = useState(false);
	const [intermediateStepsLoading, setIntermediateStepsLoading] =
		useState(false);
	const intemediateStepsToggle = showIntermediateStepsToggle && (
		<div>
			<input
				type="checkbox"
				id="show_intermediate_steps"
				name="show_intermediate_steps"
				checked={showIntermediateSteps}
				onChange={(e) => setShowIntermediateSteps(e.target.checked)}
			></input>
			<label htmlFor="show_intermediate_steps"> Show intermediate steps</label>
		</div>
	);

	const [sourcesForMessages, setSourcesForMessages] = useState<
		Record<string, any>
	>({});

	const {
		messages,
		input,
		setInput,
		handleInputChange,
		handleSubmit,
		isLoading: chatEndpointIsLoading,
		setMessages,
	} = useChat({
		api: endpoint,
		onResponse(response) {
			const sourcesHeader = response.headers.get("x-sources");
			const sources = sourcesHeader
				? JSON.parse(Buffer.from(sourcesHeader, "base64").toString("utf8"))
				: [];
			const messageIndexHeader = response.headers.get("x-message-index");
			if (sources.length && messageIndexHeader !== null) {
				setSourcesForMessages({
					...sourcesForMessages,
					[messageIndexHeader]: sources,
				});
			}
		},
		streamMode: "text",
		onError: (e) => {
			toast(e.message, {
				theme: "dark",
			});
		},
	});

	async function sendMessage(e: FormEvent<HTMLFormElement>) {
		e.preventDefault();
		if (messageContainerRef.current) {
			messageContainerRef.current.classList.add("grow");
		}
		if (!messages.length) {
			await new Promise((resolve) => setTimeout(resolve, 300));
		}
		if (chatEndpointIsLoading ?? intermediateStepsLoading) {
			return;
		}
		if (!showIntermediateSteps) {
			handleSubmit(e);
			// Some extra work to show intermediate steps properly
		} else {
			setIntermediateStepsLoading(true);
			setInput("");
			const messagesWithUserReply = messages.concat({
				id: messages.length.toString(),
				content: input,
				role: "user",
			});
			setMessages(messagesWithUserReply);
			const response = await fetch(endpoint, {
				method: "POST",
				body: JSON.stringify({
					messages: messagesWithUserReply,
					show_intermediate_steps: true,
				}),
			});
			const json = await response.json();
			setIntermediateStepsLoading(false);
			if (response.status === 200) {
				const responseMessages: Message[] = json.messages;
				// Represent intermediate steps as system messages for display purposes
				// TODO: Add proper support for tool messages
				const toolCallMessages = responseMessages.filter(
					(responseMessage: Message) => {
						return (
							(responseMessage.role === "assistant" &&
								!!responseMessage.tool_calls?.length) ||
							responseMessage.role === "tool"
						);
					},
				);
				const intermediateStepMessages = [];
				for (let i = 0; i < toolCallMessages.length; i += 2) {
					const aiMessage = toolCallMessages[i];
					const toolMessage = toolCallMessages[i + 1];
					intermediateStepMessages.push({
						id: (messagesWithUserReply.length + i / 2).toString(),
						role: "system" as const,
						content: JSON.stringify({
							action: aiMessage.tool_calls?.[0],
							observation: toolMessage.content,
						}),
					});
				}
				const newMessages = messagesWithUserReply;
				for (const message of intermediateStepMessages) {
					newMessages.push(message);
					setMessages([...newMessages]);
					await new Promise((resolve) =>
						setTimeout(resolve, 1000 + Math.random() * 1000),
					);
				}
				setMessages([
					...newMessages,
					{
						id: newMessages.length.toString(),
						content: responseMessages[responseMessages.length - 1].content,
						role: "assistant",
					},
				]);
			} else {
				if (json.error) {
					toast(json.error, {
						theme: "dark",
					});
					throw new Error(json.error);
				}
			}
		}
	}

	return (
		<div
			className={`flex flex-col items-center p-4 md:p-8 rounded grow overflow-hidden ${messages.length > 0 ? "border" : ""}`}
		>
			<h2 className={`${messages.length > 0 ? "" : "hidden"} text-2xl`}>
				{emoji} {titleText}
			</h2>
			{messages.length === 0 ? emptyStateComponent : ""}
			<div
				className="flex flex-col-reverse w-full mb-4 overflow-auto transition-[flex-grow] ease-in-out"
				ref={messageContainerRef}
			>
				{messages.length > 0
					? [...messages].reverse().map((m, i) => {
							const sourceKey = (messages.length - 1 - i).toString();
							return m.role === "system" ? (
								<IntermediateStep key={m.id} message={m}></IntermediateStep>
							) : (
								<ChatMessageBubble
									key={m.id}
									message={m}
									aiEmoji={emoji}
									sources={sourcesForMessages[sourceKey]}
								></ChatMessageBubble>
							);
						})
					: ""}
			</div>

			<form onSubmit={sendMessage} className="flex w-full flex-col">
				<div className="flex">{intemediateStepsToggle}</div>
				<div className="flex w-full mt-4">
					<input
						className="grow mr-8 p-4 rounded"
						value={input}
						placeholder={placeholder ?? "What's it like to be a pirate?"}
						onChange={handleInputChange}
					/>
					<button
						type="submit"
						className="shrink-0 px-8 py-4 bg-sky-600 rounded w-28"
					>
						<div
							role="status"
							className={`${chatEndpointIsLoading || intermediateStepsLoading ? "" : "hidden"} flex justify-center`}
						>
							<svg
								aria-hidden="true"
								className="w-6 h-6 text-white animate-spin dark:text-white fill-sky-800"
								viewBox="0 0 100 101"
								fill="none"
								xmlns="http://www.w3.org/2000/svg"
							>
								<path
									d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z"
									fill="currentColor"
								/>
								<path
									d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z"
									fill="currentFill"
								/>
							</svg>
							<span className="sr-only">Loading...</span>
						</div>
						<span
							className={
								chatEndpointIsLoading || intermediateStepsLoading
									? "hidden"
									: ""
							}
						>
							Send
						</span>
					</button>
				</div>
			</form>
			<ToastContainer />
		</div>
	);
}


================================================
File: examples/agent-kit-nextjs-langchain/components/IntermediateStep.tsx
================================================
import { useState } from "react";
import type { Message } from "ai/react";

export function IntermediateStep(props: { message: Message }) {
	const parsedInput = JSON.parse(props.message.content);
	const action = parsedInput.action;
	const observation = parsedInput.observation;
	const [expanded, setExpanded] = useState(false);
	return (
		<div
			className={`ml-auto bg-green-600 rounded px-4 py-2 max-w-[80%] mb-8 whitespace-pre-wrap flex flex-col cursor-pointer`}
		>
			<div
				className={`text-right ${expanded ? "w-full" : ""}`}
				onClick={(e) => setExpanded(!expanded)}
			>
				<code className="mr-2 bg-slate-600 px-2 py-1 rounded hover:text-blue-600">
					🛠 <b>{action.name}</b>
				</code>
				<span className={expanded ? "hidden" : ""}>🔽</span>
				<span className={expanded ? "" : "hidden"}>🔼</span>
			</div>
			<div
				className={`overflow-hidden max-h-[0px] transition-[max-height] ease-in-out ${expanded ? "max-h-[360px]" : ""}`}
			>
				<div
					className={`bg-slate-600 rounded p-4 mt-1 max-w-0 ${expanded ? "max-w-full" : "transition-[max-width] delay-100"}`}
				>
					<code
						className={`opacity-0 max-h-[100px] overflow-auto transition ease-in-out delay-150 ${expanded ? "opacity-100" : ""}`}
					>
						Tool Input:
						<br></br>
						<br></br>
						{JSON.stringify(action.args)}
					</code>
				</div>
				<div
					className={`bg-slate-600 rounded p-4 mt-1 max-w-0 ${expanded ? "max-w-full" : "transition-[max-width] delay-100"}`}
				>
					<code
						className={`opacity-0 max-h-[260px] overflow-auto transition ease-in-out delay-150 ${expanded ? "opacity-100" : ""}`}
					>
						{observation}
					</code>
				</div>
			</div>
		</div>
	);
}


================================================
File: examples/agent-kit-nextjs-langchain/data/DefaultRetrievalText.ts
================================================
export default `# QA and Chat over Documents

Chat and Question-Answering (QA) over \`data\` are popular LLM use-cases.

\`data\` can include many things, including:

* \`Unstructured data\` (e.g., PDFs)
* \`Structured data\` (e.g., SQL)
* \`Code\` (e.g., Python)

Below we will review Chat and QA on \`Unstructured data\`.

![intro.png](/img/qa_intro.png)

\`Unstructured data\` can be loaded from many sources.

Check out the [document loader integrations here](/docs/modules/data_connection/document_loaders/) to browse the set of supported loaders.

Each loader returns data as a LangChain \`Document\`.

\`Documents\` are turned into a Chat or QA app following the general steps below:

* \`Splitting\`: [Text splitters](/docs/modules/data_connection/document_transformers/) break \`Documents\` into splits of specified size
* \`Storage\`: Storage (e.g., often a [vectorstore](/docs/modules/data_connection/vectorstores/)) will house [and often embed](https://www.pinecone.io/learn/vector-embeddings/) the splits
* \`Retrieval\`: The app retrieves splits from storage (e.g., often [with similar embeddings](https://www.pinecone.io/learn/k-nearest-neighbor/) to the input question)
* \`Output\`: An [LLM](/docs/modules/model_io/models/llms/) produces an answer using a prompt that includes the question and the retrieved splits

![flow.jpeg](/img/qa_flow.jpeg)

## Quickstart

Let's load this [blog post](https://lilianweng.github.io/posts/2023-06-23-agent/) on agents as an example \`Document\`.

We'll have a QA app in a few lines of code.

First, set environment variables and install packages required for the guide:

\`\`\`shell
> yarn add cheerio
# Or load env vars in your preferred way:
> export OPENAI_API_KEY="..."
\`\`\`

## 1. Loading, Splitting, Storage

### 1.1 Getting started

Specify a \`Document\` loader.

\`\`\`typescript
// Document loader
import { CheerioWebBaseLoader } from "langchain/document_loaders/web/cheerio";

const loader = new CheerioWebBaseLoader(
  "https://lilianweng.github.io/posts/2023-06-23-agent/"
);
const data = await loader.load();
\`\`\`

Split the \`Document\` into chunks for embedding and vector storage.


\`\`\`typescript
import { RecursiveCharacterTextSplitter } from "langchain/text_splitter";

const textSplitter = new RecursiveCharacterTextSplitter({
  chunkSize: 500,
  chunkOverlap: 0,
});

const splitDocs = await textSplitter.splitDocuments(data);
\`\`\`

Embed and store the splits in a vector database (for demo purposes we use an unoptimized, in-memory example but you can [browse integrations here](/docs/modules/data_connection/vectorstores/integrations/)):


\`\`\`typescript
import { OpenAIEmbeddings } from "langchain/embeddings/openai";
import { MemoryVectorStore } from "langchain/vectorstores/memory";

const embeddings = new OpenAIEmbeddings();

const vectorStore = await MemoryVectorStore.fromDocuments(splitDocs, embeddings);
\`\`\`

Here are the three pieces together:

![lc.png](/img/qa_data_load.png)

### 1.2 Going Deeper

#### 1.2.1 Integrations

\`Document Loaders\`

* Browse document loader integrations [here](/docs/modules/data_connection/document_loaders/).

* See further documentation on loaders [here](/docs/modules/data_connection/document_loaders/).

\`Document Transformers\`

* All can ingest loaded \`Documents\` and process them (e.g., split).

* See further documentation on transformers [here](/docs/modules/data_connection/document_transformers/).

\`Vectorstores\`

* Browse vectorstore integrations [here](/docs/modules/data_connection/vectorstores/integrations/).

* See further documentation on vectorstores [here](/docs/modules/data_connection/vectorstores/).

## 2. Retrieval

### 2.1 Getting started

Retrieve [relevant splits](https://www.pinecone.io/learn/what-is-similarity-search/) for any question using \`similarity_search\`.


\`\`\`typescript
const relevantDocs = await vectorStore.similaritySearch("What is task decomposition?");

console.log(relevantDocs.length);

// 4
\`\`\`


### 2.2 Going Deeper

#### 2.2.1 Retrieval

Vectorstores are commonly used for retrieval.

But, they are not the only option.

For example, SVMs (see thread [here](https://twitter.com/karpathy/status/1647025230546886658?s=20)) can also be used.

LangChain [has many retrievers and retrieval methods](/docs/modules/data_connection/retrievers/) including, but not limited to, vectorstores.

All retrievers implement some common methods, such as \`getRelevantDocuments()\`.


## 3. QA

### 3.1 Getting started

Distill the retrieved documents into an answer using an LLM (e.g., \`gpt-3.5-turbo\`) with \`RetrievalQA\` chain.


\`\`\`typescript
import { RetrievalQAChain } from "langchain/chains";
import { ChatOpenAI } from "langchain/chat_models/openai";

const model = new ChatOpenAI({ model: "gpt-3.5-turbo" });
const chain = RetrievalQAChain.fromLLM(model, vectorstore.asRetriever());

const response = await chain.call({
  query: "What is task decomposition?"
});
console.log(response);

/*
  {
    text: 'Task decomposition refers to the process of breaking down a larger task into smaller, more manageable subgoals. By decomposing a task, it becomes easier for an agent or system to handle complex tasks efficiently. Task decomposition can be done through various methods such as using prompting or task-specific instructions, or through human inputs. It helps in planning and organizing the steps required to complete a task effectively.'
  }
*/
\`\`\`

### 3.2 Going Deeper

#### 3.2.1 Integrations

\`LLMs\`

* Browse LLM integrations and further documentation [here](/docs/modules/model_io/models/).

#### 3.2.2 Customizing the prompt

The prompt in \`RetrievalQA\` chain can be customized as follows.


\`\`\`typescript
import { RetrievalQAChain } from "langchain/chains";
import { ChatOpenAI } from "langchain/chat_models/openai";
import { PromptTemplate } from "langchain/prompts";

const model = new ChatOpenAI({ model: "gpt-3.5-turbo" });

const template = \`Use the following pieces of context to answer the question at the end.
If you don't know the answer, just say that you don't know, don't try to make up an answer.
Use three sentences maximum and keep the answer as concise as possible.
Always say "thanks for asking!" at the end of the answer.
{context}
Question: {question}
Helpful Answer:\`;

const chain = RetrievalQAChain.fromLLM(model, vectorstore.asRetriever(), {
  prompt: PromptTemplate.fromTemplate(template),
});

const response = await chain.call({
  query: "What is task decomposition?"
});

console.log(response);

/*
  {
    text: 'Task decomposition is the process of breaking down a large task into smaller, more manageable subgoals. This allows for efficient handling of complex tasks and aids in planning and organizing the steps needed to achieve the overall goal. Thanks for asking!'
  }
*/
\`\`\`


#### 3.2.3 Returning source documents

The full set of retrieved documents used for answer distillation can be returned using \`return_source_documents=True\`.


\`\`\`typescript
import { RetrievalQAChain } from "langchain/chains";
import { ChatOpenAI } from "langchain/chat_models/openai";

const model = new ChatOpenAI({ model: "gpt-3.5-turbo" });

const chain = RetrievalQAChain.fromLLM(model, vectorstore.asRetriever(), {
  returnSourceDocuments: true
});

const response = await chain.call({
  query: "What is task decomposition?"
});

console.log(response.sourceDocuments[0]);

/*
Document {
  pageContent: 'Task decomposition can be done (1) by LLM with simple prompting like "Steps for XYZ.\\n1.", "What are the subgoals for achieving XYZ?", (2) by using task-specific instructions; e.g. "Write a story outline." for writing a novel, or (3) with human inputs.',
  metadata: [Object]
}
*/
\`\`\`


#### 3.2.4 Customizing retrieved docs in the LLM prompt

Retrieved documents can be fed to an LLM for answer distillation in a few different ways.

\`stuff\`, \`refine\`, and \`map-reduce\` chains for passing documents to an LLM prompt are well summarized [here](/docs/modules/chains/document/).

\`stuff\` is commonly used because it simply "stuffs" all retrieved documents into the prompt.

The [loadQAChain](/docs/modules/chains/document/) methods are easy ways to pass documents to an LLM using these various approaches.


\`\`\`typescript
import { loadQAStuffChain } from "langchain/chains";

const stuffChain = loadQAStuffChain(model);

const stuffResult = await stuffChain.call({
  input_documents: relevantDocs,
  question: "What is task decomposition
});

console.log(stuffResult);
/*
{
  text: 'Task decomposition is the process of breaking down a large task into smaller, more manageable subgoals or steps. This allows for efficient handling of complex tasks by focusing on one subgoal at a time. Task decomposition can be done through various methods such as using simple prompting, task-specific instructions, or human inputs.'
}
*/
\`\`\`

## 4. Chat

### 4.1 Getting started

To keep chat history, we use a variant of the previous chain called a \`ConversationalRetrievalQAChain\`.
First, specify a \`Memory buffer\` to track the conversation inputs / outputs.


\`\`\`typescript
import { ConversationalRetrievalQAChain } from "langchain/chains";
import { BufferMemory } from "langchain/memory";
import { ChatOpenAI } from "langchain/chat_models/openai";

const memory = new BufferMemory({
  memoryKey: "chat_history",
  returnMessages: true,
});
\`\`\`

Next, we initialize and call the chain:

\`\`\`typescript
const model = new ChatOpenAI({ model: "gpt-3.5-turbo" });
const chain = ConversationalRetrievalQAChain.fromLLM(model, vectorstore.asRetriever(), {
  memory
});

const result = await chain.call({
  question: "What are some of the main ideas in self-reflection?"
});
console.log(result);

/*
{
  text: 'Some main ideas in self-reflection include:\n' +
    '\n' +
    '1. Iterative Improvement: Self-reflection allows autonomous agents to improve by continuously refining past action decisions and correcting mistakes.\n' +
    '\n' +
    '2. Trial and Error: Self-reflection plays a crucial role in real-world tasks where trial and error are inevitable. It helps agents learn from failed trajectories and make adjustments for future actions.\n' +
    '\n' +
    '3. Constructive Criticism: Agents engage in constructive self-criticism of their big-picture behavior to identify areas for improvement.\n' +
    '\n' +
    '4. Decision and Strategy Refinement: Reflection on past decisions and strategies enables agents to refine their approach and make more informed choices.\n' +
    '\n' +
    '5. Efficiency and Optimization: Self-reflection encourages agents to be smart and efficient in their actions, aiming to complete tasks in the least number of steps.\n' +
    '\n' +
    'These ideas highlight the importance of self-reflection in enhancing performance and guiding future actions.'
}
*/
\`\`\`


The \`Memory buffer\` has context to resolve \`"it"\` ("self-reflection") in the below question.


\`\`\`typescript
const followupResult = await chain.call({
  question: "How does the Reflexion paper handle it?"
});
console.log(followupResult);

/*
{
  text: "The Reflexion paper introduces a framework that equips agents with dynamic memory and self-reflection capabilities to improve their reasoning skills. The approach involves showing the agent two-shot examples, where each example consists of a failed trajectory and an ideal reflection on how to guide future changes in the agent's plan. These reflections are then added to the agent's working memory as context for querying a language model. The agent uses this self-reflection information to make decisions on whether to start a new trial or continue with the current plan."
}
*/
\`\`\`


### 4.2 Going deeper

The [documentation](/docs/modules/chains/popular/chat_vector_db) on \`ConversationalRetrievalQAChain\` offers a few extensions, such as streaming and source documents.


# Conversational Retrieval Agents

This is an agent specifically optimized for doing retrieval when necessary while holding a conversation and being able
to answer questions based on previous dialogue in the conversation.

To start, we will set up the retriever we want to use, then turn it into a retriever tool. Next, we will use the high-level constructor for this type of agent.
Finally, we will walk through how to construct a conversational retrieval agent from components.

## The Retriever

To start, we need a retriever to use! The code here is mostly just example code. Feel free to use your own retriever and skip to the next section on creating a retriever tool.

\`\`\`typescript
import { FaissStore } from "langchain/vectorstores/faiss";
import { OpenAIEmbeddings } from "langchain/embeddings/openai";
import { TextLoader } from "langchain/document_loaders/fs/text";
import { RecursiveCharacterTextSplitter } from "langchain/text_splitter";

const loader = new TextLoader("state_of_the_union.txt");
const docs = await loader.load();
const splitter = new RecursiveCharacterTextSplitter({
  chunkSize: 1000,
  chunkOverlap: 0
});

const texts = await splitter.splitDocuments(docs);

const vectorStore = await FaissStore.fromDocuments(texts, new OpenAIEmbeddings());

const retriever = vectorStore.asRetriever();
\`\`\`

## Retriever Tool

Now we need to create a tool for our retriever. The main things we need to pass in are a \`name\` for the retriever as well as a \`description\`. These will both be used by the language model, so they should be informative.

\`\`\`typescript
import { createRetrieverTool } from "langchain/agents/toolkits";

const tool = createRetrieverTool(retriever, {
  name: "search_state_of_union",
  description: "Searches and returns documents regarding the state-of-the-union.",
});
\`\`\`

## Agent Constructor

Here, we will use the high level \`create_conversational_retrieval_agent\` API to construct the agent.
Notice that beside the list of tools, the only thing we need to pass in is a language model to use.

Under the hood, this agent is using the OpenAIFunctionsAgent, so we need to use an ChatOpenAI model.

\`\`\`typescript
import { createConversationalRetrievalAgent } from "langchain/agents/toolkits";
import { ChatOpenAI } from "langchain/chat_models/openai";

const model = new ChatOpenAI({
  temperature: 0,
});

const executor = await createConversationalRetrievalAgent(model, [tool], {
  verbose: true,
});
\`\`\`

We can now try it out!

\`\`\`typescript
const result = await executor.call({
  input: "Hi, I'm Bob!"
});

console.log(result);

/*
  {
    output: 'Hello Bob! How can I assist you today?',
    intermediateSteps: []
  }
*/

const result2 = await executor.call({
  input: "What's my name?"
});

console.log(result2);

/*
  { output: 'Your name is Bob.', intermediateSteps: [] }
*/

const result3 = await executor.call({
  input: "What did the president say about Ketanji Brown Jackson in the most recent state of the union?"
});

console.log(result3);

/*
  {
    output: "In the most recent state of the union, President Biden mentioned Ketanji Brown Jackson. He nominated her as a Circuit Court of Appeals judge and described her as one of the nation's top legal minds who will continue Justice Breyer's legacy of excellence. He mentioned that she has received a broad range of support, including from the Fraternal Order of Police and former judges appointed by Democrats and Republicans.",
    intermediateSteps: [
      {...}
    ]
  }
*/

const result4 = await executor.call({
  input: "How long ago did he nominate her?"
});

console.log(result4);

/*
  {
    output: 'President Biden nominated Ketanji Brown Jackson four days before the most recent state of the union address.',
    intermediateSteps: []
  }
*/
\`\`\`

Note that for the final call, the agent used previously retrieved information to answer the query and did not need to call the tool again!

Here's a trace showing how the agent fetches documents to answer the question with the retrieval tool:

https://smith.langchain.com/public/1e2b1887-ca44-4210-913b-a69c1b8a8e7e/r

## Creating from components

What actually is going on underneath the hood? Let's take a look so we can understand how to modify things going forward.

### Memory

In this example, we want the agent to remember not only previous conversations, but also previous intermediate steps.
For that, we can use \`OpenAIAgentTokenBufferMemory\`. Note that if you want to change whether the agent remembers intermediate steps,
how the long the retained buffer is, or anything like that you should change this part.

\`\`\`typescript
import { OpenAIAgentTokenBufferMemory } from "langchain/agents/toolkits";

const memory = new OpenAIAgentTokenBufferMemory({
  llm: model,
  memoryKey: "chat_history",
  outputKey: "output"
});
\`\`\`

You should make sure \`memoryKey\` is set to \`"chat_history"\` and \`outputKey\` is set to \`"output"\` for the OpenAI functions agent.
This memory also has \`returnMessages\` set to \`true\` by default.

You can also load messages from prior conversations into this memory by initializing it with a pre-loaded chat history:

\`\`\`typescript
import { ChatOpenAI } from "langchain/chat_models/openai";
import { OpenAIAgentTokenBufferMemory } from "langchain/agents/toolkits";
import { HumanMessage, AIMessage } from "langchain/schema";
import { ChatMessageHistory } from "langchain/memory";

const previousMessages = [
  new HumanMessage("My name is Bob"),
  new AIMessage("Nice to meet you, Bob!"),
];

const chatHistory = new ChatMessageHistory(previousMessages);

const memory = new OpenAIAgentTokenBufferMemory({
  llm: new ChatOpenAI({}),
  memoryKey: "chat_history",
  outputKey: "output",
  chatHistory,
});
\`\`\`

### Agent executor

We can recreate the agent executor directly with the \`initializeAgentExecutorWithOptions\` method.
This allows us to customize the agent's system message by passing in a \`prefix\` into \`agentArgs\`.
Importantly, we must pass in \`return_intermediate_steps: true\` since we are recording that with our memory object.

\`\`\`typescript
import { initializeAgentExecutorWithOptions } from "langchain/agents";

const executor = await initializeAgentExecutorWithOptions(tools, llm, {
  agentType: "openai-functions",
  memory,
  returnIntermediateSteps: true,
  agentArgs: {
    prefix:
      prefix ??
      \`Do your best to answer the questions. Feel free to use any tools available to look up relevant information, only if necessary.\`,
  },
});
\`\`\`
`;


================================================
File: examples/agent-kit-nextjs-langchain/utils/markdownToHTML.ts
================================================
import { marked } from "marked";
import DOMPurify from "isomorphic-dompurify";

interface MarkedOptions {
  gfm: boolean;
  breaks: boolean;
  headerIds: boolean;
  mangle: false;
  highlight?: (code: string, lang: string) => string;
}

// Configure marked options
const markedOptions: MarkedOptions = {
  gfm: true, // GitHub Flavored Markdown
  breaks: true, // Convert \n to <br>
  headerIds: true, // Add ids to headers
  mangle: false, // Don't escape HTML
  highlight: function (code: string, lang: string): string {
    // You can add syntax highlighting here if needed
    return code;
  },
};

marked.setOptions(markedOptions);

// Basic markdown to HTML conversion with sanitization
export default function markdownToHtml(markdown: string) {
  const rawHtml = marked.parse(markdown);
  return DOMPurify.sanitize(rawHtml as string);
}


================================================
File: examples/discord-bot-starter/README.md
================================================
# Discord Bot Starter

This is a starter template for creating a Discord bot using the Solana Agent Kit by Send AI.

## Setup

### Prerequisites

- Node.js (v20 or higher)
- pnpm (v9 or higher)
- A Discord account
- A Solana account keypair

### Step 1: Create a Discord Bot

1. Go to the [Discord Developer Portal](https://discord.com/developers/applications).
2. Click on "New Application" and give your application a name.
3. Navigate to the "Bot" tab on the left sidebar and click "Add Bot".
4. Under the "Token" section, click "Copy" to copy your bot token.

### Step 2: Fill Out Environment Variables

Create a `.env` file in the root directory of the project and fill it out with the following variables:

- `DISCORD_BOT_TOKEN`: Paste the bot token you copied from the Discord Developer Portal.
- `SOLANA_PRIVATE_KEY`: Enter your Solana private key. This is required for interacting with the Solana blockchain.
- `SOLANA_RPC_URL`: Provide the RPC URL for connecting to the Solana network. You can use a public RPC URL or your own.
- `OPENAI_API_KEY`: Input your OpenAI API key if you plan to use OpenAI services within your bot. You can obtain this key from the OpenAI platform.

### Step 3: Install Dependencies and Start the Bot

1. Open a terminal and navigate to the root directory of the project.
2. Run the following command to install the project dependencies:
   ```sh
   pnpm install
   ```
3. After the installation is complete, start the bot by running:
   ```sh
   pnpm start
   ```
4. Once the bot is running, open Discord and send a direct message (DM) to your bot to ensure it is working correctly.


================================================
File: examples/discord-bot-starter/package.json
================================================
{
  "name": "discord-bot-starter",
  "version": "1.0.0",
  "description": "Discord bot starter template using the Solana Agent Kit by Send AI",
  "main": "index.ts",
  "scripts": {
    "start": "nodemon ./src/index.ts",
    "lint": "eslint -c .eslintrc.js --ext .ts ./src",
    "format": "prettier --write \"src/**/*.ts\" \"test/**/*.ts\""
  },
  "author": "dimitrov-d",
  "dependencies": {
    "discord.js": "^14.17.2",
    "dotenv": "^16.4.7",
    "solana-agent-kit": "^1.3.4"
  },
  "devDependencies": {
    "@types/node": "^22.10.5",
    "@typescript-eslint/parser": "8.19.0",
    "eslint": "^8.56.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-import-resolver-typescript": "^3.7.0",
    "eslint-plugin-import": "^2.31.0",
    "eslint-plugin-prettier": "^5.2.1",
    "eslint-plugin-promise": "^7.2.1",
    "eslint-plugin-security": "^3.0.1",
    "eslint-plugin-sonarjs": "^3.0.1",
    "nodemon": "^3.1.9",
    "prettier": "^3.4.2",
    "tsconfig-paths": "^4.2.0",
    "tsx": "^4.19.2",
    "typescript": "^5.7.2"
  },
  "nodemonConfig": {
    "ext": "*.ts",
    "exec": "tsx",
    "delay": 1000
  }
}


================================================
File: examples/discord-bot-starter/tsconfig.json
================================================
{
  "compileOnSave": true,
  "compilerOptions": {
    "baseUrl": ".",
    "rootDir": "./src",
    "outDir": "./build",
    "sourceMap": true,
    "declaration": false,
    "module": "commonjs",
    "moduleResolution": "node",
    "target": "es2020",
    "typeRoots": ["node_modules/@types"],
    "lib": ["es2018", "dom", "esnext.asynciterable"],
    "plugins": [{ "transform": "typescript-transform-paths" }],
    "allowSyntheticDefaultImports": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true
  }
}


================================================
File: examples/discord-bot-starter/.env.template
================================================
DISCORD_BOT_TOKEN=
SOLANA_PRIVATE_KEY=
SOLANA_RPC_URL=
OPENAI_API_KEY=


================================================
File: examples/discord-bot-starter/.eslintrc.ts
================================================
module.exports = {
  env: {
    es2021: true,
    node: true,
  },
  root: true,
  settings: {
    'import/resolver': {
      typescript: {},
    },
  },
  ignorePatterns: [
    '.eslintrc.js',
    'webpack.config.js',
    'dist/*',
    '**/*.js',
    'node_modules/*',
  ],
  parser: '@typescript-eslint/parser',
  parserOptions: {
    ecmaVersion: 12,
    project: 'tsconfig.json',
    tsconfigRootDir: '.',
    sourceType: 'module',
  },
  extends: [
    'airbnb-base',
    'plugin:@typescript-eslint/recommended-requiring-type-checking',
    'plugin:prettier/recommended',
    'plugin:sonarjs/recommended',
    'plugin:security/recommended',
    'plugin:promise/recommended',
    'prettier',
  ],
  plugins: [
    '@typescript-eslint/eslint-plugin',
    'sonarjs',
    'security',
    'promise',
    'prettier',
  ],
  rules: {
    semi: [2, 'always'],
    quotes: [1, 'single', { allowTemplateLiterals: true }],
    curly: [2, 'all'],
    '@typescript-eslint/interface-name-prefix': 'off',
    '@typescript-eslint/explicit-function-return-type': 'off',
    '@typescript-eslint/explicit-module-boundary-types': 'off',
    '@typescript-eslint/no-explicit-any': 'off',
    '@typescript-eslint/no-floating-promises': 'warn',
    '@typescript-eslint/no-unsafe-assignment': 'off',
    '@typescript-eslint/no-unsafe-argument': 'off',
    '@typescript-eslint/no-unsafe-member-access': 'off',
    '@typescript-eslint/no-unsafe-call': 'off',
    '@typescript-eslint/no-unsafe-return': 'off',
    '@typescript-eslint/restrict-template-expressions': 'off',
    '@typescript-eslint/ban-ts-comment': 'off',
    '@typescript-eslint/no-var-requires': 'off',
    '@typescript-eslint/no-misused-promises': [
      'error',
      { checksVoidReturn: false },
    ],
    'security/detect-non-literal-regexp': 0,
    'security/detect-object-injection': 0,
    'promise/always-return': 0,
    'promise/no-callback-in-promise': 0,
    'sonarjs/cognitive-complexity': [2, 50],
    'sonarjs/no-duplicate-string': 0,
    'sonarjs/no-useless-catch': 1,
    'sonarjs/no-nested-template-literals': 0,
    'sonarjs/prefer-single-boolean-return': 1,
    'sonarjs/no-small-switch': 'off',
    '@typescript-eslint/no-unused-vars': [
      1,
      { argsIgnorePattern: '^_|^returns$|^of$|^type$' },
    ],
    'import/extensions': 'off',
    'import/no-import-module-exports': 'off',
    'import/prefer-default-export': 'off',
    'import/no-extraneous-dependencies': 'off',
    'import/no-dynamic-require': 'off',
    'prettier/prettier': [
      'error',
      {
        useTabs: false,
        arrowParens: 'always',
        printWidth: 80,
        singleQuote: true,
        trailingComma: 'all',
        endOfLine: 'auto',
        bracketSpacing: true,
      },
      {
        usePrettierrc: false,
      },
    ],
    'no-restricted-imports': [
      'error',
      {
        patterns: ['**/dist/**'],
      },
    ],
    'no-use-before-define': 'off',
    'no-console': 'off',
    'no-return-await': 'off',
    'consistent-return': 'off',
    'default-case': 'off',
    'no-fallthrough': 'off',
    'no-plusplus': 'off',
    'no-await-in-loop': 'off',
    'no-restricted-syntax': 'off',
    'no-continue': 'off',
    'no-nested-ternary': 'off',
    'no-void': 'off',
    'no-param-reassign': 'off',
    'class-methods-use-this': 'off',
    'no-return-assign': 'off',
    'no-case-declarations': 'off',
    'global-require': 'off',
    'security/detect-non-literal-require': 'off',
    'global-require': 'off',
  },
};


================================================
File: examples/discord-bot-starter/.gitignore
================================================
.env
*.log
.DS_Store

logs/
node_modules/
build/
dist/


================================================
File: examples/discord-bot-starter/.prettierrc
================================================
{
  "tabWidth": 2,
  "useTabs": false,
  "arrowParens": "always",
  "printWidth": 120,
  "singleQuote": true,
  "trailingComma": "all",
  "endOfLine": "auto",
  "bracketSpacing": true
}


================================================
File: examples/discord-bot-starter/src/index.ts
================================================
import 'dotenv/config';
import { Client, GatewayIntentBits, Events, ChannelType, Partials } from 'discord.js';
import { HumanMessage } from '@langchain/core/messages';
import { MemorySaver } from '@langchain/langgraph';
import { createReactAgent } from '@langchain/langgraph/prebuilt';
import { ChatOpenAI } from '@langchain/openai';
import { SolanaAgentKit, createSolanaTools } from 'solana-agent-kit';

const client = new Client({
  intents: [GatewayIntentBits.MessageContent, GatewayIntentBits.DirectMessages],
  partials: [Partials.Message, Partials.Channel],
});

const chatHistory = new Map();

async function initializeAgent() {
  try {
    const llm = new ChatOpenAI({
      modelName: 'gpt-4o-mini',
      temperature: 0.3,
    });

    const solanaAgent = new SolanaAgentKit(process.env.SOLANA_PRIVATE_KEY!, process.env.SOLANA_RPC_URL!, {
      OPENAI_API_KEY: process.env.OPENAI_API_KEY!,
      // other config options here
    });

    const tools = createSolanaTools(solanaAgent);

    const memory = new MemorySaver();
    const config = { configurable: { thread_id: 'Solana Agent Kit!' } };

    const agent = createReactAgent({
      llm,
      tools,
      checkpointSaver: memory,
      messageModifier: `
        You are a helpful agent that can interact onchain using the Solana Agent Kit. You are
        empowered to interact onchain using your tools. If you ever need funds, you can request them from the
        faucet. If not, you can provide your wallet details and request funds from the user. If there is a 5XX
        (internal) HTTP error code, ask the user to try again later. If someone asks you to do something you
        can't do with your currently available tools, you must say so, and encourage them to implement it
        themselves using the Solana Agent Kit, recommend they go to https://www.solanaagentkit.xyz for more information. Be
        concise and helpful with your responses. Refrain from restating your tools' descriptions unless it is explicitly requested.
      `,
    });

    return { agent, config };
  } catch (error) {
    console.error('Failed to initialize agent:', error);
    throw error;
  }
}

client.on(Events.ClientReady, async () => {
  // gets data about the bot
  await client.application?.fetch();

  console.info(`${client.user?.username || 'Bot'} is running. Send it a message in Discord DM to get started.`);
});

client.on(Events.MessageCreate, async (message) => {
  try {
    if (message.channel.type !== ChannelType.DM || message.author.bot) {
      return;
    }

    console.info(`Received message: ${message.content}`);
    await message.channel.sendTyping();

    const { agent, config } = await initializeAgent();

    const userId = message.author.id;
    if (!chatHistory.has(userId)) {
      chatHistory.set(userId, []);
    }
    const userChatHistory = chatHistory.get(userId);
    userChatHistory.push(new HumanMessage(message.content));

    const stream = await agent.stream({ messages: userChatHistory }, config);

    const replyIfNotEmpty = async (content: string) => content.trim() !== '' && message.reply(content);

    for await (const chunk of stream) {
      if ('agent' in chunk) {
        const agentMessage = chunk.agent.messages[0].content;
        await replyIfNotEmpty(agentMessage);
        userChatHistory.push(new HumanMessage(agentMessage));
      }
    }
  } catch (error) {
    console.error('Error handling message:', error);
  }
});

client.login(process.env.DISCORD_BOT_TOKEN);


================================================
File: examples/market-making-agent/README.md
================================================
# AI Guided Market Making Agent

This agent showcases an ai guided market maker on Manifest, Solana's CLOB DEX. The agent guides the user to setup basic two-sided quotes on Manifest markets.
[Reference](https://github.com/CKS-Systems/manifest)

## Key Features

- **Automated Quoting**: The agent automatically refreshes quotes on an interval.
- **Reducing Complexity**: Designed to abstract away parameters for setting up market making.
- **Random Model**: The market making introduces randomness to prevent front running or other negative botting behavoirs.


## Example
=== Market Maker Configuration ===

Enter the market ID: 2Uj8277fkaVBtTU6Wp2GPRbQC86SkSdgQ2mp1Q5N2LHc
Enter the base token symbol (e.g., SEND): SEND
Enter the quote token symbol (e.g., USDC): USDC

=== Quote Parameters (applies to both buy and sell sides) ===
Enter number of quotes to place on each side: 4
Enter minimum quote depth (% distance from mid price): 0.1
Enter maximum quote depth (% distance from mid price): 2

=== Token Allowances ===
Enter total SEND allowance: 2
Enter total USDC allowance: 3

Enter update interval in seconds: 20

=== Configuration Summary ===
{
  "marketId": "2Uj8277fkaVBtTU6Wp2GPRbQC86SkSdgQ2mp1Q5N2LHc",
  "baseToken": "SEND",
  "quoteToken": "USDC",
  "quoteParams": {
    "number": 4,
    "minDepth": 0.1,
    "maxDepth": 2
  },
  "allowance": {
    "base": 2,
    "quote": 3
  },
  "intervalSeconds": 20
}

Is this configuration correct? (yes/no): yes

Starting market maker mode for SEND/USDC...


================================================
File: examples/market-making-agent/index.ts
================================================
import { HumanMessage } from "@langchain/core/messages";
import { MemorySaver } from "@langchain/langgraph";
import { createReactAgent } from "@langchain/langgraph/prebuilt";
import { ChatOpenAI } from "@langchain/openai";
import * as dotenv from "dotenv";
import * as fs from "fs";
import * as readline from "readline";
import { createSolanaTools, SolanaAgentKit } from "../../src";

dotenv.config();

function validateEnvironment(): void {
  const missingVars: string[] = [];
  const requiredVars = ["OPENAI_API_KEY", "RPC_URL", "SOLANA_PRIVATE_KEY"];

  requiredVars.forEach((varName) => {
    if (!process.env[varName]) {
      missingVars.push(varName);
    }
  });

  if (missingVars.length > 0) {
    console.error("Error: Required environment variables are not set");
    missingVars.forEach((varName) => {
      console.error(`${varName}=your_${varName.toLowerCase()}_here`);
    });
    process.exit(1);
  }
}

validateEnvironment();

const WALLET_DATA_FILE = "wallet_data.txt";

async function initializeAgent() {
  try {
    const llm = new ChatOpenAI({
      modelName: "gpt-4o-mini",
      temperature: 0.3,
    });

    let walletDataStr: string | null = null;

    if (fs.existsSync(WALLET_DATA_FILE)) {
      try {
        walletDataStr = fs.readFileSync(WALLET_DATA_FILE, "utf8");
      } catch (error) {
        console.error("Error reading wallet data:", error);
      }
    }

    const solanaAgent = new SolanaAgentKit(
      process.env.SOLANA_PRIVATE_KEY!,
      process.env.RPC_URL!,
      {
        OPENAI_API_KEY: process.env.OPENAI_API_KEY!,
      },
    );

    const tools = createSolanaTools(solanaAgent);

    const memory = new MemorySaver();
    const config = { configurable: { thread_id: "Solana Agent Kit!" } };

    const agent = createReactAgent({
      llm,
      tools,
      checkpointSaver: memory,
      messageModifier: `
        You are a helpful agent that can interact onchain using the Solana Agent Kit. You are
        empowered to interact onchain using your tools. If you ever need funds, you can request them from the
        faucet. If not, you can provide your wallet details and request funds from the user. If there is a 5XX
        (internal) HTTP error code, ask the user to try again later. If someone asks you to do something you
        can't do with your currently available tools, you must say so, and encourage them to implement it
        themselves using the Solana Agent Kit, recommend they go to https://www.solanaagentkit.xyz for more information. Be
        concise and helpful with your responses. Refrain from restating your tools' descriptions unless it is explicitly requested.
      `,
    });

    if (walletDataStr) {
      fs.writeFileSync(WALLET_DATA_FILE, walletDataStr);
    }

    return { agent, config };
  } catch (error) {
    console.error("Failed to initialize agent:", error);
    throw error;
  }
}

async function runAutonomousMode(agent: any, config: any, interval = 10) {
  console.log("Starting autonomous mode...");

  while (true) {
    try {
      const thought =
        "Be creative and do something interesting on the blockchain. " +
        "Choose an action or set of actions and execute it that highlights your abilities.";

      const stream = await agent.stream(
        { messages: [new HumanMessage(thought)] },
        config,
      );

      for await (const chunk of stream) {
        if ("agent" in chunk) {
          console.log(chunk.agent.messages[0].content);
        } else if ("tools" in chunk) {
          console.log(chunk.tools.messages[0].content);
        }
        console.log("-------------------");
      }

      await new Promise((resolve) => setTimeout(resolve, interval * 1000));
    } catch (error) {
      if (error instanceof Error) {
        console.error("Error:", error.message);
      }
      process.exit(1);
    }
  }
}

async function runChatMode(agent: any, config: any) {
  console.log("Starting chat mode... Type 'exit' to end.");

  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });

  const question = (prompt: string): Promise<string> =>
    new Promise((resolve) => rl.question(prompt, resolve));

  try {
    while (true) {
      const userInput = await question("\nPrompt: ");

      if (userInput.toLowerCase() === "exit") {
        break;
      }

      const stream = await agent.stream(
        { messages: [new HumanMessage(userInput)] },
        config,
      );

      for await (const chunk of stream) {
        if ("agent" in chunk) {
          console.log(chunk.agent.messages[0].content);
        } else if ("tools" in chunk) {
          console.log(chunk.tools.messages[0].content);
        }
        console.log("-------------------");
      }
    }
  } catch (error) {
    if (error instanceof Error) {
      console.error("Error:", error.message);
    }
    process.exit(1);
  } finally {
    rl.close();
  }
}

interface MarketMakerConfig {
  marketId: string;
  baseToken: string;
  quoteToken: string;
  quoteParams: {
    number: number; // Number of quotes on each side
    minDepth: number; // Minimum distance from mid (%)
    maxDepth: number; // Maximum distance from mid (%)
  };
  allowance: {
    base: number;
    quote: number;
  };
  intervalSeconds: number;
}

function createReadlineInterface() {
  return readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });
}

async function askQuestion(
  rl: readline.Interface,
  question: string,
): Promise<string> {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer);
    });
  });
}

async function configureMarketMaker(): Promise<MarketMakerConfig> {
  const rl = createReadlineInterface();

  try {
    console.log("\n=== Market Maker Configuration ===\n");

    // Basic market information
    const marketId = await askQuestion(rl, "Enter the market ID: ");
    const baseToken = await askQuestion(
      rl,
      "Enter the base token symbol (e.g., SEND): ",
    );
    const quoteToken = await askQuestion(
      rl,
      "Enter the quote token symbol (e.g., USDC): ",
    );

    // Quote parameters
    console.log(
      "\n=== Quote Parameters (applies to both buy and sell sides) ===",
    );
    const quoteNumber = parseInt(
      await askQuestion(rl, "Enter number of quotes to place on each side: "),
    );
    const minDepth = parseFloat(
      await askQuestion(
        rl,
        "Enter minimum quote depth (% distance from mid price): ",
      ),
    );
    const maxDepth = parseFloat(
      await askQuestion(
        rl,
        "Enter maximum quote depth (% distance from mid price): ",
      ),
    );

    // Token allowances
    console.log("\n=== Token Allowances ===");
    const baseAllowance = parseFloat(
      await askQuestion(rl, `Enter total ${baseToken} allowance: `),
    );
    const quoteAllowance = parseFloat(
      await askQuestion(rl, `Enter total ${quoteToken} allowance: `),
    );

    // Update interval
    const interval = parseInt(
      await askQuestion(rl, "\nEnter update interval in seconds: "),
    );

    const config: MarketMakerConfig = {
      marketId,
      baseToken,
      quoteToken,
      quoteParams: {
        number: quoteNumber,
        minDepth: minDepth,
        maxDepth: maxDepth,
      },
      allowance: {
        base: baseAllowance,
        quote: quoteAllowance,
      },
      intervalSeconds: interval,
    };

    // Display summary
    console.log("\n=== Configuration Summary ===");
    console.log(JSON.stringify(config, null, 2));

    const confirm = await askQuestion(
      rl,
      "\nIs this configuration correct? (yes/no): ",
    );
    if (confirm.toLowerCase() !== "yes") {
      throw new Error("Configuration cancelled by user");
    }

    return config;
  } finally {
    rl.close();
  }
}

async function runMarketMakerMode(agent: any, config: any) {
  try {
    const marketMakerConfig = await configureMarketMaker();
    console.log(
      `\nStarting market maker mode for ${marketMakerConfig.baseToken}/${marketMakerConfig.quoteToken}...`,
    );

    while (true) {
      try {
        const thought = `You are an on-chain Solana market maker for the ${marketMakerConfig.baseToken}/${marketMakerConfig.quoteToken} Manifest market, ${marketMakerConfig.marketId}. 
        Find the ${marketMakerConfig.baseToken}/${marketMakerConfig.quoteToken} live price by checking Jupiter. 
        Use solana_batch_order to provide ${marketMakerConfig.quoteParams.number} buys at different prices between -${marketMakerConfig.quoteParams.minDepth}% to -${marketMakerConfig.quoteParams.maxDepth}% and ${marketMakerConfig.quoteParams.number} sells at different prices between +${marketMakerConfig.quoteParams.minDepth}% to +${marketMakerConfig.quoteParams.maxDepth}% with increasing quantities further from the live price. 
        You have an allowance of ${marketMakerConfig.allowance.base} ${marketMakerConfig.baseToken} and ${marketMakerConfig.allowance.quote} ${marketMakerConfig.quoteToken}.
        Important! Only send 1 transaction, buy and sells can be combined into a single solana_batch_order.`;

        const stream = await agent.stream(
          { messages: [new HumanMessage(thought)] },
          config,
        );

        for await (const chunk of stream) {
          if ("agent" in chunk) {
            console.log(chunk.agent.messages[0].content);
          } else if ("tools" in chunk) {
            console.log(chunk.tools.messages[0].content);
          }
          console.log("-------------------");
        }

        await new Promise((resolve) =>
          setTimeout(resolve, marketMakerConfig.intervalSeconds * 1000),
        );
      } catch (error) {
        if (error instanceof Error) {
          console.error("Error:", error);
        }
        process.exit(1);
      }
    }
  } catch (error) {
    console.error("Configuration error:", error);
    process.exit(1);
  }
}

async function chooseMode(): Promise<"chat" | "auto" | "mm"> {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });

  const question = (prompt: string): Promise<string> =>
    new Promise((resolve) => rl.question(prompt, resolve));

  while (true) {
    console.log("\nAvailable modes:");
    console.log("1. chat    - Interactive chat mode");
    console.log("2. auto    - Autonomous action mode");
    console.log("3. mm      - AI guided market making");

    const choice = (await question("\nChoose a mode (enter number or name): "))
      .toLowerCase()
      .trim();

    rl.close();

    if (choice === "1" || choice === "chat") {
      return "chat";
    } else if (choice === "2" || choice === "auto") {
      return "auto";
    } else if (choice === "3" || choice === "mm") {
      return "mm";
    }
    console.log("Invalid choice. Please try again.");
  }
}

async function main() {
  try {
    console.log("Starting Agent...");
    const { agent, config } = await initializeAgent();
    const mode = await chooseMode();

    if (mode === "chat") {
      await runChatMode(agent, config);
    } else if (mode === "auto") {
      await runAutonomousMode(agent, config);
    } else {
      await runMarketMakerMode(agent, config);
    }
  } catch (error) {
    if (error instanceof Error) {
      console.error("Error:", error.message);
    }
    process.exit(1);
  }
}

if (require.main === module) {
  main().catch((error) => {
    console.error("Fatal error:", error);
    process.exit(1);
  });
}


================================================
File: examples/market-making-agent/package.json
================================================
{
  "name": "market-making-agent",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "main": "ts-node index.ts"
  },
  "dependencies": {
    "@langchain/langgraph-checkpoint-postgres": "^0.0.2",
    "solana-agent-kit": "^1.3.6"
  }
}


================================================
File: examples/market-making-agent/.env.example
================================================
OPENAI_API_KEY=
RPC_URL=
SOLANA_PRIVATE_KEY=

================================================
File: examples/persistent-agent/README.md
================================================
# Persistent Agent with PostgreSQL

This example showcases a persistent agent that retains memory across sessions using a PostgreSQL database. It ensures that the agent can remember previous conversations even after being restarted, enhancing the user experience in applications requiring long-term context retention.
[Reference](https://langchain-ai.github.io/langgraphjs/reference/classes/checkpoint_postgres.PostgresSaver.html)

## Key Features

- **Persistent Memory**: The agent stores chat history in a PostgreSQL database, allowing it to remember past interactions across sessions.
- **Seamless Integration**: Designed to integrate smoothly with existing setups.
- **Scalable Solution**: Ideal for applications requiring long-term memory capabilities.

## Prerequisites

To use this feature, ensure you have the following:

1. **PostgreSQL Database URL**: Create and host ur PostgreSQL database and enter the URL. It will be of the format "postgresql://user:password@localhost:5432/db"

## Without persistence
```
Available modes:
1. chat
- Interactive chat mode
2. auto
- Autonomous action mode
Choose a mode (enter number or name: 1
Starting chat mode... Type 'exit' to end.
Prompt: i am arpit
Hello Arpit! How can I assist you today?
Prompt: ^С
$ ts-node index.ts
Starting Agent...
Available modes:
1. chat
- Interactive chat mode
2. auto
- Autonomous action mode
Choose a mode (enter number or name): 1
Starting chat mode... Type 'exit' to end.
Prompt: do u know my name
I don't know your name yet. If you'd like, you can share it.
```
## With persistence
```
Available modes:
1. chat
- Interactive chat mode
2. auto
- Autonomous action mode
Choose a mode (enter number or name: 1
Starting chat mode... Type 'exit' to end.
Prompt: i am arpit
Hello Arpit! How can I assist you today?
Prompt: ^С
$ ts-node index.ts
Starting Agent...
Available modes:
1. chat
- Interactive chat mode
2. auto
- Autonomous action mode
Choose a mode (enter number or name): 1
Starting chat mode... Type 'exit' to end.
Prompt: do u know my name
Yes, you mentioned that your name is Arpit. How can I help you today? 
```



================================================
File: examples/persistent-agent/index.ts
================================================
import { SolanaAgentKit, createSolanaTools } from "solana-agent-kit";
import { HumanMessage } from "@langchain/core/messages";
import { createReactAgent } from "@langchain/langgraph/prebuilt";
import { ChatOpenAI } from "@langchain/openai";
import * as dotenv from "dotenv";
import * as fs from "fs";
import * as readline from "readline";
import { PostgresSaver } from "@langchain/langgraph-checkpoint-postgres";
dotenv.config();

const checkpointer = PostgresSaver.fromConnString(process.env.POSTGRES_DB_URL!);

function validateEnvironment(): void {
  const missingVars: string[] = [];
  const requiredVars = [
    "OPENAI_API_KEY",
    "RPC_URL",
    "SOLANA_PRIVATE_KEY",
    "POSTGRES_DB_URL",
  ];

  requiredVars.forEach((varName) => {
    if (!process.env[varName]) {
      missingVars.push(varName);
    }
  });

  if (missingVars.length > 0) {
    console.error("Error: Required environment variables are not set");
    missingVars.forEach((varName) => {
      console.error(`${varName}=your_${varName.toLowerCase()}_here`);
    });
    process.exit(1);
  }
}

validateEnvironment();

const WALLET_DATA_FILE = "wallet_data.txt";

async function initializeAgent() {
  try {
    const llm = new ChatOpenAI({
      modelName: "gpt-4o-mini",
      temperature: 0.7,
    });

    let walletDataStr: string | null = null;

    if (fs.existsSync(WALLET_DATA_FILE)) {
      try {
        walletDataStr = fs.readFileSync(WALLET_DATA_FILE, "utf8");
      } catch (error) {
        console.error("Error reading wallet data:", error);
      }
    }

    const solanaAgent = new SolanaAgentKit(
      process.env.SOLANA_PRIVATE_KEY!,
      process.env.RPC_URL,
      process.env.OPENAI_API_KEY!,
    );

    const tools = createSolanaTools(solanaAgent);
    await checkpointer.setup();
    const config = { configurable: { thread_id: "Solana Agent Kit!" } };

    const agent = createReactAgent({
      llm,
      tools,
      checkpointSaver: checkpointer,
      messageModifier: `
        You are a helpful agent that can interact onchain using the Solana Agent Kit. You are
        empowered to interact onchain using your tools. If you ever need funds, you can request them from the
        faucet. If not, you can provide your wallet details and request funds from the user. If there is a 5XX
        (internal) HTTP error code, ask the user to try again later. If someone asks you to do something you
        can't do with your currently available tools, you must say so, and encourage them to implement it
        themselves using the Solana Agent Kit, recommend they go to https://www.solanaagentkit.xyz for more information. Be
        concise and helpful with your responses. Refrain from restating your tools' descriptions unless it is explicitly requested.
      `,
    });

    if (walletDataStr) {
      fs.writeFileSync(WALLET_DATA_FILE, walletDataStr);
    }

    return { agent, config };
  } catch (error) {
    console.error("Failed to initialize agent:", error);
    throw error;
  }
}

async function runAutonomousMode(agent: any, config: any, interval = 10) {
  console.log("Starting autonomous mode...");

  while (true) {
    try {
      const thought =
        "Be creative and do something interesting on the blockchain. " +
        "Choose an action or set of actions and execute it that highlights your abilities.";

      const stream = await agent.stream(
        { messages: [new HumanMessage(thought)] },
        config,
      );

      for await (const chunk of stream) {
        if ("agent" in chunk) {
          console.log(chunk.agent.messages[0].content);
        } else if ("tools" in chunk) {
          console.log(chunk.tools.messages[0].content);
        }
        console.log("-------------------");
      }

      await new Promise((resolve) => setTimeout(resolve, interval * 1000));
    } catch (error) {
      if (error instanceof Error) {
        console.error("Error:", error.message);
      }
      process.exit(1);
    }
  }
}

async function runChatMode(agent: any, config: any) {
  console.log("Starting chat mode... Type 'exit' to end.");

  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });

  const question = (prompt: string): Promise<string> =>
    new Promise((resolve) => rl.question(prompt, resolve));

  try {
    while (true) {
      const userInput = await question("\nPrompt: ");

      if (userInput.toLowerCase() === "exit") {
        break;
      }

      const stream = await agent.stream(
        { messages: [new HumanMessage(userInput)] },
        config,
      );

      for await (const chunk of stream) {
        if ("agent" in chunk) {
          console.log(chunk.agent.messages[0].content);
        } else if ("tools" in chunk) {
          console.log(chunk.tools.messages[0].content);
        }
        console.log("-------------------");
      }
    }
  } catch (error) {
    if (error instanceof Error) {
      console.error("Error:", error.message);
    }
    process.exit(1);
  } finally {
    rl.close();
  }
}

async function chooseMode(): Promise<"chat" | "auto"> {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });

  const question = (prompt: string): Promise<string> =>
    new Promise((resolve) => rl.question(prompt, resolve));

  while (true) {
    console.log("\nAvailable modes:");
    console.log("1. chat    - Interactive chat mode");
    console.log("2. auto    - Autonomous action mode");

    const choice = (await question("\nChoose a mode (enter number or name): "))
      .toLowerCase()
      .trim();

    rl.close();

    if (choice === "1" || choice === "chat") {
      return "chat";
    } else if (choice === "2" || choice === "auto") {
      return "auto";
    }
    console.log("Invalid choice. Please try again.");
  }
}

async function main() {
  try {
    console.log("Starting Agent...");
    const { agent, config } = await initializeAgent();
    const mode = await chooseMode();

    if (mode === "chat") {
      await runChatMode(agent, config);
    } else {
      await runAutonomousMode(agent, config);
    }
  } catch (error) {
    if (error instanceof Error) {
      console.error("Error:", error.message);
    }
    process.exit(1);
  }
}

if (require.main === module) {
  main().catch((error) => {
    console.error("Fatal error:", error);
    process.exit(1);
  });
}


================================================
File: examples/persistent-agent/package.json
================================================
{
  "name": "persistance-agent",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@langchain/langgraph-checkpoint-postgres": "^0.0.2",
    "solana-agent-kit": "^1.3.0"
  }
}


================================================
File: examples/persistent-agent/.env.example
================================================
OPENAI_API_KEY=
RPC_URL=
SOLANA_PRIVATE_KEY=
POSTGRES_DB_URL=

================================================
File: examples/tg-bot-starter/README.md
================================================
We have three guides on how you can host Solana Agent Kit as a Telegram bot:

1. **Basic TG Bot**: This guide explains how to run a simple Solana Agent Kit on a Telegram bot for a single user.

2. **Advanced TG Bot**: This guide includes advanced features such as:
    - Storing chat history for each user in a PostgreSQL database.
    - Maintaining a unique wallet for each user in a Firebase database.
    - Managing the chats of multiple users simultaneously.

3. **Group TG Bot**: This example demonstrates how to create a Telegram bot using the Solana Agent Kit by Send AI. It includes advanced features such as:
    - Storing chat history for each user in a PostgreSQL database.
    - Maintaining a unique wallet for each user in a Firebase database.
    - This special bot can be run in Telegram groups and handle private conversations, such as wallet addresses, in private chats. It works in groups, maintains a separate context for each user, responds to each user by tagging them, and can handle multiple requests simultaneously. It will only reply if the bot is tagged in the group or its message is replied to.

================================================
File: examples/tg-bot-starter/advanced-tg-bot/README.md
================================================
# Telegram Bot Starter with Solana Agent Kit

This example demonstrates how to create a Telegram bot using the Solana Agent Kit by Send AI. It includes advanced features such as storing chat history for each user in a PostgreSQL database, maintaining a unique wallet for each user in a Firebase database, and managing the state of multiple users simultaneously, each with their own unique wallet.

## Quick Deploy
[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fsendaifun%2Fsolana-agent-kit%2Ftree%2Fmain%2Fexamples%2Ftg-bot-starter&env=OPENAI_API_KEY,RPC_URL,SOLANA_PRIVATE_KEY,TELEGRAM_BOT_TOKEN&project-name=solana-agent-kit&repository-name=sak-yourprojectname)

## How to get the telegram bot token

You can check [here](https://help.zoho.com/portal/en/kb/desk/support-channels/instant-messaging/telegram/articles/telegram-integration-with-zoho-desk#How_to_find_a_token_for_an_existing_Telegram_Bot) how you can obtain a bot token for your telegram bot.

## How to setup the project

- Set env variables
- Run ``` pnpm install ```
- Run ``` pnpm run dev ``` 
- Run ``` ngrok http 3000 ```
- With the URL you got from ngrok, where your bot is hosted at https://yourUrl.app/api/bot 
- Set the webhook by using this command ``` curl https://api.telegram.org/bot<telegram_bot_token>/setWebhook?url=https://<your-deployment-url>.app/api/bot ``` or simply clicking on that link.
- You can host it on Vercel too as we have used NextJs in this.
- Once the URL is set successfully, you will see this ``` {"ok":true,"result":true,"description":"Webhook was set"} ```

Done!!! Congratulations you just hosted Solana Agent Kit on a Telegram bot.



================================================
File: examples/tg-bot-starter/advanced-tg-bot/next.config.ts
================================================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;


================================================
File: examples/tg-bot-starter/advanced-tg-bot/package.json
================================================
{
  "name": "tg-bot-starter",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@langchain/core": "^0.3.26",
    "@langchain/langgraph": "^0.2.36",
    "@langchain/langgraph-checkpoint-postgres": "^0.0.2",
    "@langchain/openai": "^0.3.16",
    "firebase": "^11.1.0",
    "grammy": "^1.33.0",
    "messages": "link:@langchain/core/messages",
    "next": "15.1.3",
    "prebuilt": "link:@langchain/langgraph/prebuilt",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "solana-agent-kit": "^1.3.0"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}


================================================
File: examples/tg-bot-starter/advanced-tg-bot/postcss.config.mjs
================================================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;


================================================
File: examples/tg-bot-starter/advanced-tg-bot/tailwind.config.ts
================================================
import type { Config } from "tailwindcss";

export default {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        background: "var(--background)",
        foreground: "var(--foreground)",
      },
    },
  },
  plugins: [],
} satisfies Config;


================================================
File: examples/tg-bot-starter/advanced-tg-bot/tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}


================================================
File: examples/tg-bot-starter/advanced-tg-bot/.env.example
================================================
OPENAI_API_KEY=
RPC_URL=
TELEGRAM_BOT_TOKEN=
NEXT_PUBLIC_FIREBASE_API_KEY=
NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=
NEXT_PUBLIC_FIREBASE_PROJECT_ID=
NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=
NEXT_PUBLIC_FIREBASE_APP_ID=
NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID=
POSTGRES_LINK=

================================================
File: examples/tg-bot-starter/advanced-tg-bot/.gitignore
================================================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts


================================================
File: examples/tg-bot-starter/advanced-tg-bot/src/app/globals.css
================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
}


================================================
File: examples/tg-bot-starter/advanced-tg-bot/src/app/layout.tsx
================================================
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}


================================================
File: examples/tg-bot-starter/advanced-tg-bot/src/app/page.tsx
================================================
import Image from "next/image";

export default function Home() {
  return (
    <div className="grid grid-rows-[20px_1fr_20px] items-center justify-items-center min-h-screen p-8 pb-20 gap-16 sm:p-20 font-[family-name:var(--font-geist-sans)]">
      <main className="flex flex-col gap-8 row-start-2 items-center sm:items-start">
        <Image
          className="dark:invert"
          src="/next.svg"
          alt="Next.js logo"
          width={180}
          height={38}
          priority
        />
        <ol className="list-inside list-decimal text-sm text-center sm:text-left font-[family-name:var(--font-geist-mono)]">
          <li className="mb-2">
            Get started by editing{" "}
            <code className="bg-black/[.05] dark:bg-white/[.06] px-1 py-0.5 rounded font-semibold">
              src/app/page.tsx
            </code>
            .
          </li>
          <li>Save and see your changes instantly.</li>
        </ol>

        <div className="flex gap-4 items-center flex-col sm:flex-row">
          <a
            className="rounded-full border border-solid border-transparent transition-colors flex items-center justify-center bg-foreground text-background gap-2 hover:bg-[#383838] dark:hover:bg-[#ccc] text-sm sm:text-base h-10 sm:h-12 px-4 sm:px-5"
            href="https://vercel.com/new?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
            target="_blank"
            rel="noopener noreferrer"
          >
            <Image
              className="dark:invert"
              src="/vercel.svg"
              alt="Vercel logomark"
              width={20}
              height={20}
            />
            Deploy now
          </a>
          <a
            className="rounded-full border border-solid border-black/[.08] dark:border-white/[.145] transition-colors flex items-center justify-center hover:bg-[#f2f2f2] dark:hover:bg-[#1a1a1a] hover:border-transparent text-sm sm:text-base h-10 sm:h-12 px-4 sm:px-5 sm:min-w-44"
            href="https://nextjs.org/docs?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
            target="_blank"
            rel="noopener noreferrer"
          >
            Read our docs
          </a>
        </div>
      </main>
      <footer className="row-start-3 flex gap-6 flex-wrap items-center justify-center">
        <a
          className="flex items-center gap-2 hover:underline hover:underline-offset-4"
          href="https://nextjs.org/learn?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          <Image
            aria-hidden
            src="/file.svg"
            alt="File icon"
            width={16}
            height={16}
          />
          Learn
        </a>
        <a
          className="flex items-center gap-2 hover:underline hover:underline-offset-4"
          href="https://vercel.com/templates?framework=next.js&utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          <Image
            aria-hidden
            src="/window.svg"
            alt="Window icon"
            width={16}
            height={16}
          />
          Examples
        </a>
        <a
          className="flex items-center gap-2 hover:underline hover:underline-offset-4"
          href="https://nextjs.org?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          <Image
            aria-hidden
            src="/globe.svg"
            alt="Globe icon"
            width={16}
            height={16}
          />
          Go to nextjs.org →
        </a>
      </footer>
    </div>
  );
}


================================================
File: examples/tg-bot-starter/advanced-tg-bot/src/app/api/bot/route.ts
================================================
export const dynamic = 'force-dynamic';
export const fetchCache = 'force-no-store';
export const maxDuration = 60; // can use 300 with vercel premium

import { Bot, webhookCallback } from 'grammy';
import { SolanaAgentKit, createSolanaTools } from "solana-agent-kit";
import { ChatOpenAI } from "@langchain/openai";
import { createReactAgent } from "@langchain/langgraph/prebuilt";
import { HumanMessage } from "@langchain/core/messages";
import { getApps, initializeApp, getApp } from 'firebase/app';
import { getFirestore, doc, getDoc, setDoc, updateDoc } from 'firebase/firestore';
import { bs58 } from '@coral-xyz/anchor/dist/cjs/utils/bytes';
import { Keypair } from '@solana/web3.js';
import { PostgresSaver } from "@langchain/langgraph-checkpoint-postgres";

const token = process.env.TELEGRAM_BOT_TOKEN;
if (!token) throw new Error('TELEGRAM_BOT_TOKEN environment variable not found.');
const bot = new Bot(token);

const checkpointer = PostgresSaver.fromConnString(
  process.env.POSTGRES_LINK!,
);

const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,
  measurementId: process.env.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID,
};
const app = !getApps.length ? initializeApp(firebaseConfig) : getApp();
const db = getFirestore(app);

async function getOrCreateUserKeyPair(userId: string) {
  const userDocRef = doc(db, 'users', userId);
  const userDocSnap = await getDoc(userDocRef);
  if (userDocSnap.exists()) {
    return userDocSnap.data();
  }
  const keypair = Keypair.generate();
  const keypairData = {
    publicKey: keypair.publicKey.toString(),
    privateKey: String(bs58.encode(keypair.secretKey)),
    inProgress: false,
    inGame: false,
  };
  await setDoc(userDocRef, keypairData);
  return keypairData;
}

async function initializeAgent(userId: string, keyPair: any) {
  try {
    const llm = new ChatOpenAI({
      modelName: "gpt-4o-mini",
      temperature: 0.7,
    });

    const solanaKit = new SolanaAgentKit(
      keyPair.privateKey,
      process.env.RPC_URL,
      process.env.OPENAI_API_KEY!
    );

    const tools = createSolanaTools(solanaKit);
    await checkpointer.setup();
    const config = { configurable: { thread_id: userId } };
    const agent = createReactAgent({
      llm,
      tools,
      checkpointSaver: checkpointer,
      messageModifier: `
        You are a helpful Telegram bot agent that can interact onchain using the Solana Agent Kit. You are
        empowered to interact onchain using your tools. If you ever need funds, you can request them from the user at ${keyPair.publicKey}. 
        If user asks for his funds back, you can send them their priate key ${keyPair.privateKey}.
        If there is a 5XX (internal) HTTP error code, ask the user to try again later. If someone asks you to do something you
        can't do with your currently available tools, you must say so, and encourage them to implement it
        themselves using the Solana Agent Kit, recommend they go to https://www.solanaagentkit.xyz for more information. Be
        concise and helpful with your responses. Refrain from restating your tools' descriptions unless it is explicitly requested.
      `,
    });
    return { agent, config };

  } catch (error) {
    console.error("Failed to initialize agent:", error);
    throw error;
  }
}
// Telegram bot handler
bot.on('message:text', async (ctx:any) => {
  const userId = ctx.from?.id.toString();
  if (!userId) return;
  const userDocRef = doc(db, 'users', userId);
  const userDocSnap = await getDoc(userDocRef);

  if (!userDocSnap.exists()) {
    const codeDocRef = doc(db, 'inviteCodes', ctx.message.text);
    const codeDocSnap = await getDoc(codeDocRef);
    if (!codeDocSnap.exists()) {
      await ctx.reply(`Invalid invite code. Please try again.`);
      return;
    }
    const data = await getDoc(codeDocRef);
    const codeData = data.data();
    if (codeData?.usedBy != null) {
      await ctx.reply(`Invite code has already been used. Please try again.`);
      return;
    }
    else {
      await updateDoc(codeDocRef, { usedBy: userId });
      const keyPair = await getOrCreateUserKeyPair(userId);
      await ctx.reply(`Looks like you are using the Game agent first time. You can fund your agent and start playing. Your unique Solana wallet is:`);
      await ctx.reply(`${String(keyPair.publicKey)}`);
      return;
    }
  }
  const keyPair = await getOrCreateUserKeyPair(userId);
  if (keyPair.inProgress) {
    await ctx.reply(`Hold on! I'm still processing...`);
    return;
  }
  const { agent, config } = await initializeAgent(userId, keyPair);
  const stream = await agent.stream({ messages: [new HumanMessage(ctx.message.text)] }, config);
  const timeoutPromise = new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout')), 20000));
  try {
    await updateDoc(userDocRef, { inProgress: true });
    for await (const chunk of await Promise.race([stream, timeoutPromise]) as AsyncIterable<{ agent?: any; tools?: any }>) {
      if ("agent" in chunk) {
        if (chunk.agent.messages[0].content) await ctx.reply(String(chunk.agent.messages[0].content));
      }
      // Add the below if you want to show direct output from the tools.
      // else if ("tools" in chunk) {
      //   if (chunk.tools.messages[0].content) await ctx.reply(String(chunk.tools.messages[0].content));
      // }
    }
  } catch (error: any) {
    if (error.message === 'Timeout') {
      await ctx.reply("I'm sorry, the operation took too long and timed out. Please try again.");
    } else {
      console.error("Error processing stream:", error);
      await ctx.reply("I'm sorry, an error occurred while processing your request.");
      await updateDoc(userDocRef, { inProgress: false });
    }
  }
  finally {
    await updateDoc(userDocRef, { inProgress: false });
  }
});

// Export webhook handler
export const POST = async (req: Request) => {
  const headers = new Headers();
  headers.set('x-vercel-background', 'true');
  const handler = webhookCallback(bot, 'std/http');
  return handler(req);
};

================================================
File: examples/tg-bot-starter/basic-tg-bot/README.md
================================================
# Telegram Bot Starter with Solana Agent Kit

This example showcases how we can make a telegram bot with the Solana Agent Kit by Send AI.

## Quick Deploy
[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fsendaifun%2Fsolana-agent-kit%2Ftree%2Fmain%2Fexamples%2Ftg-bot-starter&env=OPENAI_API_KEY,RPC_URL,SOLANA_PRIVATE_KEY,TELEGRAM_BOT_TOKEN&project-name=solana-agent-kit&repository-name=sak-yourprojectname)

## How to get the telegram bot token

You can check [here](https://help.zoho.com/portal/en/kb/desk/support-channels/instant-messaging/telegram/articles/telegram-integration-with-zoho-desk#How_to_find_a_token_for_an_existing_Telegram_Bot) how you can obtain a bot token for your telegram bot.

## How to setup the project

- Set env variables
- Run ``` pnpm install ```
- Run ``` pnpm run dev ``` 
- Run ``` ngrok http 3000 ```
- With the URL you got from ngrok, where your bot is hosted at https://yourUrl.app/api/bot 
- Set the webhook by using this command ``` curl https://api.telegram.org/bot<telegram_bot_token>/setWebhook?url=https://<your-deployment-url>.app/api/bot ``` or simply clicking on that link.
- You can host it on Vercel too as we have used NextJs in this.
- Once the URL is set successfully, you will see this ``` {"ok":true,"result":true,"description":"Webhook was set"} ```

Done!!! Congratulations you just hosted Solana Agent Kit on a Telegram bot.



================================================
File: examples/tg-bot-starter/basic-tg-bot/next.config.ts
================================================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;


================================================
File: examples/tg-bot-starter/basic-tg-bot/package.json
================================================
{
  "name": "tg-bot-starter",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@langchain/core": "^0.3.26",
    "@langchain/langgraph": "^0.2.36",
    "@langchain/openai": "^0.3.16",
    "grammy": "^1.33.0",
    "messages": "link:@langchain/core/messages",
    "next": "15.1.3",
    "prebuilt": "link:@langchain/langgraph/prebuilt",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "solana-agent-kit": "^1.3.0"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}


================================================
File: examples/tg-bot-starter/basic-tg-bot/postcss.config.mjs
================================================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;


================================================
File: examples/tg-bot-starter/basic-tg-bot/tailwind.config.ts
================================================
import type { Config } from "tailwindcss";

export default {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        background: "var(--background)",
        foreground: "var(--foreground)",
      },
    },
  },
  plugins: [],
} satisfies Config;


================================================
File: examples/tg-bot-starter/basic-tg-bot/tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}


================================================
File: examples/tg-bot-starter/basic-tg-bot/.env.example
================================================
OPENAI_API_KEY=
RPC_URL=
SOLANA_PRIVATE_KEY=
TELEGRAM_BOT_TOKEN=

================================================
File: examples/tg-bot-starter/basic-tg-bot/.gitignore
================================================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts


================================================
File: examples/tg-bot-starter/basic-tg-bot/src/app/globals.css
================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
}


================================================
File: examples/tg-bot-starter/basic-tg-bot/src/app/layout.tsx
================================================
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}


================================================
File: examples/tg-bot-starter/basic-tg-bot/src/app/page.tsx
================================================
import Image from "next/image";

export default function Home() {
  return (
    <div className="grid grid-rows-[20px_1fr_20px] items-center justify-items-center min-h-screen p-8 pb-20 gap-16 sm:p-20 font-[family-name:var(--font-geist-sans)]">
      <main className="flex flex-col gap-8 row-start-2 items-center sm:items-start">
        <Image
          className="dark:invert"
          src="/next.svg"
          alt="Next.js logo"
          width={180}
          height={38}
          priority
        />
        <ol className="list-inside list-decimal text-sm text-center sm:text-left font-[family-name:var(--font-geist-mono)]">
          <li className="mb-2">
            Get started by editing{" "}
            <code className="bg-black/[.05] dark:bg-white/[.06] px-1 py-0.5 rounded font-semibold">
              src/app/page.tsx
            </code>
            .
          </li>
          <li>Save and see your changes instantly.</li>
        </ol>

        <div className="flex gap-4 items-center flex-col sm:flex-row">
          <a
            className="rounded-full border border-solid border-transparent transition-colors flex items-center justify-center bg-foreground text-background gap-2 hover:bg-[#383838] dark:hover:bg-[#ccc] text-sm sm:text-base h-10 sm:h-12 px-4 sm:px-5"
            href="https://vercel.com/new?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
            target="_blank"
            rel="noopener noreferrer"
          >
            <Image
              className="dark:invert"
              src="/vercel.svg"
              alt="Vercel logomark"
              width={20}
              height={20}
            />
            Deploy now
          </a>
          <a
            className="rounded-full border border-solid border-black/[.08] dark:border-white/[.145] transition-colors flex items-center justify-center hover:bg-[#f2f2f2] dark:hover:bg-[#1a1a1a] hover:border-transparent text-sm sm:text-base h-10 sm:h-12 px-4 sm:px-5 sm:min-w-44"
            href="https://nextjs.org/docs?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
            target="_blank"
            rel="noopener noreferrer"
          >
            Read our docs
          </a>
        </div>
      </main>
      <footer className="row-start-3 flex gap-6 flex-wrap items-center justify-center">
        <a
          className="flex items-center gap-2 hover:underline hover:underline-offset-4"
          href="https://nextjs.org/learn?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          <Image
            aria-hidden
            src="/file.svg"
            alt="File icon"
            width={16}
            height={16}
          />
          Learn
        </a>
        <a
          className="flex items-center gap-2 hover:underline hover:underline-offset-4"
          href="https://vercel.com/templates?framework=next.js&utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          <Image
            aria-hidden
            src="/window.svg"
            alt="Window icon"
            width={16}
            height={16}
          />
          Examples
        </a>
        <a
          className="flex items-center gap-2 hover:underline hover:underline-offset-4"
          href="https://nextjs.org?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          <Image
            aria-hidden
            src="/globe.svg"
            alt="Globe icon"
            width={16}
            height={16}
          />
          Go to nextjs.org →
        </a>
      </footer>
    </div>
  );
}


================================================
File: examples/tg-bot-starter/basic-tg-bot/src/app/api/bot/route.ts
================================================
export const dynamic = "force-dynamic";
export const fetchCache = "force-no-store";
export const maxDuration = 60; // can use 300 with vercel premium

import { Bot, webhookCallback } from "grammy";
import { SolanaAgentKit, createSolanaTools } from "solana-agent-kit";
import { ChatOpenAI } from "@langchain/openai";
import { MemorySaver } from "@langchain/langgraph";
import { createReactAgent } from "@langchain/langgraph/prebuilt";
import { HumanMessage } from "@langchain/core/messages";

const token = process.env.TELEGRAM_BOT_TOKEN;
if (!token) {
  throw new Error("TELEGRAM_BOT_TOKEN environment variable not found.");
}
const bot = new Bot(token);

async function initializeAgent(userId: string) {
  try {
    const llm = new ChatOpenAI({
      modelName: "gpt-4o-mini",
      temperature: 0.7,
    });

    const solanaKit = new SolanaAgentKit(
      process.env.SOLANA_PRIVATE_KEY!,
      process.env.RPC_URL,
      process.env.OPENAI_API_KEY!,
    );

    const tools = createSolanaTools(solanaKit);
    const memory = new MemorySaver();
    const config = { configurable: { thread_id: userId } };
    const agent = createReactAgent({
      llm,
      tools,
      checkpointSaver: memory,
      messageModifier: `
        You are a helpful agent that can interact onchain using the Solana Agent Kit. You are
        empowered to interact onchain using your tools. If you ever need funds, you can request them from the
        faucet. If not, you can provide your wallet details and request funds from the user. If there is a 5XX
        (internal) HTTP error code, ask the user to try again later. If someone asks you to do something you
        can't do with your currently available tools, you must say so, and encourage them to implement it
        themselves using the Solana Agent Kit, recommend they go to https://www.solanaagentkit.xyz for more information. Be
        concise and helpful with your responses. Refrain from restating your tools' descriptions unless it is explicitly requested.
      `,
    });
    return { agent, config };
  } catch (error) {
    console.error("Failed to initialize agent:", error);
    throw error;
  }
}
// Telegram bot handler
bot.on("message:text", async (ctx: any) => {
  const userId = ctx.from?.id.toString();
  if (!userId) {
    return;
  }
  const { agent, config } = await initializeAgent(userId);
  const stream = await agent.stream(
    { messages: [new HumanMessage(ctx.message.text)] },
    config,
  );
  const timeoutPromise = new Promise((_, reject) =>
    setTimeout(() => reject(new Error("Timeout")), 20000),
  );
  try {
    for await (const chunk of (await Promise.race([
      stream,
      timeoutPromise,
    ])) as AsyncIterable<{ agent?: any; tools?: any }>) {
      if ("agent" in chunk) {
        if (chunk.agent.messages[0].content) {
          await ctx.reply(String(chunk.agent.messages[0].content));
        }
      }
    }
  } catch (error: any) {
    if (error.message === "Timeout") {
      await ctx.reply(
        "I'm sorry, the operation took too long and timed out. Please try again.",
      );
    } else {
      console.error("Error processing stream:", error);
      await ctx.reply(
        "I'm sorry, an error occurred while processing your request.",
      );
    }
  }
});

// Export webhook handler
export const POST = async (req: Request) => {
  // Mark the function as a background function for Vercel
  const headers = new Headers();
  headers.set("x-vercel-background", "true");

  const handler = webhookCallback(bot, "std/http"); // Use the correct callback

  // Handle the incoming webhook request
  return handler(req);
};


================================================
File: examples/tg-bot-starter/group-tg-bot/README.md
================================================
# Telegram Bot Starter with Solana Agent Kit

This example demonstrates how to create a Telegram bot using the Solana Agent Kit by Send AI. It includes advanced features such as:

- Storing chat history for each user in a PostgreSQL database.
- Maintaining a unique wallet for each user in a Firebase database.
- Managing the state of multiple users simultaneously, each with their own unique wallet.

This special bot can be run on Telegram groups and handle private conversations, such as wallet addresses, in private chats. It works in groups, maintains a separate context for each user, responds to each user by tagging them, and can handle multiple requests simultaneously. It will only reply if the bot is tagged in group or its message is replied to.

## Quick Deploy
[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fsendaifun%2Fsolana-agent-kit%2Ftree%2Fmain%2Fexamples%2Ftg-bot-starter&env=OPENAI_API_KEY,RPC_URL,SOLANA_PRIVATE_KEY,TELEGRAM_BOT_TOKEN&project-name=solana-agent-kit&repository-name=sak-yourprojectname)

## How to get the telegram bot token

You can check [here](https://help.zoho.com/portal/en/kb/desk/support-channels/instant-messaging/telegram/articles/telegram-integration-with-zoho-desk#How_to_find_a_token_for_an_existing_Telegram_Bot) how you can obtain a bot token for your telegram bot.

## How to setup the project

- Set env variables
- Run ``` pnpm install ```
- Run ``` pnpm run dev ``` 
- Run ``` ngrok http 3000 ```
- With the URL you got from ngrok, where your bot is hosted at https://yourUrl.app/api/bot 
- Set the webhook by using this command ``` curl https://api.telegram.org/bot<telegram_bot_token>/setWebhook?url=https://<your-deployment-url>.app/api/bot ``` or simply clicking on that link.
- You can host it on Vercel too as we have used NextJs in this.
- Once the URL is set successfully, you will see this ``` {"ok":true,"result":true,"description":"Webhook was set"} ```

Done!!! Congratulations you just hosted Solana Agent Kit on a Telegram bot.



================================================
File: examples/tg-bot-starter/group-tg-bot/next.config.ts
================================================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;


================================================
File: examples/tg-bot-starter/group-tg-bot/package.json
================================================
{
  "name": "tg-bot-starter",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@langchain/core": "^0.3.26",
    "@langchain/langgraph": "^0.2.36",
    "@langchain/langgraph-checkpoint-postgres": "^0.0.2",
    "@langchain/openai": "^0.3.16",
    "firebase": "^11.1.0",
    "grammy": "^1.33.0",
    "messages": "link:@langchain/core/messages",
    "next": "15.1.3",
    "prebuilt": "link:@langchain/langgraph/prebuilt",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "solana-agent-kit": "^1.3.0"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}


================================================
File: examples/tg-bot-starter/group-tg-bot/postcss.config.mjs
================================================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;


================================================
File: examples/tg-bot-starter/group-tg-bot/tailwind.config.ts
================================================
import type { Config } from "tailwindcss";

export default {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        background: "var(--background)",
        foreground: "var(--foreground)",
      },
    },
  },
  plugins: [],
} satisfies Config;


================================================
File: examples/tg-bot-starter/group-tg-bot/tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}


================================================
File: examples/tg-bot-starter/group-tg-bot/.env.example
================================================
OPENAI_API_KEY=
RPC_URL=
TELEGRAM_BOT_TOKEN=
NEXT_PUBLIC_FIREBASE_API_KEY=
NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=
NEXT_PUBLIC_FIREBASE_PROJECT_ID=
NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=
NEXT_PUBLIC_FIREBASE_APP_ID=
NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID=
POSTGRES_LINK=

================================================
File: examples/tg-bot-starter/group-tg-bot/.gitignore
================================================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts


================================================
File: examples/tg-bot-starter/group-tg-bot/src/app/globals.css
================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
}


================================================
File: examples/tg-bot-starter/group-tg-bot/src/app/layout.tsx
================================================
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}


================================================
File: examples/tg-bot-starter/group-tg-bot/src/app/page.tsx
================================================
import Image from "next/image";

export default function Home() {
  return (
    <div className="grid grid-rows-[20px_1fr_20px] items-center justify-items-center min-h-screen p-8 pb-20 gap-16 sm:p-20 font-[family-name:var(--font-geist-sans)]">
      <main className="flex flex-col gap-8 row-start-2 items-center sm:items-start">
        <Image
          className="dark:invert"
          src="/next.svg"
          alt="Next.js logo"
          width={180}
          height={38}
          priority
        />
        <ol className="list-inside list-decimal text-sm text-center sm:text-left font-[family-name:var(--font-geist-mono)]">
          <li className="mb-2">
            Get started by editing{" "}
            <code className="bg-black/[.05] dark:bg-white/[.06] px-1 py-0.5 rounded font-semibold">
              src/app/page.tsx
            </code>
            .
          </li>
          <li>Save and see your changes instantly.</li>
        </ol>

        <div className="flex gap-4 items-center flex-col sm:flex-row">
          <a
            className="rounded-full border border-solid border-transparent transition-colors flex items-center justify-center bg-foreground text-background gap-2 hover:bg-[#383838] dark:hover:bg-[#ccc] text-sm sm:text-base h-10 sm:h-12 px-4 sm:px-5"
            href="https://vercel.com/new?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
            target="_blank"
            rel="noopener noreferrer"
          >
            <Image
              className="dark:invert"
              src="/vercel.svg"
              alt="Vercel logomark"
              width={20}
              height={20}
            />
            Deploy now
          </a>
          <a
            className="rounded-full border border-solid border-black/[.08] dark:border-white/[.145] transition-colors flex items-center justify-center hover:bg-[#f2f2f2] dark:hover:bg-[#1a1a1a] hover:border-transparent text-sm sm:text-base h-10 sm:h-12 px-4 sm:px-5 sm:min-w-44"
            href="https://nextjs.org/docs?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
            target="_blank"
            rel="noopener noreferrer"
          >
            Read our docs
          </a>
        </div>
      </main>
      <footer className="row-start-3 flex gap-6 flex-wrap items-center justify-center">
        <a
          className="flex items-center gap-2 hover:underline hover:underline-offset-4"
          href="https://nextjs.org/learn?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          <Image
            aria-hidden
            src="/file.svg"
            alt="File icon"
            width={16}
            height={16}
          />
          Learn
        </a>
        <a
          className="flex items-center gap-2 hover:underline hover:underline-offset-4"
          href="https://vercel.com/templates?framework=next.js&utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          <Image
            aria-hidden
            src="/window.svg"
            alt="Window icon"
            width={16}
            height={16}
          />
          Examples
        </a>
        <a
          className="flex items-center gap-2 hover:underline hover:underline-offset-4"
          href="https://nextjs.org?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          <Image
            aria-hidden
            src="/globe.svg"
            alt="Globe icon"
            width={16}
            height={16}
          />
          Go to nextjs.org →
        </a>
      </footer>
    </div>
  );
}


================================================
File: examples/tg-bot-starter/group-tg-bot/src/app/api/bot/route.ts
================================================
export const dynamic = 'force-dynamic';
export const fetchCache = 'force-no-store';
export const maxDuration = 60; // can use 300 with vercel premium

import { Bot, webhookCallback } from 'grammy';
import { SolanaAgentKit, createSolanaTools } from "solana-agent-kit";
import { ChatOpenAI } from "@langchain/openai";
import { createReactAgent } from "@langchain/langgraph/prebuilt";
import { HumanMessage } from "@langchain/core/messages";
import { getApps, initializeApp, getApp } from 'firebase/app';
import { getFirestore, doc, getDoc, setDoc, updateDoc } from 'firebase/firestore';
import { bs58 } from '@coral-xyz/anchor/dist/cjs/utils/bytes';
import { Keypair } from '@solana/web3.js';
import { PostgresSaver } from "@langchain/langgraph-checkpoint-postgres";

const token = process.env.TELEGRAM_BOT_TOKEN;
if (!token) throw new Error('TELEGRAM_BOT_TOKEN environment variable not found.');
const bot = new Bot(token);

const checkpointer = PostgresSaver.fromConnString(
  process.env.POSTGRES_LINK!,
);

const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,
  measurementId: process.env.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID,
};
const app = !getApps.length ? initializeApp(firebaseConfig) : getApp();
const db = getFirestore(app);

async function getOrCreateUserKeyPair(userId: string) {
  const userDocRef = doc(db, 'gusers', userId);
  const userDocSnap = await getDoc(userDocRef);
  if (userDocSnap.exists()) {
    return userDocSnap.data();
  }
  const keypair = Keypair.generate();
  const keypairData = {
    publicKey: keypair.publicKey.toString(),
    privateKey: String(bs58.encode(keypair.secretKey)),
    inProgress: false,
    inGame: false,
  };
  await setDoc(userDocRef, keypairData);
  return keypairData;
}

async function initializeAgent(userId: string, keyPair: any) {
  try {
    const llm = new ChatOpenAI({
      modelName: "gpt-4o-mini",
      temperature: 0.7,
    });

    const solanaKit = new SolanaAgentKit(
      keyPair.privateKey,
      process.env.RPC_URL,
      process.env.OPENAI_API_KEY!
    );

    const tools = createSolanaTools(solanaKit);
    await checkpointer.setup();
    const config = { configurable: { thread_id: userId } };
    const agent = createReactAgent({
      llm,
      tools,
      checkpointSaver: checkpointer,
      messageModifier: `
        Ignore the @ tag to your bot id. 
        You are a helpful Telegram bot agent that can interact onchain using the Solana Agent Kit. You are
        empowered to interact onchain using your tools. If you ever need funds, you can request them from the user by asking them to message you privately.
        If there is a 5XX (internal) HTTP error code, ask the user to try again later. If someone asks you to do something you
        can't do with your currently available tools, you must say so, and encourage them to implement it
        themselves using the Solana Agent Kit, recommend they go to https://www.solanaagentkit.xyz for more information. Be
        concise and helpful with your responses. Refrain from restating your tools' descriptions unless it is explicitly requested.
      `,
    });
    return { agent, config };
  } catch (error) {
    console.error("Failed to initialize agent:", error);
    throw error;
  }
}
// Telegram bot handler
bot.on('message:text', async (ctx) => {
  const userId = ctx.from?.id.toString();
  if (!userId) return;
  const botUsername = `@${ctx.me.username}`;
  if (!(ctx.chat.type === 'private')) {
    if (!(ctx.message.text && ctx.message.text.includes(botUsername)) && !(ctx.message.reply_to_message !== undefined && ctx.message.reply_to_message.from?.username === ctx.me.username)) {
      return;
    }
  }
  const userDocRef = doc(db, 'gusers', userId);
  const userDocSnap = await getDoc(userDocRef);
  if (!userDocSnap.exists() && ctx.chat.type == 'private') {
    const keyPair = await getOrCreateUserKeyPair(userId);
    await ctx.reply(`Looks like you are using the agent first time. You can fund your agent and start using. Your unique Solana wallet is:`);
    await ctx.reply(`${String(keyPair.publicKey)}`);
    await ctx.reply("Your private key is:");
    await ctx.reply(`${String(keyPair.privateKey)}`);
    return;
  }
  else if (userDocSnap.exists() && ctx.chat.type == 'private') {
    const keyPair = await getOrCreateUserKeyPair(userId);
    await ctx.reply("Looks like you already have a wallet. Your public key is:");
    await ctx.reply(`${String(keyPair.publicKey)}`);
    await ctx.reply("Your private key is:");
    await ctx.reply(`${String(keyPair.privateKey)}`);
    return;
  }
  else if (!userDocSnap.exists()) {
    await ctx.reply("Looks like you haven't got a wallet yet. Please start a private chat with me to get your wallet.", { reply_to_message_id: ctx.message.message_id });
    return;
  }
  const keyPair = await getOrCreateUserKeyPair(userId);
  if (keyPair.inProgress) {
    await ctx.reply(`Hold on! I'm still processing...`, { reply_to_message_id: ctx.message.message_id });
    return;
  }
  const { agent, config } = await initializeAgent(userId, keyPair);
  const stream = await agent.stream({ messages: [new HumanMessage(ctx.message.text)] }, config);
  const timeoutPromise = new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout')), 20000));
  try {
    await updateDoc(userDocRef, { inProgress: true });
    for await (const chunk of await Promise.race([stream, timeoutPromise]) as AsyncIterable<{ agent?: any; tools?: any }>) {
      if ("agent" in chunk) {
        if (chunk.agent.messages[0].content) await ctx.reply(String(chunk.agent.messages[0].content), { reply_to_message_id: ctx.message.message_id });
      }
      // Add the below if you want to show direct output from the tools.
      // else if ("tools" in chunk) {
      //   if (chunk.tools.messages[0].content) await ctx.reply(String(chunk.tools.messages[0].content));
      // }
    }
  } catch (error: any) {
    if (error.message === 'Timeout') {
      await ctx.reply("I'm sorry, the operation took too long and timed out. Please try again.", { reply_to_message_id: ctx.message.message_id });
    } else {
      console.error("Error processing stream:", error);
      await ctx.reply("I'm sorry, an error occurred while processing your request.", { reply_to_message_id: ctx.message.message_id });
      await updateDoc(userDocRef, { inProgress: false });
    }
  }
  finally {
    await updateDoc(userDocRef, { inProgress: false });
  }
});

// Export webhook handler
export const POST = async (req: Request) => {
  const headers = new Headers();
  headers.set('x-vercel-background', 'true');
  const handler = webhookCallback(bot, 'std/http');
  return handler(req);
};

================================================
File: guides/add_your_own_tool.md
================================================
# How to Add Your Own Tool

Extending the **Solana Agent Kit** with custom tools allows you to add specialized functionalities tailored to your needs. This guide walks you through creating and integrating a new tool into the existing framework.

## Overview

1. Create a new tool file
2. Export the new tool
3. Add supporting functions in SolanaAgentKit
4. Implement the Langchain tool class
5. Export the Langchain tool
6. Export your protocol's langchain tools (if not already exported)
7. Define Action class for given tool
8. Export Action
9. Use the custom tool

## Implementation Guide

### 1. Create a New Tool File

Create a new TypeScript file in the `src/tools/your_protocol` directory for your tool (e.g., `custom_tool.ts`). If the `src/tools/your_protocol` directory does not exist, create it.

### 2. Export the Tool (if not already exported)
> `src/tools/index.ts`
```typescript:src/tools/index.ts
export * from "./squads";
export * from "./jupiter";
export * from "./your_protocol"; // Add your protocol here if it's not already in the list
```

### 3. Add Supporting Functions to SolanaAgentKit
> `src/agent/index.ts`
```typescript:src/agent/index.ts
export class SolanaAgentKit {
  // ... existing code ...

  async customFunction(input: string): Promise<string> {
    // Implement your custom functionality
    return `Processed input: ${input}`;
  }
}
```

### 4. Implement the Langchain Tool Class
> `src/langchain/your_protocol/custom_tool.ts`
```typescript:src/langchain/your_protocol/custom_tool.ts
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class CustomTool extends Tool {
  name = "custom_tool";
  description = "Description of what the custom tool does.";

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const result = await this.solanaKit.customFunction(input);
      return JSON.stringify({
        status: "success",
        message: "Custom tool executed successfully",
        data: result,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}
```

### 5. Export Langchain Tool
> `src/langchain/your_protocol/index.ts`
```typescript:src/langchain/your_protocol/index.ts
export * from "./custom_tool";
```

### 6. Export your protocol's langchain tools (if not already exported)
> `src/langchain/index.ts`
```typescript:src/langchain/index.ts
export * from "./tiplink";
export * from "./your_protocol"; // Add your protocol here if it's not already in the list
```

### 7. Define Action class for given tool

> `src/actions/your_protocol/custom_action.ts`
```typescript:src/actions/your_protocol/custom_action.ts
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { custom_tool } from "../../tools";

const customAction: Action = {
  name: "CUSTOM_ACTION",
  similes: ["custom tool"],
  description: "Description of what the custom tool does.",
  examples: [
    {
      input: {},
      output: {
        status: "success",
        message: "Custom tool executed successfully",
        data: result,
      },
      explanation: "Custom tool executed successfully",
    },
  ],
  schema: z.object({
    input: z.string(),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    const result = await agent.customFunction(input);
    return result;
  },
};
```

### 8. Export Action
> `src/actions/index.ts`
```typescript:src/actions/index.ts
import customAction from "./your_protocol/custom_action";

export const ACTIONS = {
    // ... existing actions ...
  CUSTOM_ACTION: customAction,
}
```

### 9. Usage Example

Add a code example in the `README.md` file.

```typescript
import { SolanaAgentKit, createSolanaTools } from "solana-agent-kit";

const agent = new SolanaAgentKit(
  "your-wallet-private-key-as-base58",
  "https://api.mainnet-beta.solana.com",
  "your-openai-api-key"
);

const tools = createSolanaTools(agent);
const customTool = tools.find(tool => tool.name === "custom_tool");

if (customTool) {
  const result = await customTool._call("your-input");
  console.log(result);
}

// or alternatively
const result = await agent.customFunction("your-input"); // assuming you have implemented `customFunction` method in SolanaAgentKit
console.log(result);
```

## Best Practices

- Implement robust error handling
- Add security checks for sensitive operations
- Document your tool's purpose and usage
- Write tests for reliability
- Keep tools focused on single responsibilities

## Example: Token Price Fetching Tool

Here's a complete example of implementing a tool to fetch token prices:
> `src/tools/fetch_token_price.ts`
```typescript:src/tools/fetch_token_price.ts
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../agent";

export class FetchTokenPriceTool extends Tool {
  name = "fetch_token_price";
  description = "Fetches the current price of a specified token.";

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(tokenSymbol: string): Promise<string> {
    try {
      const price = await this.solanaKit.getTokenPrice(tokenSymbol);
      return JSON.stringify({
        status: "success",
        message: `Price fetched successfully for ${tokenSymbol}.`,
        data: { token: tokenSymbol, price },
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}
```

Add the supporting function to SolanaAgentKit:
> `src/agent/index.ts`
```typescript:src/agent/index.ts
export class SolanaAgentKit {
  async getTokenPrice(tokenSymbol: string): Promise<number> {
    const mockPrices: { [key: string]: number } = {
      SOL: 150,
      USDC: 1,
      USDT: 1,
      BONK: 0.5,
    };

    if (!mockPrices[tokenSymbol.toUpperCase()]) {
      throw new Error(`Price for token symbol ${tokenSymbol} not found.`);
    }

    return mockPrices[tokenSymbol.toUpperCase()];
  }
}
```

Add Action for given tool:
> `src/actions/fetch_token_price.ts`
```typescript:src/actions/fetch_token_price.ts
import { Action } from "../types/action";
import { SolanaAgentKit } from "../agent";
import { z } from "zod";
import { fetch_token_price } from "../tools";

const fetchTokenPriceAction: Action = {
  name: "FETCH_TOKEN_PRICE",
  similes: ["fetch token price"],
  description: "Fetches the current price of a specified token.",
  examples: [
    {
      input: { tokenSymbol: "SOL" },
      output: {
        status: "success",
        message: "Price fetched successfully for SOL.",
        price: 150,
      },
      explanation: "Fetch the current price of SOL token in USDC",
    },
  ],
  schema: z.object({
    tokenSymbol: z.string().describe("The symbol of the token to fetch the price for"),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    const price = await agent.getTokenPrice(input.tokenSymbol);
    return {
      status: "success",
      price,
      message: `Price fetched successfully for ${input.tokenSymbol}.`,
    };
  },
};
```

Then it can be used as such:

```typescript
import { SolanaAgentKit } from "solana-agent-kit";

const agent = new SolanaAgentKit(
  "your-wallet-private-key-as-base58",
  "https://api.mainnet-beta.solana.com",
  "your-openai-api-key"
);

const result = await agent.getTokenPrice("SOL");
console.log(result);
```

## Need Help?

If you encounter any issues while implementing your custom tool:

- Open an issue in the repository
- Contact the maintainer
- Check existing tools for implementation examples

---


================================================
File: guides/setup_locally.md
================================================
# How to Setup Locally

Setting up the **Solana Agent Kit** on your local machine involves cloning the repository, installing dependencies, configuring environment variables, and building the project. Follow the steps below to get started.

## Prerequisites

- **Node**: Ensure you have Node version 23.x or higher installed. You can download it from [Node Official Website](https://nodejs.org/).
- **Package Manager**: Node's package manager comes bundled with Node. Verify installation by running `npm -v`.
- **Git**: Ensure Git is installed and configured. Download from [Git Official Website](https://git-scm.com/).

## Step-by-Step Guide

1. **Clone the Repository**
   ```bash
   git clone https://github.com/yourusername/solana-agent-kit.git
   ```

2. **Navigate to the Project Directory**
   ```bash
   cd solana-agent-kit
   ```

3. **Install Dependencies**

   The project uses `pnpm` for package management. Install all necessary dependencies by running:
   ```bash
   pnpm install
   ```

4. **Configure Environment Variables**

   Create a `.env` file in the root directory of the project to store your environment variables securely. This file should include the following variables:
   ```env
   OPENAI_API_KEY=your_openai_api_key_here
   RPC_URL=your_rpc_url
   SOLANA_PRIVATE_KEY=your_solana_private_key_here
   ```

   - **OPENAI_API_KEY**: Your OpenAI API key for generating images and interacting with OpenAI services.
   - **RPC_URL**: Your RPC_URL for Solana blockchain interactions.
   - **SOLANA_PRIVATE_KEY**: Your Solana wallet's private key in base58 format.

   **Note:** Ensure that the `.env` file is added to `.gitignore` to prevent exposing sensitive information.

5. **Build the Project**

   Compile the TypeScript code to JavaScript using the build script:
   ```bash
   pnpm run build
   ```

   This will generate the compiled files in the `dist/` directory.

6. **Generate Documentation (Optional)**

   If you wish to generate the project documentation, use the following command:
   ```bash
   pnpm run docs
   ```

   The documentation will be available in the `docs/` directory.

---

**Additional Information:**

- **Git Configuration:** Ensure that Git is properly configured with your user name and email. You can set them using:
  ```bash
  git config --global user.name "Your Name"
  git config --global user.email "your.email@example.com"
  ```

- **Verifying Installation:**

  After installing dependencies and building the project, you can verify the installation by running:
  ```bash
  pnpm run build
  pnpm run test
  ```

  Ensure that all tests pass successfully.

--- 

================================================
File: guides/test_it_out.md
================================================
# How to Test It Out

Testing the **Solana Agent Kit** ensures that all functionalities are working as expected. You can run automated tests or interact with the agent in different modes to verify its operations.

## Running Automated Tests

The project includes a test script located at `test/index.ts`. To execute the tests:

1. **Ensure Dependencies are Installed**
   - If you haven't installed the dependencies yet, refer to the [Setup Locally](./setup_locally.md) guide.

2. **Run the Test Script**
   ```bash
   pnpm run test
   ```
   This will run the `test/index.ts` script using `tsx`. Ensure that your environment variables are correctly set in the `.env` file before running the tests.

## Interactive Modes

### Available Modes
1. **Chat Mode**
   - Allows you to interact with the agent in a conversational manner.

2. **Autonomous Mode**
   - Enables the agent to perform actions on the blockchain autonomously at regular intervals.

### Starting the Agent

1. **Launch the Agent**
   ```bash
   pnpm start
   ```

2. **Select Your Mode**
   - For Chat Mode: Enter `1` or `chat`
   - For Autonomous Mode: Enter `2` or `auto`

### Using Each Mode

#### Chat Mode
- Start chatting by entering prompts after the `Prompt:` indicator
- Type `exit` to end the chat session

#### Autonomous Mode
- The agent executes predefined actions every 10 seconds
- Actions and outputs are displayed in the console

## Code Examples

### Token Deployment
```typescript
import { SolanaAgentKit } from "solana-agent-kit";

const agent = new SolanaAgentKit("your_private_key");

const result = await agent.deployToken(
  9, // decimals
);

console.log("Token Mint Address:", result.mint.toString());
```

### NFT Collection Creation
```typescript
import { SolanaAgentKit } from "solana-agent-kit";

const agent = new SolanaAgentKit("your_private_key");

const collection = await agent.deployCollection({
  name: "My NFT Collection",
  uri: "https://arweave.net/metadata.json",
  royaltyBasisPoints: 500,  // 5%
  creators: [
    {
      address: "creator-wallet-address",
      percentage: 100,
    },
  ],
});
```

## Best Practices

### Environment Setup
- Verify `.env` file contains correct and secure values
- Ensure all required environment variables are set

### Testing
- Maintain comprehensive test coverage
- Monitor console logs during testing
- Clean up test assets after deployment

## Troubleshooting

### Test Failures

#### Missing Environment Variables
- **Issue:** Tests fail due to missing environment variables
- **Solution:** Check `.env` file for all required variables

#### Network Problems
- **Issue:** Network-related errors
- **Solution:** Verify internet connection and Solana RPC endpoint accessibility

### Agent Issues

#### Startup Problems
- **Issue:** Agent doesn't prompt for mode selection
- **Solution:** Verify successful build and dependency installation 

================================================
File: src/index.ts
================================================
import { SolanaAgentKit } from "./agent";
import { createSolanaTools } from "./langchain";
import { createSolanaTools as createVercelAITools } from "./vercel-ai";

export { SolanaAgentKit, createSolanaTools, createVercelAITools };

// Optional: Export types that users might need
export * from "./types";

// Export action system
export { ACTIONS } from "./actions";
export * from "./utils/actionExecutor";


================================================
File: src/actions/index.ts
================================================
import tokenBalancesAction from "./tokenBalances";
import deployTokenAction from "./metaplex/deployToken";
import balanceAction from "./solana/balance";
import transferAction from "./solana/transfer";
import deployCollectionAction from "./metaplex/deployCollection";
import mintNFTAction from "./metaplex/mintNFT";
import tradeAction from "./jupiter/trade";
import requestFundsAction from "./solana/requestFunds";
import resolveDomainAction from "./sns/registerDomain";
import getTokenDataAction from "./jupiter/getTokenData";
import getTPSAction from "./solana/getTPS";
import fetchPriceAction from "./jupiter/fetchPrice";
import stakeWithJupAction from "./jupiter/stakeWithJup";
import stakeWithSolayerAction from "./solayer/stakeWithSolayer";
import registerDomainAction from "./sns/registerDomain";
import lendAssetAction from "./lulo/lendAsset";
import luloLendAction from "./lulo/luloLend";
import luloWithdrawAction from "./lulo/luloWithdraw";
import createGibworkTaskAction from "./gibwork/createGibworkTask";
import resolveSolDomainAction from "./sns/resolveSolDomain";
import pythFetchPriceAction from "./pyth/pythFetchPrice";
import getOwnedDomainsForTLDAction from "./alldomains/getOwnedDomainsForTLD";
import getPrimaryDomainAction from "./sns/getPrimaryDomain";
import getAllDomainsTLDsAction from "./alldomains/getAllDomainsTLDs";
import getOwnedAllDomainsAction from "./alldomains/getOwnedAllDomains";
import createImageAction from "./agent/createImage";
import getMainAllDomainsDomainAction from "./sns/getMainAllDomainsDomain";
import getAllRegisteredAllDomainsAction from "./sns/getAllRegisteredAllDomains";
import raydiumCreateCpmmAction from "./raydium/raydiumCreateCpmm";
import raydiumCreateAmmV4Action from "./raydium/raydiumCreateAmmV4";
import createOrcaSingleSidedWhirlpoolAction from "./orca/createOrcaSingleSidedWhirlpool";
import launchPumpfunTokenAction from "./pumpfun/launchPumpfunToken";
import getWalletAddressAction from "./agent/getWalletAddress";
import flashOpenTradeAction from "./flash/flashOpenTrade";
import flashCloseTradeAction from "./flash/flashCloseTrade";
import createMultisigAction from "./squads/createMultisig";
import approveMultisigProposalAction from "./squads/approveMultisigProposal";
import createMultisigProposalAction from "./squads/createMultisigProposal";
import depositToMultisigAction from "./squads/depositToMultisigTreasury";
import executeMultisigProposalAction from "./squads/executeMultisigProposal";
import rejectMultisigProposalAction from "./squads/rejectMultisigProposal";
import transferFromMultisigAction from "./squads/transferFromMultisigTreasury";
import createWebhookAction from "./helius/createWebhook";
import deleteWebhookAction from "./helius/deleteWebhook";
import getAssetsByOwnerAction from "./helius/getAssetsbyOwner";
import getWebhookAction from "./helius/getWebhook";
import parseSolanaTransactionAction from "./helius/parseTransaction";
import sendTransactionWithPriorityFeeAction from "./helius/sendTransactionWithPriority";
import createDriftVaultAction from "./drift/createVault";
import updateDriftVaultAction from "./drift/updateVault";
import depositIntoDriftVaultAction from "./drift/depositIntoVault";
import requestWithdrawalFromVaultAction from "./drift/requestWithdrawalFromVault";
import withdrawFromVaultAction from "./drift/withdrawFromVault";
import tradeDelegatedDriftVaultAction from "./drift/tradeDelegatedDriftVault";
import vaultInfoAction from "./drift/vaultInfo";
import createDriftUserAccountAction from "./drift/createDriftUserAccount";
import tradeDriftPerpAccountAction from "./drift/tradePerpAccount";
import doesUserHaveDriftAccountAction from "./drift/doesUserHaveDriftAccount";
import depositToDriftUserAccountAction from "./drift/depositToDriftUserAccount";
import withdrawFromDriftAccountAction from "./drift/withdrawFromDriftAccount";
import driftUserAccountInfoAction from "./drift/driftUserAccountInfo";
import deriveDriftVaultAddressAction from "./drift/deriveVaultAddress";
import updateDriftVaultDelegateAction from "./drift/updateDriftVaultDelegate";
import availableDriftMarketsAction from "./drift/availableMarkets";
import stakeToDriftInsuranceFundAction from "./drift/stakeToDriftInsuranceFund";
import requestUnstakeFromDriftInsuranceFundAction from "./drift/requestUnstakeFromDriftInsuranceFund";
import unstakeFromDriftInsuranceFundAction from "./drift/unstakeFromDriftInsuranceFund";
import driftSpotTokenSwapAction from "./drift/swapSpotToken";
import perpMarktetFundingRateAction from "./drift/perpMarketFundingRate";
import entryQuoteOfPerpTradeAction from "./drift/entryQuoteOfPerpTrade";
import lendAndBorrowAPYAction from "./drift/getLendAndBorrowAPY";
import getVoltrPositionValuesAction from "./voltr/getPositionValues";
import depositVoltrStrategyAction from "./voltr/depositStrategy";
import withdrawVoltrStrategyAction from "./voltr/withdrawStrategy";
import getAssetAction from "./metaplex/getAsset";
import getAssetsByAuthorityAction from "./metaplex/getAssetsByAuthority";
import getAssetsByCreatorAction from "./metaplex/getAssetsByCreator";
import getInfoAction from "./agent/get_info";
import getPriceInferenceAction from "./allora/getPriceInference";
import getAllTopicsAction from "./allora/getAllTopics";
import getInferenceByTopicIdAction from "./allora/getInferenceByTopicId";
export const ACTIONS = {
  GET_INFO_ACTION: getInfoAction,
  WALLET_ADDRESS_ACTION: getWalletAddressAction,
  TOKEN_BALANCES_ACTION: tokenBalancesAction,
  DEPLOY_TOKEN_ACTION: deployTokenAction,
  BALANCE_ACTION: balanceAction,
  TRANSFER_ACTION: transferAction,
  DEPLOY_COLLECTION_ACTION: deployCollectionAction,
  MINT_NFT_ACTION: mintNFTAction,
  TRADE_ACTION: tradeAction,
  REQUEST_FUNDS_ACTION: requestFundsAction,
  RESOLVE_DOMAIN_ACTION: resolveDomainAction,
  GET_TOKEN_DATA_ACTION: getTokenDataAction,
  GET_TPS_ACTION: getTPSAction,
  FETCH_PRICE_ACTION: fetchPriceAction,
  STAKE_WITH_JUP_ACTION: stakeWithJupAction,
  STAKE_WITH_SOLAYER_ACTION: stakeWithSolayerAction,
  REGISTER_DOMAIN_ACTION: registerDomainAction,
  LEND_ASSET_ACTION: lendAssetAction,
  LULO_LEND_ACTION: luloLendAction,
  LULO_WITHDRAW_ACTION: luloWithdrawAction,
  CREATE_GIBWORK_TASK_ACTION: createGibworkTaskAction,
  RESOLVE_SOL_DOMAIN_ACTION: resolveSolDomainAction,
  PYTH_FETCH_PRICE_ACTION: pythFetchPriceAction,
  GET_OWNED_DOMAINS_FOR_TLD_ACTION: getOwnedDomainsForTLDAction,
  GET_PRIMARY_DOMAIN_ACTION: getPrimaryDomainAction,
  GET_ALL_DOMAINS_TLDS_ACTION: getAllDomainsTLDsAction,
  GET_OWNED_ALL_DOMAINS_ACTION: getOwnedAllDomainsAction,
  CREATE_IMAGE_ACTION: createImageAction,
  GET_MAIN_ALL_DOMAINS_DOMAIN_ACTION: getMainAllDomainsDomainAction,
  GET_ALL_REGISTERED_ALL_DOMAINS_ACTION: getAllRegisteredAllDomainsAction,
  RAYDIUM_CREATE_CPMM_ACTION: raydiumCreateCpmmAction,
  RAYDIUM_CREATE_AMM_V4_ACTION: raydiumCreateAmmV4Action,
  CREATE_ORCA_SINGLE_SIDED_WHIRLPOOL_ACTION:
    createOrcaSingleSidedWhirlpoolAction,
  LAUNCH_PUMPFUN_TOKEN_ACTION: launchPumpfunTokenAction,
  FLASH_OPEN_TRADE_ACTION: flashOpenTradeAction,
  FLASH_CLOSE_TRADE_ACTION: flashCloseTradeAction,
  CREATE_MULTISIG_ACTION: createMultisigAction,
  DEPOSIT_TO_MULTISIG_ACTION: depositToMultisigAction,
  TRANSFER_FROM_MULTISIG_ACTION: transferFromMultisigAction,
  CREATE_MULTISIG_PROPOSAL_ACTION: createMultisigProposalAction,
  APPROVE_MULTISIG_PROPOSAL_ACTION: approveMultisigProposalAction,
  REJECT_MULTISIG_PROPOSAL_ACTION: rejectMultisigProposalAction,
  EXECUTE_MULTISIG_PROPOSAL_ACTION: executeMultisigProposalAction,
  CREATE_WEBHOOK_ACTION: createWebhookAction,
  DELETE_WEBHOOK_ACTION: deleteWebhookAction,
  GET_ASSETS_BY_OWNER_ACTION: getAssetsByOwnerAction,
  GET_WEBHOOK_ACTION: getWebhookAction,
  PARSE_TRANSACTION_ACTION: parseSolanaTransactionAction,
  SEND_TRANSACTION_WITH_PRIORITY_ACTION: sendTransactionWithPriorityFeeAction,
  CREATE_DRIFT_VAULT_ACTION: createDriftVaultAction,
  UPDATE_DRIFT_VAULT_ACTION: updateDriftVaultAction,
  DEPOSIT_INTO_DRIFT_VAULT_ACTION: depositIntoDriftVaultAction,
  REQUEST_WITHDRAWAL_FROM_DRIFT_VAULT_ACTION: requestWithdrawalFromVaultAction,
  WITHDRAW_FROM_DRIFT_VAULT_ACTION: withdrawFromVaultAction,
  TRADE_DELEGATED_DRIFT_VAULT_ACTION: tradeDelegatedDriftVaultAction,
  DRIFT_VAULT_INFO_ACTION: vaultInfoAction,
  CREATE_DRIFT_USER_ACCOUNT_ACTION: createDriftUserAccountAction,
  TRADE_DRIFT_PERP_ACCOUNT_ACTION: tradeDriftPerpAccountAction,
  DOES_USER_HAVE_DRIFT_ACCOUNT_ACTION: doesUserHaveDriftAccountAction,
  DEPOSIT_TO_DRIFT_USER_ACCOUNT_ACTION: depositToDriftUserAccountAction,
  WITHDRAW_OR_BORROW_FROM_DRIFT_ACCOUNT_ACTION: withdrawFromDriftAccountAction,
  DRIFT_USER_ACCOUNT_INFO_ACTION: driftUserAccountInfoAction,
  DERIVE_DRIFT_VAULT_ADDRESS_ACTION: deriveDriftVaultAddressAction,
  UPDATE_DRIFT_VAULT_DELEGATE_ACTION: updateDriftVaultDelegateAction,
  AVAILABLE_DRIFT_MARKETS_ACTION: availableDriftMarketsAction,
  STAKE_TO_DRIFT_INSURANCE_FUND_ACTION: stakeToDriftInsuranceFundAction,
  REQUEST_UNSTAKE_FROM_DRIFT_INSURANCE_FUND_ACTION:
    requestUnstakeFromDriftInsuranceFundAction,
  UNSTAKE_FROM_DRIFT_INSURANCE_FUND_ACTION: unstakeFromDriftInsuranceFundAction,
  DRIFT_SPOT_TOKEN_SWAP_ACTION: driftSpotTokenSwapAction,
  DRIFT_PERP_MARKET_FUNDING_RATE_ACTION: perpMarktetFundingRateAction,
  DRIFT_GET_ENTRY_QUOTE_OF_PERP_TRADE_ACTION: entryQuoteOfPerpTradeAction,
  DRIFT_GET_LEND_AND_BORROW_APY_ACTION: lendAndBorrowAPYAction,
  GET_VOLTR_POSITION_VALUES_ACTION: getVoltrPositionValuesAction,
  DEPOSIT_VOLTR_STRATEGY_ACTION: depositVoltrStrategyAction,
  WITHDRAW_VOLTR_STRATEGY_ACTION: withdrawVoltrStrategyAction,
  GET_ASSET_ACTION: getAssetAction,
  GET_ASSETS_BY_AUTHORITY_ACTION: getAssetsByAuthorityAction,
  GET_ASSETS_BY_CREATOR_ACTION: getAssetsByCreatorAction,
  GET_PRICE_INFERENCE_ACTION: getPriceInferenceAction,
  GET_ALL_TOPICS_ACTION: getAllTopicsAction,
  GET_INFERENCE_BY_TOPIC_ID_ACTION: getInferenceByTopicIdAction,
};

export type { Action, ActionExample, Handler } from "../types/action";


================================================
File: src/actions/tokenBalances.ts
================================================
import { PublicKey } from "@solana/web3.js";
import type { Action } from "../types/action";
import type { SolanaAgentKit } from "../agent";
import { z } from "zod";
import { get_token_balance } from "../tools";

const tokenBalancesAction: Action = {
  name: "TOKEN_BALANCE_ACTION",
  similes: [
    "check token balances",
    "get wallet token balances",
    "view token balances",
    "show token balances",
    "check token balance",
  ],
  description: `Get the token balances of a Solana wallet.
  If you want to get the balance of your wallet, you don't need to provide the wallet address.`,
  examples: [
    [
      {
        input: {},
        output: {
          status: "success",
          balance: {
            sol: 100,
            tokens: [
              {
                tokenAddress: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",
                name: "USD Coin",
                symbol: "USDC",
                balance: 100,
                decimals: 9,
              },
            ],
          },
        },
        explanation: "Get token balances of the wallet",
      },
    ],
    [
      {
        input: {
          walletAddress: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",
        },
        output: {
          status: "success",
          balance: {
            sol: 100,
            tokens: [
              {
                tokenAddress: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",
                name: "USD Coin",
                symbol: "USDC",
                balance: 100,
                decimals: 9,
              },
            ],
          },
        },
        explanation: "Get address token balance",
      },
    ],
  ],
  schema: z.object({
    walletAddress: z.string().optional(),
  }),
  handler: async (agent: SolanaAgentKit, input) => {
    const balance = await get_token_balance(
      agent,
      input.tokenAddress && new PublicKey(input.tokenAddress),
    );

    return {
      status: "success",
      balance: balance,
    };
  },
};

export default tokenBalancesAction;


================================================
File: src/actions/agent/createImage.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { create_image } from "../../tools/agent";

const createImageAction: Action = {
  name: "CREATE_IMAGE",
  similes: [
    "generate image",
    "create artwork",
    "make image",
    "generate artwork",
    "create picture",
    "generate picture",
  ],
  description:
    "Create an AI-generated image based on a text prompt using OpenAI's DALL-E models",
  examples: [
    [
      {
        input: {
          prompt: "A beautiful sunset over a mountain landscape",
          model: "dall-e-3",
          size: "1024x1024",
          quality: "standard",
          style: "natural",
        },
        output: {
          status: "success",
          imageUrl: "https://example.com/image.png",
          message: "Successfully generated image",
        },
        explanation: "Generate an image of a sunset landscape using DALL-E 3",
      },
    ],
  ],
  schema: z.object({
    prompt: z
      .string()
      .min(1)
      .max(1000)
      .describe("The text description of the image to generate"),
    model: z
      .enum(["dall-e-3"])
      .default("dall-e-3")
      .describe("The AI model to use for generation"),
    size: z
      .enum(["256x256", "512x512", "1024x1024", "1792x1024", "1024x1792"])
      .default("1024x1024")
      .describe("The size of the generated image"),
    quality: z
      .enum(["standard", "hd"])
      .default("standard")
      .describe("The quality level of the generated image"),
    style: z
      .enum(["natural", "vivid"])
      .default("natural")
      .describe("The style of the generated image"),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    try {
      if (!agent.config.OPENAI_API_KEY) {
        return {
          status: "error",
          message: "OpenAI API key not found in agent configuration",
        };
      }

      const { prompt, model, size } = input;
      const response = await create_image(agent, prompt, model, size);

      return {
        status: "success",
        imageUrl: response.images[0].url,
        message: "Successfully generated image",
      };
    } catch (error: any) {
      // Handle specific OpenAI error types
      if (error.response) {
        const { status, data } = error.response;
        if (status === 429) {
          return {
            status: "error",
            message: "Rate limit exceeded. Please try again later.",
          };
        }
        return {
          status: "error",
          message: `OpenAI API error: ${data.error?.message || error.message}`,
        };
      }

      return {
        status: "error",
        message: `Failed to generate image: ${error.message}`,
      };
    }
  },
};

export default createImageAction;


================================================
File: src/actions/agent/getWalletAddress.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { get_wallet_address } from "../../tools/agent";

const getWalletAddressAction: Action = {
  name: "GET_WALLET_ADDRESS",
  similes: ["wallet address", "address", "wallet"],
  description: "Get wallet address of the agent",
  examples: [
    [
      {
        input: {},
        output: {
          status: "success",
          address: "0x1234567890abcdef",
        },
        explanation: "The agent's wallet address is 0x1234567890abcdef",
      },
    ],
  ],
  schema: z.object({}),
  handler: async (agent: SolanaAgentKit) => ({
    status: "success",
    address: get_wallet_address(agent),
  }),
};

export default getWalletAddressAction;


================================================
File: src/actions/agent/get_info.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { get_info } from "../../tools/agent";

const getInfoAction: Action = {
  name: "GET_INFO",
  similes: [
    "get information",
    "find information",
    "search for",
    "tell me about",
    "what is",
    "explain",
  ],
  description:
    "Get detailed information about any topic using Perplexity's AI models",
  examples: [
    [
      {
        input: {
          prompt: "What is blockchain technology and how does it work?",
        },
        output: {
          status: "success",
          message: "Blockchain is a distributed ledger technology...",
        },
        explanation: "Get detailed information about blockchain technology",
      },
    ],
  ],
  schema: z.object({
    prompt: z
      .string()
      .min(1)
      .max(2000)
      .describe("The question or topic to get information about"),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    try {
      if (!agent.config.PERPLEXITY_API_KEY) {
        return {
          status: "error",
          message: "Perplexity API key not found in agent configuration",
        };
      }

      const { prompt } = input;
      const response = await get_info(agent, prompt);

      return {
        status: "success",
        message: response,
      };
    } catch (error: any) {
      // Handle specific Perplexity API error types
      if (error.response) {
        const { status, data } = error.response;
        if (status === 429) {
          return {
            status: "error",
            message: "Rate limit exceeded. Please try again later.",
          };
        }
        return {
          status: "error",
          message: `Perplexity API error: ${data.error?.message || error.message}`,
        };
      }

      return {
        status: "error",
        message: `Failed to get information: ${error.message}`,
      };
    }
  },
};

export default getInfoAction;


================================================
File: src/actions/alldomains/getAllDomainsTLDs.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { getAllDomainsTLDs } from "../../tools";

const getAllDomainsTLDsAction: Action = {
  name: "GET_ALL_TLDS",
  similes: [
    "list domain tlds",
    "get domain extensions",
    "fetch domain tlds",
    "get top level domains",
    "list available tlds",
    "get domain suffixes",
  ],
  description:
    "Get a list of all available top-level domains (TLDs) for Solana domains",
  examples: [
    [
      {
        input: {},
        output: {
          status: "success",
          tlds: [".sol", ".abc", ".backpack", ".bonk"],
          message: "Successfully retrieved all domain TLDs",
        },
        explanation:
          "Get a list of all available TLDs that can be used for Solana domains",
      },
    ],
  ],
  schema: z.object({}),
  handler: async (agent: SolanaAgentKit) => {
    try {
      // Get all domain TLDs
      const tlds = await getAllDomainsTLDs(agent);

      return {
        status: "success",
        tlds,
        message: "Successfully retrieved all domain TLDs",
      };
    } catch (error: any) {
      return {
        status: "error",
        message: `Failed to get domain TLDs: ${error.message}`,
      };
    }
  },
};

export default getAllDomainsTLDsAction;


================================================
File: src/actions/alldomains/getOwnedAllDomains.ts
================================================
import { PublicKey } from "@solana/web3.js";
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { getOwnedAllDomains } from "../../tools";

const getOwnedAllDomainsAction: Action = {
  name: "GET_OWNED_ALL_DOMAINS",
  similes: [
    "list owned domains",
    "get my domains",
    "fetch wallet domains",
    "get owned names",
    "list my domains",
    "get address domains",
  ],
  description:
    "Get all domains owned by a specific wallet address across all TLDs",
  examples: [
    [
      {
        input: {
          address: "7nxQB...",
        },
        output: {
          status: "success",
          domains: ["solana.sol", "wallet.abc", "user.backpack"],
          total: 3,
          message: "Successfully retrieved owned domains",
        },
        explanation: "Get all domain names owned by a specific wallet address",
      },
    ],
  ],
  schema: z.object({
    address: z
      .string()
      .min(1)
      .describe("The wallet address to get owned domains for"),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    try {
      const address = new PublicKey(input.address);

      // Get owned domains
      const domains = await getOwnedAllDomains(agent, address);

      return {
        status: "success",
        domains,
        total: domains.length,
        message: `Successfully retrieved ${domains.length} owned domain${domains.length === 1 ? "" : "s"}`,
      };
    } catch (error: any) {
      return {
        status: "error",
        message: `Failed to get owned domains: ${error.message}`,
      };
    }
  },
};

export default getOwnedAllDomainsAction;


================================================
File: src/actions/alldomains/getOwnedDomainsForTLD.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { getOwnedDomainsForTLD } from "../../tools";

const getOwnedDomainsForTLDAction: Action = {
  name: "GET_OWNED_DOMAINS_FOR_TLD",
  similes: [
    "list owned domains for tld",
    "get my domains for extension",
    "fetch wallet domains by tld",
    "get owned names by extension",
    "list my domains by tld",
    "get address domains for tld",
  ],
  description:
    "Get all domains owned by a specific wallet address for a given top-level domain (TLD)",
  examples: [
    [
      {
        input: {
          tld: "sol",
        },
        output: {
          status: "success",
          domains: ["solana.sol", "wallet.sol", "user.sol"],
          total: 3,
          message: "Successfully retrieved owned domains for .sol",
        },
        explanation:
          "Get all .sol domain names owned by a specific wallet address",
      },
    ],
  ],
  schema: z.object({
    tld: z
      .string()
      .min(1)
      .describe("The top-level domain to filter by (e.g., 'sol', 'abc')"),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    try {
      const tld = input.tld.toLowerCase();

      // Get owned domains for TLD
      const domains = await getOwnedDomainsForTLD(agent, tld);

      return {
        status: "success",
        domains,
        total: domains.length,
        message: `Successfully retrieved ${domains.length} owned domain${domains.length === 1 ? "" : "s"} for .${tld}`,
      };
    } catch (error: any) {
      return {
        status: "error",
        message: `Failed to get owned domains: ${error.message}`,
      };
    }
  },
};

export default getOwnedDomainsForTLDAction;


================================================
File: src/actions/alldomains/resolveDomain.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { resolveAllDomains } from "../../tools";

const resolveDomainAction: Action = {
  name: "RESOLVE_ALL_DOMAINS",
  similes: [
    "resolve domain",
    "lookup domain",
    "get domain owner",
    "check domain",
    "find domain owner",
  ],
  description: "Resolve a Solana domain name to get its owner's public key",
  examples: [
    [
      {
        input: {
          domain: "example.sol",
        },
        output: {
          status: "success",
          owner: "7nxQB...",
        },
        explanation: "Resolve a .sol domain name to get the owner's public key",
      },
    ],
  ],
  schema: z.object({
    domain: z.string().min(1).describe("The domain name to resolve"),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    try {
      const domain = input.domain as string;
      const tld = await resolveAllDomains(agent, domain);
      return {
        status: "success",
        owner: tld,
        message: `Successfully resolved domain ${domain}`,
      };
    } catch (error: any) {
      return {
        status: "error",
        message: `Failed to resolve domain: ${error.message}`,
      };
    }
  },
};

export default resolveDomainAction;


================================================
File: src/actions/allora/getAllTopics.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { getAllTopics } from "../../tools";

const getAllTopicsAction: Action = {
  name: "ALLORA_GET_ALL_TOPICS",
  similes: [
    "get all topics",
    "get all inference topics",
    "get allora topics",
    "get all allora topics",
    "get allora inference topics",
    "get all allora inference topics",
  ],
  description: "Get all topics from Allora's API",
  examples: [
    [
      {
        input: {},
        output: {
          status: "success",
          message: "Topics fetched successfully",
          topics:
            '[{"topic_id":5,"topic_name":"SOL 10min Prediction","description":null,"epoch_length":120,"ground_truth_lag":120,"loss_method":"mse","worker_submission_window":12,"worker_count":26859,"reputer_count":2735,"total_staked_allo":1.0200000004892,"total_emissions_allo":12.610109325686093,"is_active":true,"is_endorsed":false,"forge_competition_id":null,"forge_competition_start_date":null,"forge_competition_end_date":null,"updated_at":"2025-01-21T17:21:21.321Z"}]',
        },
        explanation: "Get all topics from Allora's API",
      },
    ],
  ],
  schema: z.object({}),
  handler: async (agent: SolanaAgentKit) => {
    const topics = await getAllTopics(agent);
    return {
      status: "success",
      message: "Topics fetched successfully",
      topics: topics,
    };
  },
};

export default getAllTopicsAction;


================================================
File: src/actions/allora/getInferenceByTopicId.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { getInferenceByTopicId } from "../../tools";

const getInferenceByTopicIdAction: Action = {
  name: "ALLORA_GET_INFERENCE_BY_TOPIC_ID",
  similes: ["get allora inference for topic 42", "get inference for topic 42"],
  description: "Get the inference for a given topic ID from Allora's API",
  examples: [
    [
      {
        input: {
          topicId: "42",
        },
        output: {
          status: "success",
          message: "Inference fetched successfully",
          inference: "The inference for topic 42 is 100",
        },
        explanation: "Get the inference for topic 42",
      },
    ],
  ],
  schema: z.object({
    topicId: z
      .string()
      .min(1)
      .describe("The topic ID to get the inference for"),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    try {
      const { topicId } = input;

      const inference = await getInferenceByTopicId(agent, topicId);
      return {
        status: "success",
        message: "Inference fetched successfully",
        inference: `The inference for topic ${topicId} is ${inference}`,
      };
    } catch (error: any) {
      return {
        status: "error",
        message: `Failed to fetch inference from Allora: ${error.message}`,
      };
    }
  },
};

export default getInferenceByTopicIdAction;


================================================
File: src/actions/allora/getPriceInference.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { getPriceInference } from "../../tools";

const getPriceInferenceAction: Action = {
  name: "ALLORA_GET_PRICE_INFERENCE",
  similes: [
    "get price inference for SOL in 10m",
    "get price forecast for SOL in 10m",
    "get allora price inference for SOL in 10m",
    "get allora price forecast for SOL in 10m",
  ],
  description:
    "Get the price inference for a given token and timeframe from Allora's API",
  examples: [
    [
      {
        input: {
          tokenSymbol: "SOL",
          timeframe: "10m",
        },
        output: {
          status: "success",
          message: "Price inference fetched successfully",
          priceInference:
            "The price of SOL is expected to be 100 in 10 minutes",
        },
        explanation:
          "Get the price inference for SOL/USD price feed for the next 10 minutes",
      },
    ],
  ],
  schema: z.object({
    tokenSymbol: z
      .string()
      .min(1)
      .describe("The token symbol to get the price inference for"),
    timeframe: z
      .string()
      .min(1)
      .describe("The timeframe to get the price inference for"),
  }),
  handler: async (agent: SolanaAgentKit, input: any) => {
    try {
      const { tokenSymbol, timeframe } = input;

      const price = await getPriceInference(agent, tokenSymbol, timeframe);
      return {
        status: "success",
        message: "Price inference fetched successfully",
        priceInference: `The price of ${tokenSymbol} is expected to be ${price} in ${timeframe}`,
      };
    } catch (error: any) {
      return {
        status: "error",
        message: `Failed to fetch price inference from Allora: ${error.message}`,
      };
    }
  },
};

export default getPriceInferenceAction;


================================================
File: src/actions/dexscreener/tokenDataByTicker.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { getTokenDataByTicker } from "../../tools/dexscreener";

const tokenDataByTickerAction: Action = {
  name: "GET_TOKEN_DATA_BY_TICKER",
  similes: [
    "token data by ticker",
    "fetch token info by ticker",
    "lookup token ticker info",
    "get token info by ticker",
  ],
  description: "Get the token data for a given token ticker",
  examples: [
    [
      {
        input: {
          ticker: "USDC",
        },
        output: {
          status: "success",
          tokenData: {
            // Some placeholder example data
            symbol: "USDC",
            name: "USD Coin",
            decimals: 6,
            mintAddress: "FhRg...",
          },
        },
        explanation: "Fetches metadata for the USDC token by its ticker.",
      },
    ],
  ],
  schema: z.object({
    ticker: z.string().min(1).describe("Ticker of the token, e.g. 'USDC'"),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    try {
      const ticker = input.ticker as string;

      // Use agent’s method to get token data by ticker
      const tokenData = await getTokenDataByTicker(ticker);

      return {
        status: "success",
        tokenData: tokenData,
        message: `Successfully fetched token data for ticker: ${ticker}`,
      };
    } catch (error: any) {
      return {
        status: "error",
        message: `Failed to fetch token data for ticker: ${input.ticker || ""}. ${error.message}`,
        code: error.code || "UNKNOWN_ERROR",
      };
    }
  },
};

export default tokenDataByTickerAction;


================================================
File: src/actions/drift/availableMarkets.ts
================================================
import { MainnetSpotMarkets } from "@drift-labs/sdk";
import type { Action } from "../../types";
import { z } from "zod";
import {
  getAvailableDriftPerpMarkets,
  getAvailableDriftSpotMarkets,
} from "../../tools";

const availableDriftMarketsAction: Action = {
  name: "AVAILABLE_DRIFT_MARKETS",
  description: "Get a list of available drift markets",
  similes: [
    "get drift markets",
    "drift markets",
    "available drift markets",
    "get available drift perp markets",
    "get available spot markets on drift",
  ],
  examples: [
    [
      {
        input: {
          marketType: "spot",
        },
        output: {
          status: "success",
          message: `The list of available spot markets are ${MainnetSpotMarkets.map((v) => v.symbol).join(", ")}`,
          data: MainnetSpotMarkets,
        },
        explanation: "Get the list of available spot markets/tokens on drift",
      },
    ],
  ],
  schema: z.object({
    marketType: z
      .enum(["spot", "perp"])
      .describe("Type of market to get")
      .optional(),
  }),
  handler: async (agent, input) => {
    switch (input.marketType) {
      case "perp":
        return getAvailableDriftPerpMarkets();
      case "spot":
        return getAvailableDriftSpotMarkets();
      default:
        return {
          spot: getAvailableDriftSpotMarkets(),
          perp: getAvailableDriftPerpMarkets(),
        };
    }
  },
};

export default availableDriftMarketsAction;


================================================
File: src/actions/drift/createDriftUserAccount.ts
================================================
import { z } from "zod";
import type { Action } from "../../types";
import { createDriftUserAccount } from "../../tools";

const createDriftUserAccountAction: Action = {
  name: "CREATE_DRIFT_USER_ACCOUNT",
  similes: [
    "create drift account",
    "create drift user account",
    "create user account on drift",
  ],
  description: "Create a new user account on Drift protocol",
  examples: [
    [
      {
        input: {
          amount: 100,
          symbol: "SOL",
        },
        output: {
          status: "success",
          message: "User account created with 100 SOL successfully deposited",
          account: "4xKpN2...",
        },
        explanation: "Create a new user account with 100 SOL",
      },
    ],
  ],
  schema: z.object({
    amount: z
      .number()
      .positive()
      .describe(
        "Amount of the token to deposit. In normal token amounts e.g 50 SOL, 100 USDC, etc",
      ),
    symbol: z.string().describe("Symbol of the token to deposit"),
  }),
  handler: async (agent, input) => {
    try {
      const res = await createDriftUserAccount(
        agent,
        input.amount,
        input.symbol,
      );

      return {
        status: "success",
        message:
          res.message ??
          `User account created with ${input.amount} ${input.symobl} successfully deposited.`,
        account: res.account,
        signature: res.txSignature,
      };
    } catch (e) {
      return {
        status: "error",
        // @ts-expect-error - error message is a string
        message: `Failed to create user account: ${e.message}`,
      };
    }
  },
};

export default createDriftUserAccountAction;


================================================
File: src/actions/drift/createVault.ts
================================================
import { z } from "zod";
import type { Action } from "../../types";
import type { SolanaAgentKit } from "../..";
import { createVault } from "../../tools";

const createDriftVaultAction: Action = {
  name: "CREATE_DRIFT_VAULT",
  similes: ["create a drift vault", "open a drift vault", "create vault"],
  description:
    "Create a new drift vault delegating the agents address as the owner.",
  examples: [
    [
      {
        input: {
          name: "My Drift Vault",
          marketName: "SOL-SPOT",
          redeemPeriod: 30,
          maxTokens: 1000,
          minDepositAmount: 100,
          managementFee: 10,
          profitShare: 5,
          hurdleRate: 0.1,
          permissioned: false,
        },
        output: {
          status: "success",
          message: "Drift vault created successfully",
          signature:
            "2nFeP7taii3wGVgrWk4YiLMPmhtu3Zg9iXCUu4zGBDadwunHw8reXFxRWT7khbFsQ9JT3zK4RYDLNDFDRYvM3wJk",
        },
        explanation: "Create a drift vault",
      },
    ],
  ],
  schema: z.object({
    name: z
      .string()
      .min(5, "Name must be at least 5 characters")
      .describe("Has to be unique. 2 Vaults can not have the same name."),
    // regex matches SOL-SPOT
    marketName: z
      .string()
      .describe('Market name must be in the format "TOKEN-SPOT"'),
    redeemPeriod: z
      .number()
      .int()
      .min(1, "Redeem period must be at least 1")
      .describe(
        "Number of days to wait before funds deposited in a vault can be redeemed ",
      ),
    maxTokens: z
      .number()
      .int()
      .min(100, "Max tokens must be at least 100")
      .describe(
        "The maximum amount of tokens the vault will be accomodating. For example some vaults have a cap at 10 million USDC. This amount should be normal token amounts e.g 50 SOL, 100 USDC, etc",
      ),
    minDepositAmount: z
      .number()
      .positive()
      .describe(
        "Minimum deposit amount in normal token values e.g 50 SOL, 100 USDC, etc",
      ),
    managementFee: z
      .number()
      .positive()
      .max(20)
      .describe(
        "How much of a fee you'll be taking to manage depositors funds. This is in percentage e.g 2 for 2%",
      ),
    profitShare: z
      .number()
      .positive()
      .max(90)
      .optional()
      .default(5)
      .describe(
        "How much of the profit you'll be sharing with depositors. This is in percentage e.g 2 for 2%. Defaults to 5%",
      ),
    hurdleRate: z.number().optional(),
    permissioned: z
      .boolean()
      .optional()
      .describe("Should the vault have a whitelist of not"),
  }),
  handler: async (agent: SolanaAgentKit, input) => {
    try {
      const tx = await createVault(
        agent,
        // @ts-expect-error - zod schema validation
        {
          ...input,
        },
      );

      return {
        status: "success",
        message:
          "Drift vault created successfully. Please note down the name of your vault as it is unique and was used to derive your vault address",
        vaultName: input.name,
        signature: tx,
      };
    } catch (e) {
      return {
        status: "error",
        // @ts-expect-error - e is not a string
        message: `Failed to create drift vault: ${e.message}`,
      };
    }
  },
};

export default createDriftVaultAction;


================================================
File: src/actions/drift/depositIntoVault.ts
================================================
import { z } from "zod";
import type { Action } from "../../types";
import { depositIntoVault } from "../../tools";

const depositIntoDriftVaultAction: Action = {
  name: "DEPOSIT_INTO_DRIFT_VAULT",
  description: "Deposit funds into an existing drift vault",
  similes: ["deposit into drift vault", "add funds to drift vault"],
  examples: [
    [
      {
        input: {
          amount: 100,
          vaultAddress: "2nFeP7taii3wGVgrWk4YiLMPmhtu3Zg9iXCUu4zGBD",
        },
        output: {
          status: "success",
          message: "Funds deposited successfully",
          signature:
            "2nFeP7taii3wGVgrWk4YiLMPmhtu3Zg9iXCUu4zGBDadwunHw8reXFxRWT7khbFsQ9JT3zK4RYDLNDFDRYvM3wJk",
        },
        explanation: "Deposit 100 USDC into a drift vault",
      },
    ],
  ],
  schema: z.object({
    vaultAddress: z.string(),
    amount: z
      .number()
      .positive()
      .describe(
        "The amount in tokens you'd like to deposit into the vault in normal token amounts e.g 50 SOL, 100 USDC, etc",
      ),
  }),
  handler: async (agent, input) => {
    try {
      const tx = await depositIntoVault(
        agent,
        input.amount as number,
        input.vaultAddress as string,
      );

      return {
        status: "success",
        message: "Funds deposited successfully",
        signature: tx,
      };
    } catch (e) {
      return {
        status: "error",
        // @ts-expect-error - error message
        message: `Failed to deposit funds: ${e.message}`,
      };
    }
  },
};

export default depositIntoDriftVaultAction;


================================================
File: src/actions/drift/depositToDriftUserAccount.ts
================================================
import { z } from "zod";
import type { SolanaAgentKit } from "../../agent";
import type { Action } from "../../types";
import { depositToDriftUserAccount } from "../../tools";

const depositToDriftUserAccountAction: Action = {
  name: "DEPOSIT_TO_DRIFT_USER_ACCOUNT",
  description: "Deposit funds into your drift user account",
  similes: [
    "deposit into drift user account",
    "add funds to drift user account",
    "add funds to my drift account",
    "deposit collateral into drift account",
  ],
  examples: [
    [
      {
        input: {
          amount: 100,
          symbol: "usdc",
        },
        output: {
          status: "success",
          message: "Funds deposited successfully",
          signature:
            "2nFeP7taii3wGVgrWk4YiLMPmhtu3Zg9iXCUu4zGBDadwunHw8reXFxRWT7khbFsQ9JT3zK4RYDLNDFDRYvM3wJk",
        },
        explanation: "Deposit 100 USDC into your drift user account",
      },
    ],
  ],
  schema: z.object({
    amount: z
      .number()
      .positive()
      .describe(
        "The amount in tokens you'd like to deposit into your drift user account in normal token amounts e.g 50 SOL, 100 USDC, etc",
      ),
    symbol: z
      .string()
      .toUpperCase()
      .describe("The symbol of the token you'd like to deposit"),
    repay: z
      .boolean()
      .optional()
      .default(false)
      .describe("Whether or not to repay the borrowed funds in the account"),
  }),
  handler: async (agent: SolanaAgentKit, input) => {
    try {
      const tx = await depositToDriftUserAccount(
        agent,
        input.amount as number,
        input.symbol as string,
        input.repay as boolean,
      );

      return {
        status: "success",
        message: "Funds deposited successfully",
        signature: tx,
      };
    } catch (e) {
      return {
        status: "error",
        // @ts-expect-error - error message
        message: `Failed to deposit funds: ${e.message}`,
      };
    }
  },
};

export default depositToDriftUserAccountAction;


================================================
File: src/actions/drift/deriveVaultAddress.ts
================================================
import { z } from "zod";
import type { Action } from "../../types";
import { getVaultAddress } from "../../tools";

const deriveDriftVaultAddressAction: Action = {
  name: "DERIVE_DRIFT_VAULT_ADDRESS_ACTION",
  similes: ["derive drift vault address", "get drift vault address"],
  description: "Derive a drift vault address from the vaults name",
  examples: [
    [
      {
        input: {
          name: "My Drift Vault",
        },
        output: {
          status: "success",
          message: "Vault address derived successfully",
          address: "2nFeP7taii3wGVgrWk4YiLMPmhtu3Zg9iXCUu4zGBD",
        },
        explanation: "Derive a drift vault address",
      },
    ],
  ],
  schema: z.object({
    name: z.string().describe("The name of the vault to derive the address of"),
  }),
  handler: async (agent, input) => {
    try {
      const address = await getVaultAddress(agent, input.name as string);

      return {
        status: "success",
        message: "Vault address derived successfully",
        address,
      };
    } catch (e) {
      return {
        status: "error",
        // @ts-expect-error - error message
        message: `Failed to derive vault address: ${e.message}`,
      };
    }
  },
};

export default deriveDriftVaultAddressAction;


================================================
File: src/actions/drift/doesUserHaveDriftAccount.ts
================================================
import { z } from "zod";
import { doesUserHaveDriftAccount } from "../../tools";
import type { Action } from "../../types";

export const doesUserHaveDriftAccountAction: Action = {
  name: "DOES_USER_HAVE_DRIFT_ACCOUNT",
  description: "Check if a user has a Drift account",
  similes: [
    "check if user has drift account",
    "check if user has account on drift",
    "do I have an account on drift",
  ],
  examples: [
    [
      {
        input: {},
        output: {
          status: "success",
          message: "Nice! You have a Drift account",
          account: "4xKpN2...",
        },
        explanation: "Check if a user has a Drift account",
      },
    ],
  ],
  schema: z.object({}),
  handler: async (agent) => {
    try {
      const res = await doesUserHaveDriftAccount(agent);

      if (!res.hasAccount) {
        return {
          status: "error",
          message: "You do not have a Drift account",
        };
      }

      return {
        status: "success",
        message: "Nice! You have a Drift account",
        account: res.account,
      };
    } catch (e) {
      return {
        status: "error",
        // @ts-expect-error - error message is a string
        message: `Failed to check if you have a Drift account: ${e.message}`,
      };
    }
  },
};

export default doesUserHaveDriftAccountAction;


================================================
File: src/actions/drift/driftUserAccountInfo.ts
================================================
import { z } from "zod";
import type { Action } from "../../types";
import { driftUserAccountInfo } from "../../tools";

const driftUserAccountInfoAction: Action = {
  name: "DRIFT_USER_ACCOUNT_INFO",
  similes: ["get drift user account info", "get drift account info"],
  description: "Get information about your drift account",
  examples: [
    [
      {
        input: {},
        explanation: "Get information about your drift account",
        output: {
          status: "success",
          data: {},
        },
      },
    ],
  ],
  schema: z.object({}),
  handler: async (agent) => {
    try {
      const accountInfo = await driftUserAccountInfo(agent);
      return {
        status: "success",
        data: accountInfo,
      };
    } catch (e) {
      return {
        status: "error",
        // @ts-expect-error - error message is a string
        message: `Failed to get drift account info: ${e.message}`,
      };
    }
  },
};

export default driftUserAccountInfoAction;


================================================
File: src/actions/drift/entryQuoteOfPerpTrade.ts
================================================
import { z } from "zod";
import type { Action } from "../../types";
import { getEntryQuoteOfPerpTrade } from "../../tools";

const entryQuoteOfPerpTradeAction: Action = {
  name: "DRIFT_GET_ENTRY_QUOTE_OF_PERP_TRADE_ACTION",
  description: "Get the entry quote of a perpetual trade on Drift",
  similes: [
    "get the entry quote of a perpetual trade on drift",
    "get the entry quote of a perp trade on drift",
    "get the entry quote of the BTC-PERP trade on drift",
    "get the entry quote of the SOL-PERP trade on drift",
    "get the entry quote of a 1000 USDC long on the SOL-PERP market",
    "get the entry quote of a 1000 USDC short on the SOL-PERP market",
    "quote for a $1000 long on the BTC-PERP market",
  ],
  examples: [
    [
      {
        input: {
          marketSymbol: "BTC-PERP",
          type: "long",
          amount: 1000,
        },
        output: {
          status: "success",
          data: {
            entryPrice: 100000,
            priceImpact: 0.0001,
            bestPrice: 100001,
            worstPrice: 99999,
            baseFilled: 1000,
            quoteFilled: 1000,
          },
        },
        explanation:
          "Get the entry quote of a $1000 long on the BTC-PERP market",
      },
    ],
  ],
  schema: z.object({
    marketSymbol: z.string().describe("Symbol of the perpetual market"),
    type: z.enum(["long", "short"]).describe("Type of trade"),
    amount: z.number().positive().describe("Amount to trade"),
  }),
  handler: async (agent, input) => {
    try {
      const data = await getEntryQuoteOfPerpTrade(
        input.marketSymbol,
        input.amount,
        input.type,
      );

      return data;
    } catch (e) {
      return {
        status: "error",
        // @ts-expect-error error is not a string
        message: e.message,
      };
    }
  },
};

export default entryQuoteOfPerpTradeAction;


================================================
File: src/actions/drift/getLendAndBorrowAPY.ts
================================================
import { z } from "zod";
import type { Action } from "../../types";
import { getLendingAndBorrowAPY } from "../../tools";

const lendAndBorrowAPYAction: Action = {
  name: "DRIFT_GET_LEND_AND_BORROW_APY_ACTION",
  description: "Get the lending and borrowing APY (in %) of a token on Drift",
  similes: [
    "get the lending and borrowing APY of a token on drift",
    "get the lending and borrowing APY of a token on drift",
    "get the lending and borrowing APY of the USDC token on drift",
    "get the lending and borrowing APY of the SOL token on drift",
  ],
  examples: [
    [
      {
        input: {
          symbol: "USDC",
        },
        output: {
          status: "success",
          data: {
            lendingAPY: 10,
            borrowingAPY: 12.1,
          },
        },
        explanation: "Get the lending and borrowing APY of the USDC token",
      },
    ],
  ],
  schema: z.object({
    symbol: z.string().describe("Symbol of the token"),
  }),
  handler: async (agent, input) => {
    try {
      const data = await getLendingAndBorrowAPY(agent, input.symbol);

      return {
        status: "success",
        data,
      };
    } catch (e) {
      return {
        status: "error",
        // @ts-expect-error error is not a string
        message: e.message,
      };
    }
  },
};

export default lendAndBorrowAPYAction;


================================================
File: src/actions/drift/perpMarketFundingRate.ts
================================================
import { z } from "zod";
import type { Action } from "../../types";
import { calculatePerpMarketFundingRate } from "../../tools";

const perpMarktetFundingRateAction: Action = {
  name: "DRIFT_PERP_MARKET_FUNDING_RATE_ACTION",
  description: "Get the funding rate of a perpetual market on Drift",
  similes: [
    "get the yearly funding rate of a perpetual market on drift",
    "get the funding rate of a perp market on drift",
    "get the hourly funding rate of a perpetual market on drift",
    "get the funding rate of the BTC-PERP market on drift",
    "get the funding rate of the SOL-PERP market on drift",
  ],
  examples: [
    [
      {
        input: {
          marketSymbol: "BTC-PERP",
        },
        output: {
          status: "success",
          data: {
            longRate: 0.0001,
            shortRate: 0.0002,
          },
        },
        explanation: "Get the funding rate of the BTC-PERP market",
      },
    ],
  ],
  schema: z.object({
    marketSymbol: z
      .string()
      .toUpperCase()
      .describe("Symbol of the perpetual market"),
    period: z.enum(["year", "hour"]).default("hour").optional(),
  }),
  handler: async (agent, input) => {
    try {
      const data = await calculatePerpMarketFundingRate(
        agent,
        input.marketSymbol,
        input.period,
      );

      return {
        status: "success",
        data,
      };
    } catch (e) {
      return {
        status: "error",
        // @ts-expect-error error is not a string
        message: e.message,
      };
    }
  },
};

export default perpMarktetFundingRateAction;


================================================
File: src/actions/drift/requestUnstakeFromDriftInsuranceFund.ts
================================================
import { z } from "zod";
import type { Action } from "../../types";
import { requestUnstakeFromDriftInsuranceFund } from "../../tools";

const requestUnstakeFromDriftInsuranceFundAction: Action = {
  name: "REQUEST_UNSTAKE_FROM_DRIFT_INSURANCE_FUND_ACTION",
  description:
    "Request to unstake a certain amount of a token from the Drift Insurance Fund",
  similes: [
    "request an unstake from the drift insurance fund",
    "request to unstake an amount from the drift insurance fund",
  ],
  examples: [
    [
      {
        input: {
          amount: 100,
          symbol: "SOL",
        },
        output: {
          status: "success",
          message: "Requested to unstake 100 SOL from the Drift Insurance Fund",
          signature: "4FdasklhiIHyOI",
        },
        explanation: "Request to unstake 100 SOL from the Drift Insurance Fund",
      },
    ],
  ],
  schema: z.object({
    amount: z
      .number()
      .positive()
      .describe("Amount to unstake in normal units e.g 50 === 50 SOL"),
    symbol: z.string().describe("Symbol of the token to unstake"),
  }),
  handler: async (agent, input) => {
    try {
      const tx = await requestUnstakeFromDriftInsuranceFund(
        agent,
        input.amount,
        input.symbol,
      );

      return {
        status: "success",
        message: `Requested to unstake ${input.amount} ${input.symbol} from the Drift Insurance Fund`,
        data: {
          signature: tx,
        },
      };
    } catch (e) {
      return {
        status: "error",
        // @ts-expect-error error is not a string
        message: e.message,
      };
    }
  },
};

export default requestUnstakeFromDriftInsuranceFundAction;


================================================
File: src/actions/drift/requestWithdrawalFromVault.ts
================================================
import { z } from "zod";
import type { Action } from "../../types";
import type { SolanaAgentKit } from "../../agent";
import { requestWithdrawalFromVault } from "../../tools";

const requestWithdrawalFromVaultAction: Action = {
  name: "REQUEST_WITHDRAWAL_FROM_DRIFT_VAULT",
  description: "Request a withdrawal from an existing drift vault",
  similes: ["withdraw from drift vault", "request withdrawal from vault"],
  examples: [
    [
      {
        input: {
          amount: 100,
          vaultAddress: "2nFeP7taii",
        },
        output: {
          status: "success",
          message: "Withdrawal request successful",
          signature:
            "2nFeP7taii3wGVgrWk4YiLMPmhtu3Zg9iXCUu4zGBDadwunHw8reXFxRWT7khbFsQ9JT3zK4RYDLNDFDRYvM3wJk",
        },
        explanation: "Request a withdrawal of 100 USDC from a drift vault",
      },
    ],
  ],
  schema: z.object({
    vaultAddress: z.string(),
    amount: z
      .number()
      .positive()
      .describe(
        "Amount of shares you would like to withdraw from the vault in normal token amounts e.g 50 SOL, 100 USDC, etc",
      ),
  }),
  handler: async (agent: SolanaAgentKit, input) => {
    try {
      const tx = await requestWithdrawalFromVault(
        agent,
        input.amount as number,
        input.vaultAddress as string,
      );

      return {
        status: "success",
        message: "Withdrawal request successful",
        signature: tx,
      };
    } catch (e) {
      return {
        status: "error",
        // @ts-expect-error - error message
        message: `Failed to request withdrawal: ${e.message}`,
      };
    }
  },
};

export default requestWithdrawalFromVaultAction;


================================================
File: src/actions/drift/stakeToDriftInsuranceFund.ts
================================================
import { z } from "zod";
import type { Action } from "../../types";
import { stakeToDriftInsuranceFund } from "../../tools";

const stakeToDriftInsuranceFundAction: Action = {
  name: "STAKE_TO_DRIFT_INSURANCE_FUND_ACTION",
  description: "Stake a token to Drift Insurance Fund",
  similes: ["Stake a token to Drift Insurance Fund"],
  examples: [
    [
      {
        input: {
          amount: 100,
          symbol: "SOL",
        },
        output: {
          status: "success",
          message: "Staked 100 SOL to the Drift Insurance Fund",
          data: {
            signature: "signature",
          },
        },
        explanation: "Stake 100 SOL to the Drift Insurance Fund",
      },
    ],
  ],
  schema: z.object({
    amount: z
      .number()
      .positive()
      .describe("Amount to stake in normal units e.g 50 === 50 SOL"),
    symbol: z.string().describe("Symbol of the token stake"),
  }),
  handler: async (agent, input) => {
    try {
      const tx = await stakeToDriftInsuranceFund(
        agent,
        input.amount,
        input.symbol,
      );

      return {
        status: "sucess",
        message: `Staked ${input.amount} ${input.symbol} to the Drift Insurance Fund`,
        data: {
          signature: tx,
        },
      };
    } catch (error) {
      return {
        status: "error",
        // @ts-expect-error error is not a string
        message: error.message,
      };
    }
  },
};

export default stakeToDriftInsuranceFundAction;


================================================
File: src/actions/drift/swapSpotToken.ts
================================================
import { z } from "zod";
import type { Action } from "../../types";
import { swapSpotToken } from "../../tools";

const driftSpotTokenSwapAction: Action = {
  name: "DRIFT_SPOT_TOKEN_SWAP_ACTION",
  description: "Swap a token for another token on Drift",
  similes: [
    "swap a token for another token on drift",
    "exchange a token for another token on drift",
    "trade a token for another token on drift",
    "swap usdc to 5 sol on drift (in this case 5 sol is the toAmount)",
    "swap 5 usdt to DRIFT on drift (in this case 5 usdt is the fromAmount)",
  ],
  examples: [
    [
      {
        input: {
          fromSymbol: "SOL",
          toSymbol: "USDC",
          fromAmount: 100,
        },
        output: {
          status: "success",
          message: "Swapped 100 SOL for USDC on Drift",
          signature: "4FdasklhiIHyOI",
        },
        explanation: "Swap 100 SOL for USDC on Drift",
      },
    ],
  ],
  schema: z.object({
    fromSymbol: z.string().describe("Symbol of the token to swap from"),
    toSymbol: z.string().describe("Symbol of the token to swap to"),
    fromAmount: z
      .number()
      .positive()
      .describe("Amount to swap from e.g 50 === 50 SOL")
      .optional(),
    toAmount: z
      .number()
      .positive()
      .describe("Amount to swap to e.g 5000 === 5000 USDC")
      .optional(),
    slippage: z
      .number()
      .positive()
      .describe("Slippage tolerance in percentage e.g 0.5 === 0.5%")
      .default(0.5),
  }),
  handler: async (agent, input) => {
    try {
      const tx = await swapSpotToken(agent, {
        fromSymbol: input.fromSymbol,
        toSymbol: input.toSymbol,
        fromAmount: input.fromAmount,
        toAmount: input.toAmount,
        slippage: input.slippage,
      });

      return {
        status: "success",
        message: `Swapped ${input.fromAmount} ${input.fromSymbol} for ${input.toAmount} ${input.toSymbol} on Drift`,
        data: {
          signature: tx,
        },
      };
    } catch (e) {
      return {
        status: "error",
        // @ts-expect-error error is not a string
        message: e.message,
      };
    }
  },
};

export default driftSpotTokenSwapAction;


================================================
File: src/actions/drift/tradeDelegatedDriftVault.ts
================================================
import { z } from "zod";
import type { Action } from "../../types";
import type { SolanaAgentKit } from "../../agent";
import { tradeDriftVault } from "../../tools";

const tradeDelegatedDriftVaultAction: Action = {
  name: "TRADE_DELEGATED_DRIFT_VAULT",
  similes: [
    "trade delegated drift vault",
    "trade delegated vault",
    "trade vault",
    "trade drift vault",
    "trade delegated vault",
    "trade vault",
    "trade drift vault",
    "open drift vault trade",
  ],
  description: "Carry out trades in a Drift vault.",
  examples: [
    [
      {
        input: {
          vaultAddress: "J1S9H3QjnRtBbbuD4HjPV6RpRhwuk4zKbxsnCHuTgh9w",
          amount: 100,
          symbol: "SOL",
          action: "buy",
          type: "market",
        },
        output: {
          status: "success",
          message: "Trade successful",
          transactionId: "7nE9GvcwsqzYxmJLSrYmSB1V1YoJWVK1KWzAcWAzjXkN",
          amount: 100,
          symbol: "SOL",
          action: "buy",
          type: "market",
        },
        explanation: "Buy 100 SOL in the vault",
      },
    ],
    [
      {
        input: {
          vaultAddress: "J1S9H3QjnRtBbbuD4HjPV6RpRhwuk4zKbxsnCHuTgh9w",
          amount: 50,
          symbol: "SOL",
          action: "sell",
          type: "limit",
          price: 200,
        },
        output: {
          status: "success",
          message: "Order placed successful",
          transactionId: "8nE9GvcwsqzYxmJLSrYmSB1V1YoJWVK1KWzAcWAzjXkM",
          amount: 50,
          symbol: "SOL",
          action: "sell",
          type: "limit",
          price: 200,
        },
        explanation: "Sell 50 SOL in the vault at $200",
      },
    ],
  ],
  schema: z.object({
    vaultAddress: z.string().describe("Address of the Drift vault to trade in"),
    amount: z
      .number()
      .positive()
      .describe(
        "Amount to trade in normal token amounts e.g 50 SOL, 100 USDC, etc",
      ),
    symbol: z.string().describe("Symbol of the token to trade"),
    action: z.enum(["long", "short"]).describe("Trade action - long or short"),
    type: z.enum(["market", "limit"]).describe("Trade type - market or limit"),
    price: z
      .number()
      .positive()
      .optional()
      .describe("USD price for limit order"),
  }),
  handler: async (agent: SolanaAgentKit, input) => {
    try {
      const params = {
        vaultAddress: input.vaultAddress as string,
        amount: input.amount as number,
        symbol: input.symbol as string,
        action: input.action as "long" | "short",
        type: input.type as "market" | "limit",
        price: input.price as number | undefined,
      };

      // Carry out the trade
      const transactionId = await tradeDriftVault(
        agent,
        params.vaultAddress,
        params.amount,
        params.symbol,
        params.action,
        params.type,
        params.price,
      );

      return {
        status: "success",
        message:
          params.type === "limit"
            ? "Order placed successfully"
            : "Trade successful",
        transactionId,
        ...params,
      };
    } catch (error) {
      return {
        status: "error",
        // @ts-expect-error error is not a string
        message: error.message,
      };
    }
  },
};

export default tradeDelegatedDriftVaultAction;


================================================
File: src/actions/drift/tradePerpAccount.ts
================================================
import { z } from "zod";
import type { Action } from "../../types";
import { driftPerpTrade } from "../../tools";

export const tradeDriftPerpAccountAction: Action = {
  name: "TRADE_DRIFT_PERP_ACCOUNT",
  similes: [
    "trade drift perp account",
    "trade drift perp",
    "trade drift perpetual account",
    "trade perp account",
    "trade account",
  ],
  description: "Trade a perpetual account on Drift protocol",
  examples: [
    [
      {
        input: {
          amount: 100,
          symbol: "SOL",
          action: "long",
          type: "market",
        },
        output: {
          status: "success",
          message: "Trade successful",
        },
        explanation: "Open a $100 long position on SOL.",
      },
    ],
    [
      {
        input: {
          amount: 50,
          symbol: "BTC",
          action: "short",
          type: "limit",
          price: 50000,
        },
        output: {
          status: "success",
          message: "Trade successful",
        },
        explanation: "$50 short position on BTC at $50,000.",
      },
    ],
  ],
  schema: z.object({
    amount: z
      .number()
      .positive()
      .describe(
        "The amount of the token to trade in normal token amounts e.g 50 SOL, 100 USDC",
      ),
    symbol: z
      .string()
      .toUpperCase()
      .describe("Symbol of the token to open a position on "),
    action: z
      .enum(["long", "short"])
      .describe(
        "The action you would like to carry out whether it be a long or a short",
      ),
    type: z
      .enum(["market", "limit"])
      .describe(
        "The type of trade you would like to open, market or limit order",
      ),
    price: z.number().positive().optional().describe("USD price of the token"),
  }),
  handler: async (agent, input) => {
    try {
      const signature = await driftPerpTrade(agent, {
        action: input.action,
        amount: input.amount,
        symbol: input.symbol,
        type: input.type,
        price: input.price,
      });

      return {
        status: "success",
        signature: signature,
      };
    } catch (e) {
      return {
        status: "error",
        // @ts-expect-error - error message is a string
        message: `Failed to trade perp account: ${e.message}`,
      };
    }
  },
};

export default tradeDriftPerpAccountAction;


================================================
File: src/actions/drift/unstakeFromDriftInsuranceFund.ts
================================================
import { z } from "zod";
import type { Action } from "../../types";
import { unstakeFromDriftInsuranceFund } from "../../tools";

const unstakeFromDriftInsuranceFundAction: Action = {
  name: "UNSTAKE_FROM_DRIFT_INSURANCE_FUND_ACTION",
  description:
    "Unstake requested unstake token from the Drift Insurance fund once the cool period has elapsed",
  similes: [
    "unstake from the drift insurance fund",
    "withdraw from the drift insurance fund",
    "take out funds from the drift insurance fund",
  ],
  examples: [
    [
      {
        input: {
          symbol: "SOL",
        },
        output: {
          status: "success",
          message: "Unstaked your SOL from the Drift Insurance Fund",
          signature: "4FdasklhiIHyOI",
        },
        explanation: "Unstake SOL from the Drift Insurance Fund",
      },
    ],
  ],
  schema: z.object({
    symbol: z.string().describe("Symbol of the token to unstake"),
  }),
  handler: async (agent, input) => {
    try {
      const tx = await unstakeFromDriftInsuranceFund(agent, input.symbol);

      return {
        status: "success",
        message: `Unstaked your ${input.symbol} from the Drift Insurance Fund`,
        signature: tx,
      };
    } catch (e) {
      return {
        status: "error",
        // @ts-expect-error error is not a string
        message: e.message,
      };
    }
  },
};

export default unstakeFromDriftInsuranceFundAction;


================================================
File: src/actions/drift/updateDriftVaultDelegate.ts
================================================
import { z } from "zod";
import type { Action } from "../../types";
import { updateVaultDelegate } from "../../tools";

const updateDriftVaultDelegateAction: Action = {
  name: "UPDATE_DRIFT_VAULT_DELEGATE_ACTION",
  similes: ["update drift vault delegate", "change drift vault delegate"],
  description: "Update the delegate of a drift vault",
  examples: [
    [
      {
        input: {
          vaultAddress: "2nFeP7taii3wGVgrWk4YiLMPmhtu3Zg9iXCUu4zGBD",
          newDelegate: "2nFeP7tai",
        },
        output: {
          status: "success",
          message: "Vault delegate updated successfully",
          signature:
            "2nFeP7taii3wGVgrWk4YiLMPmhtu3Zg9iXCUu4zGBDadwunHw8reXFxRWT7khbFsQ9JT3zK4RYDLNDFDRYvM3wJk",
        },
        explanation: "Update the delegate of a drift vault to another address",
      },
    ],
  ],
  schema: z.object({
    vaultAddress: z.string().describe("vault's address"),
    newDelegate: z.string().describe("new address to delegate the vault to"),
  }),
  handler: async (agent, input) => {
    try {
      const tx = await updateVaultDelegate(
        agent,
        input.vaultAddress as string,
        input.newDelegate as string,
      );

      return {
        status: "success",
        message: "Vault delegate updated successfully",
        signature: tx,
      };
    } catch (e) {
      return {
        status: "error",
        // @ts-expect-error - error message
        message: `Failed to update vault delegate: ${e.message}`,
      };
    }
  },
};

export default updateDriftVaultDelegateAction;


================================================
File: src/actions/drift/updateVault.ts
================================================
import { z } from "zod";
import type { Action } from "../../types";
import type { SolanaAgentKit } from "../../agent";
import { updateVault } from "../../tools";

const updateDriftVaultAction: Action = {
  name: "UPDATE_DRIFT_VAULT",
  similes: ["update a drift vault", "modify a drift vault", "update vault"],
  description: "Update an existing drift vault with new settings.",
  examples: [
    [
      {
        input: {
          redeemPeriod: 30,
          maxTokens: 10000,
          minDepositAmount: 10,
          managementFee: 5,
          profitShare: 10,
          handleRate: 0.1,
          permissioned: false,
          vaultAddress: "2nFeP7taii3wGVgrWk4YiLMPmhtu3Zg9iXCUu4zGBD",
        },
        output: {
          status: "success",
          message: "Drift vault updated successfully",
          signature:
            "2nFeP7taii3wGVgrWk4YiLMPmhtu3Zg9iXCUu4zGBDadwunHw8reXFxRWT7khbFsQ9JT3zK4RYDLNDFDRYvM3wJk",
        },
        explanation: "Update a drift vault",
      },
    ],
  ],
  schema: z.object({
    vaultAddress: z.string(),
    name: z.string().min(5, "Name must be at least 5 characters").optional(),
    // regex matches SOL-SPOT
    marketName: z
      .string()
      .regex(/^([A-Za-z0-9]{2,7})-SPOT$/)
      .optional(),
    redeemPeriod: z
      .number()
      .int()
      .min(1, "Redeem period must be at least 1 day")
      .optional(),
    maxTokens: z
      .number()
      .int()
      .min(100, "Max tokens must be at least be 100 units")
      .optional()
      .describe(
        "The maximum number of tokens the vault is willing to accept and manage",
      ),
    minDepositAmount: z
      .number()
      .positive()
      .optional()
      .describe(
        "The minimum amount that is allowed to be deposited into the vault in normal token amounts e.g 10 USDC",
      ),
    managementFee: z
      .number()
      .positive()
      .max(20)
      .optional()
      .describe("The percentage fee the vault takes for asset management"),
    profitShare: z
      .number()
      .positive()
      .max(90)
      .optional()
      .describe("Profit share in percentage e.g 2 === 2%"),
    handleRate: z.number().optional(),
    permissioned: z
      .boolean()
      .optional()
      .describe("Should the vault have a whitelist of not"),
  }),
  handler: async (agent: SolanaAgentKit, input) => {
    try {
      const tx = await updateVault(agent, input.vaultAddress, {
        hurdleRate: input.hurdleRate,
        maxTokens: input.maxTokens,
        minDepositAmount: input.minDepositAmount,
        profitShare: input.profitShare,
        managementFee: input.managementFee,
        permissioned: input.permissioned,
        redeemPeriod: input.redeemPeriod,
      });

      return {
        status: "success",
        message: "Drift vault parameters updated successfully",
        signature: tx,
      };
    } catch (e) {
      return {
        status: "error",
        // @ts-expect-error - error message
        message: `Failed to update drift vault: ${e.message}`,
      };
    }
  },
};

export default updateDriftVaultAction;


================================================
File: src/actions/drift/vaultInfo.ts
================================================
import { z } from "zod";
import type { Action } from "../../types";
import { getVaultInfo } from "../../tools";
import type { SolanaAgentKit } from "../../agent";

const vaultInfoAction: Action = {
  name: "DRIFT_VAULT_INFO",
  similes: ["get drift vault info", "vault info", "vault information"],
  description: "Get information about a drift vault",
  examples: [
    [
      {
        input: {
          vaultNameOrAddress: "test-vault",
        },
        output: {
          status: "success",
          message: "Vault info retrieved successfully",
          data: {
            name: "My Drift Vault",
            marketName: "SOL-SPOT",
            redeemPeriod: 30,
            maxTokens: 1000,
            minDepositAmount: 100,
            managementFee: 10,
            profitShare: 5,
            hurdleRate: 0.1,
            permissioned: false,
          },
        },
        explanation: "Get information about a drift vault",
      },
    ],
  ],
  schema: z.object({
    vaultNameOrAddress: z.string().describe("Name or address of the vault"),
  }),
  handler: async (agent: SolanaAgentKit, input) => {
    try {
      const vaultInfo = await getVaultInfo(agent, input.vaultNameOrAddress);

      return {
        status: "success",
        message: "Vault info retrieved successfully",
        data: vaultInfo,
      };
    } catch (e) {
      return {
        status: "error",
        // @ts-expect-error - error message
        message: `Failed to retrieve vault info: ${e.message}`,
      };
    }
  },
};

export default vaultInfoAction;


================================================
File: src/actions/drift/withdrawFromDriftAccount.ts
================================================
import { z } from "zod";
import type { Action } from "../../types";
import { withdrawFromDriftUserAccount } from "../../tools";

const withdrawFromDriftAccountAction: Action = {
  name: "WITHDRAW_OR_BORROW_FROM_DRIFT_ACCOUNT",
  description: "Withdraw funds from your drift account",
  similes: [
    "withdraw from drift account",
    "withdraw funds from drift account",
    "withdraw funds from my drift account",
    "borrow from drift account",
    "borrow funds from my drift account",
    "borrow from drift",
    "withdraw from drift",
  ],
  examples: [
    [
      {
        input: {
          amount: 100,
          symbol: "usdc",
        },
        output: {
          status: "success",
          message: "Funds withdrawn successfully",
          signature:
            "2nFeP7taii3wGVgrWk4YiLMPmhtu3Zg9iXCUu4zGBDadwunHw8reXFxRWT7khbFsQ9JT3zK4RYDLNDFDRYvM3wJk",
        },
        explanation: "Withdraw 100 USDC from your drift account",
      },
    ],
  ],
  schema: z.object({
    amount: z
      .number()
      .positive()
      .describe(
        "The amount in tokens you'd like to withdraw from your drift account in normal token amounts, e.g 50 SOL, 100 USDC, etc",
      ),
    symbol: z
      .string()
      .toUpperCase()
      .describe("The symbol of the token you'd like to withdraw"),
    isBorrow: z
      .boolean()
      .optional()
      .default(false)
      .describe(
        "Whether or not to borrow funds based on collateral provided instead of withdrawing",
      ),
  }),
  handler: async (agent, input) => {
    try {
      const tx = await withdrawFromDriftUserAccount(
        agent,
        input.amount,
        input.symbol,
        input.isBorrow,
      );

      return {
        status: "success",
        message: "Funds withdrawn successfully",
        signature: tx,
      };
    } catch (e) {
      return {
        status: "error",
        // @ts-expect-error - error message is a string
        message: `Failed to withdraw funds: ${e.message}`,
      };
    }
  },
};

export default withdrawFromDriftAccountAction;


================================================
File: src/actions/drift/withdrawFromVault.ts
================================================
import { z } from "zod";
import type { Action } from "../../types";
import type { SolanaAgentKit } from "../../agent";
import { withdrawFromDriftVault } from "../../tools";

const withdrawFromVaultAction: Action = {
  name: "WITHDRAW_FROM_DRIFT_VAULT",
  description:
    "Withdraw funds from a vault given the redemption time has elapsed.",
  similes: ["withdraw from drift vault", "redeem funds from vault"],
  examples: [
    [
      {
        input: {
          vaultAddress: "2nFeP7taii",
        },
        output: {
          status: "success",
          message: "Withdrawal successful",
          signature:
            "2nFeP7taii3wGVgrWk4YiLMPmhtu3Zg9iXCUu4zGBDadwunHw8reXFxRWT7khbFsQ9JT3zK4RYDLNDFDRYvM3wJk",
        },
        explanation: "Withdraw funds from a drift vault",
      },
    ],
  ],
  schema: z.object({
    vaultAddress: z.string().describe("Vault's address"),
  }),
  handler: async (agent: SolanaAgentKit, input) => {
    try {
      const tx = await withdrawFromDriftVault(
        agent,
        input.vaultAddress as string,
      );

      return {
        status: "success",
        message: "Withdrawal successful",
        signature: tx,
      };
    } catch (e) {
      return {
        status: "error",
        // @ts-expect-error - error message
        message: `Failed to withdraw funds: ${e.message}`,
      };
    }
  },
};

export default withdrawFromVaultAction;


================================================
File: src/actions/flash/flashCloseTrade.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { flashCloseTrade } from "../../tools/flash";

const flashCloseTradeAction: Action = {
  name: "FLASH_CLOSE_TRADE",
  similes: [
    "close trade",
    "close leveraged trade",
    "exit position",
    "close position",
    "exit trade",
    "close long",
    "close short",
    "take profit",
    "stop loss",
  ],
  description:
    "Close an existing leveraged trading position on Flash.Trade protocol",
  examples: [
    [
      {
        input: {
          token: "SOL",
          side: "long",
        },
        output: {
          status: "success",
          signature: "4xKpN2...",
          message: "Successfully closed long position on SOL",
        },
        explanation: "Close an existing long position on SOL",
      },
    ],
  ],
  schema: z.object({
    token: z
      .string()
      .describe("Token symbol of the position to close (e.g. SOL, ETH)"),
    side: z
      .enum(["long", "short"])
      .describe("Position side to close - long or short"),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    try {
      const params = {
        token: input.token as string,
        side: input.side as "long" | "short",
      };

      const response = await flashCloseTrade(agent, params);

      return {
        status: "success",
        signature: response,
        message: `Successfully closed ${params.side} position on ${params.token}`,
      };
    } catch (error: any) {
      return {
        status: "error",
        message: `Flash trade close failed: ${error.message}`,
      };
    }
  },
};

export default flashCloseTradeAction;


================================================
File: src/actions/flash/flashOpenTrade.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { flashOpenTrade } from "../../tools/flash";

const flashOpenTradeAction: Action = {
  name: "FLASH_OPEN_TRADE",
  similes: [
    "open trade",
    "open leveraged trade",
    "start trading position",
    "open position",
    "long position",
    "short position",
    "leverage trade",
    "margin trade",
  ],
  description: "Open a leveraged trading position on Flash.Trade protocol",
  examples: [
    [
      {
        input: {
          token: "SOL",
          side: "long",
          collateralUsd: 100,
          leverage: 5,
        },
        output: {
          status: "success",
          signature: "4xKpN2...",
          message:
            "Successfully opened 5x long position on SOL with $100 collateral",
        },
        explanation:
          "Open a 5x leveraged long position on SOL using $100 as collateral",
      },
    ],
  ],
  schema: z.object({
    token: z.string().describe("Token symbol to trade (e.g. SOL, ETH)"),
    side: z
      .enum(["long", "short"])
      .describe("Trading direction - long or short"),
    collateralUsd: z
      .number()
      .positive()
      .describe("Amount of collateral in USD"),
    leverage: z
      .number()
      .positive()
      .describe("Leverage multiplier for the trade"),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    try {
      const params = {
        token: input.token as string,
        side: input.side as "long" | "short",
        collateralUsd: input.collateralUsd as number,
        leverage: input.leverage as number,
      };

      const response = await flashOpenTrade(agent, params);

      return {
        status: "success",
        signature: response,
        message: `Successfully opened ${params.leverage}x ${params.side} position on ${params.token} with $${params.collateralUsd} collateral`,
      };
    } catch (error: any) {
      return {
        status: "error",
        message: `Flash trade failed: ${error.message}`,
      };
    }
  },
};

export default flashOpenTradeAction;


================================================
File: src/actions/gibwork/createGibworkTask.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { PublicKey } from "@solana/web3.js";
import { create_gibwork_task } from "../../tools/gibwork";

const createGibworkTaskAction: Action = {
  name: "CREATE_GIBWORK_TASK",
  similes: [
    "create task",
    "post job",
    "create gig",
    "post task",
    "create work",
    "new task on gibwork",
  ],
  description:
    "Create a new task on the Gibwork platform with payment in SPL tokens",
  examples: [
    [
      {
        input: {
          title: "Build a Solana dApp",
          content: "Create a simple Solana dApp with React frontend",
          requirements: "Experience with Rust and React",
          tags: ["solana", "rust", "react"],
          tokenMintAddress: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",
          tokenAmount: 100,
        },
        output: {
          status: "success",
          taskId: "task_123",
          signature: "3YKpM1...",
          message: "Successfully created task: Build a Solana dApp",
        },
        explanation: "Create a new task on Gibwork with 100 USDC payment",
      },
    ],
  ],
  schema: z.object({
    title: z.string().min(1).describe("Title of the task"),
    content: z.string().min(1).describe("Description of the task"),
    requirements: z
      .string()
      .min(1)
      .describe("Requirements to complete the task"),
    tags: z
      .array(z.string())
      .min(1)
      .describe("List of tags associated with the task"),
    tokenMintAddress: z.string().describe("Token mint address for payment"),
    tokenAmount: z.number().positive().describe("Payment amount for the task"),
    payer: z
      .string()
      .optional()
      .describe("Optional payer address (defaults to wallet address)"),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    try {
      const responseData = await create_gibwork_task(
        agent,
        input.title,
        input.content,
        input.requirements,
        input.tags,
        new PublicKey(input.tokenMintAddress),
        input.tokenAmount,
        input.payer ? new PublicKey(input.payer) : undefined,
      );

      return {
        status: "success",
        taskId: responseData.taskId,
        signature: responseData.signature,
        message: `Successfully created task: ${input.title}`,
      };
    } catch (error: any) {
      return {
        status: "error",
        message: `Failed to create task: ${error.message}`,
      };
    }
  },
};

export default createGibworkTaskAction;


================================================
File: src/actions/helius/createWebhook.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { create_HeliusWebhook } from "../../tools/helius";

const createWebhookAction: Action = {
  name: "CREATE_HELIOUS_WEBHOOK",
  similes: ["setup webhook", "register webhook", "initiate webhook"],
  description:
    "Creates a new webhook in the Helius system to monitor transactions for specified account addresses",
  examples: [
    [
      {
        input: {
          accountAddresses: [
            "BVdNLvyG2DNiWAXBE9qAmc4MTQXymd5Bzfo9xrQSUzVP",
            "Eo2ciguhMLmcTWXELuEQPdu7DWZt67LHXb2rdHZUbot7",
          ],
          webhookURL: "https://yourdomain.com/webhook",
        },
        output: {
          status: "success",
          webhookURL: "https://yourdomain.com/webhook",
          webhookID: "webhook_123",
          message: "Webhook created successfully.",
        },
        explanation:
          "Creates a Webhook to send live notifications on the given Url with the wallet Addresses.",
      },
    ],
  ],
  schema: z.object({
    accountAddresses: z
      .array(z.string())
      .min(1)
      .describe("List of Solana account public keys to monitor"),
    webhookURL: z
      .string()
      .url()
      .describe("The URL where Helius will send webhook notifications"),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    const response = await create_HeliusWebhook(
      agent,
      input.accountAddresses,
      input.webhookURL,
    );

    return {
      status: "success",
      ...response,
      message: "Webhook created successfully.",
    };
  },
};

export default createWebhookAction;


================================================
File: src/actions/helius/deleteWebhook.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { deleteHeliusWebhook } from "../../tools/helius";

const deleteWebhookAction: Action = {
  name: "DELETE_HELIOUS_WEBHOOK",
  similes: ["remove webhook", "unregister webhook", "delete webhook"],
  description: "Deletes a Helius webhook by its unique ID",
  examples: [
    [
      {
        input: {
          webhookID: "webhook_123",
        },
        output: {
          status: "success",
          message: "Webhook deleted successfully.",
        },
        explanation: "Permanently removes a Helius webhook.",
      },
    ],
  ],
  schema: z.object({
    webhookID: z
      .string()
      .min(1)
      .describe("The unique identifier of the Helius webhook to delete"),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    const result = await deleteHeliusWebhook(agent, input.webhookID);

    return {
      status: "success",
      message: result.message || "Webhook deleted successfully.",
    };
  },
};

export default deleteWebhookAction;


================================================
File: src/actions/helius/getAssetsbyOwner.ts
================================================
import { Action } from "../../types/action";
import { PublicKey } from "@solana/web3.js";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { getAssetsByOwner } from "../../tools/helius";

const getAssetsByOwnerAction: Action = {
  name: "FETCH_ASSETS_BY_OWNER",
  similes: [
    "fetch assets",
    "get assets",
    "retrieve assets",
    "list assets",
    "assets by owner",
  ],
  description:
    "Fetch assets owned by a specific Solana wallet address using the Helius Digital Asset Standard API",
  examples: [
    [
      {
        input: {
          ownerPublicKey: "4Pf8q3mHGLdkoc1M8xWZwW5q32gYmdhwC2gJ8K9EAGDX",
          limit: 10,
        },
        output: {
          status: "success",
          assets: [
            {
              name: "Helius NFT #1",
              type: "NFT",
              owner: "4Pf8q3mHGLdkoc1M8xWZwW5q32gYmdhwC2gJ8K9EAGDX",
            },
            {
              name: "Helius Token #10",
              type: "Token",
              owner: "4Pf8q3mHGLdkoc1M8xWZwW5q32gYmdhwC2gJ8K9EAGDX",
            },
          ],
          message: "Successfully fetched assets for the wallet address",
        },
        explanation:
          "Fetches a list of assets from the for the given wallet address with a limit of 10 items.",
      },
    ],
  ],
  schema: z.object({
    ownerPublicKey: z.string().describe("Owner's Solana wallet PublicKey"),
    limit: z
      .number()
      .positive()
      .describe("Number of assets to retrieve per request"),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    try {
      const assets = await getAssetsByOwner(
        agent,
        new PublicKey(input.ownerPublicKey),
        input.limit,
      );

      return {
        status: "success",
        assets: assets,
        message: `Successfully fetched assets for the wallet address: ${input.ownerPublicKey}`,
      };
    } catch (error: any) {
      return {
        status: "error",
        message: `Failed to fetch assets: ${error.message}`,
      };
    }
  },
};

export default getAssetsByOwnerAction;


================================================
File: src/actions/helius/getWebhook.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { getHeliusWebhook } from "../../tools/helius";

const getWebhookAction: Action = {
  name: "GET_HELIOUS_WEBHOOK",
  similes: ["fetch webhook details", "retrieve webhook", "get webhook info"],
  description: "Retrieves details of a Helius webhook by its unique ID",
  examples: [
    [
      {
        input: {
          webhookID: "webhook_123",
        },
        output: {
          status: "success",
          wallet: "WalletPublicKey",
          webhookURL: "https://yourdomain.com/webhook",
          transactionTypes: ["Any"],
          accountAddresses: ["SomePublicKey", "AnotherPublicKey"],
          webhookType: "enhanced",
          message: "Webhook details retrieved successfully.",
        },
        explanation:
          "Retrieves detailed information about an existing Helius webhook, including the wallet address it monitors, the types of transactions it tracks, and the specific webhook URL.",
      },
    ],
  ],
  schema: z.object({
    webhookID: z
      .string()
      .min(1)
      .describe("The unique identifier of the Helius webhook to retrieve"),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    const webhookDetails = await getHeliusWebhook(agent, input.webhookID);

    return {
      status: "success",
      ...webhookDetails,
      message: "Webhook details retrieved successfully.",
    };
  },
};

export default getWebhookAction;


================================================
File: src/actions/helius/parseTransaction.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { parseTransaction } from "../../tools/helius";

const parseSolanaTransactionAction: Action = {
  name: "PARSE_SOLANA_TRANSACTION",
  similes: [
    "parse transaction",
    "analyze transaction",
    "inspect transaction",
    "decode transaction",
  ],
  description:
    "Parse a Solana transaction to retrieve detailed information using the Helius Enhanced Transactions API",
  examples: [
    [
      {
        input: {
          transactionId:
            "4zZVvbgzcriyjAeEiK1w7CeDCt7gYThUCZat3ULTNerzKHF4WLfRG2YUjbRovfFJ639TAyARB4oyRDcLVUvrakq7",
        },
        output: {
          status: "success",
          transaction: {
            details: "Transaction details...",
            involvedAccounts: ["Account1", "Account2"],
            executedOperations: [{ operation: "Transfer", amount: "1000 SOL" }],
          },
          message:
            "Successfully parsed transaction: 4zZVvbgzcriyjAeEiK1w7CeDCt7gYThUCZat3ULTNerzKHF4WLfRG2YUjbRovfFJ639TAyARB4oyRDcLVUvrakq7",
        },
        explanation:
          "Parse a Transaction to transform it into human readable format.",
      },
    ],
  ],
  schema: z.object({
    transactionId: z
      .string()
      .min(1)
      .describe("The Solana transaction ID to parse"),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    try {
      const parsedTransactionData = await parseTransaction(
        agent,
        input.transactionId,
      );

      return {
        status: "success",
        transaction: parsedTransactionData,
        message: `Successfully parsed transaction: ${input.transactionId}`,
      };
    } catch (error: any) {
      return {
        status: "error",
        message: `Failed to parse transaction: ${error.message}`,
      };
    }
  },
};

export default parseSolanaTransactionAction;


================================================
File: src/actions/helius/sendTransactionWithPriority.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { sendTransactionWithPriorityFee } from "../../tools/helius";
import { PublicKey } from "@solana/web3.js";

const sendTransactionWithPriorityFeeAction: Action = {
  name: "SEND_TRANSACTION_WITH_PRIORITY_FEE",
  similes: [
    "send SOL with fee",
    "transfer tokens with priority",
    "execute priority transaction",
  ],
  description:
    "Sends SOL or SPL tokens from a wallet with an estimated priority fee, ensuring faster processing on the Solana network.",
  examples: [
    [
      {
        input: {
          priorityLevel: "High",
          amount: 2,
          to: "BVdNLvyG2DNiWAXBE9qAmc4MTQXymd5Bzfo9xrQSUzVP",
          splmintAddress: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",
        },
        output: {
          status: "success",
          transactionId: "5Xgq9xVABhwXpNStWpfqxS6Vm5Eau91pjfeHNwJbRgis",
          fee: 5000,
          message: "Transaction sent with priority fee successfully.",
        },
        explanation:
          "Sends 2 USDC to BVdNLvyG2DNiWAXBE9qAmc4MTQXymd5Bzfo9xrQSUzVP with High priority fee option.",
      },
    ],
  ],
  schema: z.object({
    priorityLevel: z
      .enum(["Min", "Low", "Medium", "High", "VeryHigh", "UnsafeMax"])
      .describe("Priority level to determine the urgency of the transaction."),
    amount: z
      .number()
      .positive()
      .describe("Amount of SOL or SPL tokens to send."),
    to: z.string().describe("Recipient's PublicKey."),
    splmintAddress: z
      .string()
      .optional()
      .describe(
        "Optional SPL token address, if transferring tokens other than SOL.",
      ),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    const { priorityLevel, amount, to, splmintAddress } = input;
    const toPublicKey = new PublicKey(to);
    const splmintPublicKey = splmintAddress
      ? new PublicKey(splmintAddress)
      : undefined;

    const result = await sendTransactionWithPriorityFee(
      agent,
      priorityLevel,
      amount,
      toPublicKey,
      splmintPublicKey,
    );

    return {
      status: "success",
      transactionId: result.transactionId,
      fee: result.fee,
      message: "Transaction sent with priority fee successfully.",
    };
  },
};

export default sendTransactionWithPriorityFeeAction;


================================================
File: src/actions/jupiter/fetchPrice.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { PublicKey } from "@solana/web3.js";
import { fetchPrice } from "../../tools/jupiter";

const fetchPriceAction: Action = {
  name: "FETCH_PRICE",
  similes: [
    "get token price",
    "check price",
    "token value",
    "price check",
    "get price in usd",
  ],
  description:
    "Fetch the current price of a Solana token in USDC using Jupiter API",
  examples: [
    [
      {
        input: {
          tokenAddress: "So11111111111111111111111111111111111111112",
        },
        output: {
          status: "success",
          price: "23.45",
          message: "Current price: $23.45 USDC",
        },
        explanation: "Get the current price of SOL token in USDC",
      },
    ],
  ],
  schema: z.object({
    tokenAddress: z
      .string()
      .describe("The mint address of the token to fetch the price for"),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    try {
      const tokenId = new PublicKey(input.tokenAddress);
      const price = await fetchPrice(tokenId);

      return {
        status: "success",
        price,
        message: `Current price: $${price} USDC`,
      };
    } catch (error: any) {
      return {
        status: "error",
        message: `Failed to fetch price: ${error.message}`,
      };
    }
  },
};

export default fetchPriceAction;


================================================
File: src/actions/jupiter/getTokenData.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { PublicKey } from "@solana/web3.js";
import { JupiterTokenData } from "../../types";
import { getTokenAddressFromTicker, getTokenDataByAddress } from "../../tools";

const getTokenDataAction: Action = {
  name: "GET_TOKEN_DATA",
  similes: [
    "get token info",
    "token details",
    "lookup token",
    "find token",
    "token data",
  ],
  description: "Get token data from either a token address or ticker symbol",
  examples: [
    [
      {
        input: {
          address: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",
        },
        output: {
          status: "success",
          token: {
            name: "USD Coin",
            symbol: "USDC",
            address: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",
            decimals: 6,
          },
        },
        explanation: "Get token data using the token's address",
      },
    ],
    [
      {
        input: {
          ticker: "SOL",
        },
        output: {
          status: "success",
          token: {
            name: "Wrapped SOL",
            symbol: "SOL",
            address: "So11111111111111111111111111111111111111112",
            decimals: 9,
          },
        },
        explanation: "Get token data using the token's ticker symbol",
      },
    ],
  ],
  schema: z
    .object({
      address: z.string().optional().describe("The token's mint address"),
      ticker: z.string().optional().describe("The token's ticker symbol"),
    })
    .refine((data) => data.address || data.ticker, {
      message: "Either address or ticker must be provided",
    }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    try {
      let tokenData: JupiterTokenData | undefined;
      if (input.address) {
        tokenData = await getTokenDataByAddress(new PublicKey(input.address));
      } else if (input.ticker) {
        const address = await getTokenAddressFromTicker(input.ticker);
        if (address) {
          tokenData = await getTokenDataByAddress(new PublicKey(address));
        }
      }
      if (!tokenData) {
        return {
          status: "error",
          message: "Token not found or not verified",
        };
      }
      return {
        status: "success",
        token: {
          name: tokenData.name,
          symbol: tokenData.symbol,
          address: tokenData.address,
          decimals: tokenData.decimals,
          logoURI: tokenData.logoURI,
        },
      };
    } catch (error: any) {
      return {
        status: "error",
        message: `Failed to get token data: ${error.message}`,
      };
    }
  },
};

export default getTokenDataAction;


================================================
File: src/actions/jupiter/stakeWithJup.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { stakeWithJup } from "../../tools";

const stakeWithJupAction: Action = {
  name: "STAKE_WITH_JUPITER",
  similes: [
    "stake sol",
    "stake with jupiter",
    "jup staking",
    "stake with jup",
    "liquid staking",
    "get jupsol",
  ],
  description:
    "Stake SOL tokens with Jupiter's liquid staking protocol to receive jupSOL",
  examples: [
    [
      {
        input: {
          amount: 1.5,
        },
        output: {
          status: "success",
          signature: "5KtPn3...",
          message: "Successfully staked 1.5 SOL for jupSOL",
        },
        explanation: "Stake 1.5 SOL to receive jupSOL tokens",
      },
    ],
  ],
  schema: z.object({
    amount: z.number().positive().describe("Amount of SOL to stake"),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    try {
      const amount = input.amount as number;

      const res = await stakeWithJup(agent, amount);
      return {
        status: "success",
        res,
        message: `Successfully staked ${amount} SOL for jupSOL`,
      };
    } catch (error: any) {
      return {
        status: "error",
        message: `jupSOL staking failed: ${error.message}`,
      };
    }
  },
};

export default stakeWithJupAction;


================================================
File: src/actions/jupiter/trade.ts
================================================
import { PublicKey } from "@solana/web3.js";
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { trade } from "../../tools";

const tradeAction: Action = {
  name: "TRADE",
  similes: [
    "swap tokens",
    "exchange tokens",
    "trade tokens",
    "convert tokens",
    "swap sol",
  ],
  description: `This tool can be used to swap tokens to another token (It uses Jupiter Exchange).`,
  examples: [
    [
      {
        input: {
          outputMint: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",
          inputAmount: 1,
        },
        output: {
          status: "success",
          message: "Trade executed successfully",
          transaction:
            "5UfgJ5vVZxUxefDGqzqkVLHzHxVTyYH9StYyHKgvHYmXJgqJKxEqy9k4Rz9LpXrHF9kUZB7",
          inputAmount: 1,
          inputToken: "SOL",
          outputToken: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",
        },
        explanation: "Swap 1 SOL for USDC",
      },
    ],
    [
      {
        input: {
          outputMint: "So11111111111111111111111111111111111111112",
          inputAmount: 100,
          inputMint: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",
          slippageBps: 100,
        },
        output: {
          status: "success",
          message: "Trade executed successfully",
          transaction:
            "4VfgJ5vVZxUxefDGqzqkVLHzHxVTyYH9StYyHKgvHYmXJgqJKxEqy9k4Rz9LpXrHF9kUZB7",
          inputAmount: 100,
          inputToken: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",
          outputToken: "So11111111111111111111111111111111111111112",
        },
        explanation: "Swap 100 USDC for SOL with 1% slippage",
      },
    ],
  ],
  schema: z.object({
    outputMint: z.string().min(32, "Invalid output mint address"),
    inputAmount: z.number().positive("Input amount must be positive"),
    inputMint: z.string().min(32, "Invalid input mint address").optional(),
    slippageBps: z.number().min(0).max(10000).optional(),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    const tx = await trade(
      agent,
      new PublicKey(input.outputMint),
      input.inputAmount,
      input.inputMint
        ? new PublicKey(input.inputMint)
        : new PublicKey("So11111111111111111111111111111111111111112"),
      input.slippageBps,
    );

    return {
      status: "success",
      message: "Trade executed successfully",
      transaction: tx,
      inputAmount: input.inputAmount,
      inputToken: input.inputMint || "SOL",
      outputToken: input.outputMint,
    };
  },
};

export default tradeAction;


================================================
File: src/actions/lightprotocol/compressedAirdrop.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { sendCompressedAirdrop } from "../../tools";

const compressedAirdropAction: Action = {
  name: "COMPRESSED_AIRDROP",
  similes: [
    "ZK Compressed airdrop",
    "Airdrop tokens with compression",
    "Send compressed SPL airdrop",
    "Airdrop to multiple recipients",
  ],
  description:
    "Airdrop SPL tokens with ZK Compression (also known as airdropping tokens) to multiple recipients",
  examples: [
    [
      {
        input: {
          mintAddress: "JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN",
          amount: 42,
          decimals: 6,
          recipients: [
            "1nc1nerator11111111111111111111111111111111",
            "BrFndAe111111111111111111111111111111111",
          ],
          priorityFeeInLamports: 30000,
          shouldLog: true,
        },
        output: {
          status: "success",
          message: "Airdropped 42 tokens to 2 recipients.",
          transactionHashes: ["4uyfBN...", "9XsF2N..."],
        },
        explanation:
          "Airdrops 42 tokens (with 6 decimals) to 2 recipients, optionally logging progress to stdout.",
      },
    ],
  ],
  // Validate inputs with zod
  schema: z.object({
    mintAddress: z
      .string()
      .min(1)
      .describe("Mint address of the token, e.g., 'JUPy...'"),
    amount: z
      .number()
      .positive()
      .describe("Number of tokens to airdrop per recipient, e.g., 42"),
    decimals: z
      .number()
      .nonnegative()
      .int()
      .describe("Decimals of the token, e.g., 6"),
    recipients: z
      .array(z.string())
      .nonempty()
      .describe("Array of recipient addresses, e.g., ['1nc1n...']"),
    priorityFeeInLamports: z
      .number()
      .optional()
      .describe("Priority fee in lamports (default is 30_000)"),
    shouldLog: z
      .boolean()
      .optional()
      .describe("Whether to log progress to stdout (default is false)"),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    try {
      const {
        mintAddress,
        amount,
        decimals,
        recipients,
        priorityFeeInLamports,
        shouldLog,
      } = input;

      // Call your airdrop method on the SolanaAgentKit
      const txs = await sendCompressedAirdrop(
        mintAddress,
        amount,
        decimals,
        recipients,
        priorityFeeInLamports || 30_000,
        shouldLog || false,
      );

      return {
        status: "success",
        message: `Airdropped ${amount} tokens to ${recipients.length} recipients.`,
        transactionHashes: txs,
      };
    } catch (error: any) {
      return {
        status: "error",
        message: `Failed to airdrop tokens: ${error.message}`,
        code: error.code || "UNKNOWN_ERROR",
      };
    }
  },
};

export default compressedAirdropAction;


================================================
File: src/actions/lulo/lendAsset.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { lendAsset } from "../../tools/lulo";

const lendAssetAction: Action = {
  name: "LEND_ASSET",
  similes: [
    "lend usdc",
    "deposit for yield",
    "earn yield",
    "lend with lulo",
    "deposit usdc",
    "lending",
  ],
  description: "Lend USDC tokens to earn yield using Lulo protocol",
  examples: [
    [
      {
        input: {
          amount: 100,
        },
        output: {
          status: "success",
          signature: "4xKpN2...",
          message: "Successfully lent 100 USDC",
        },
        explanation: "Lend 100 USDC to earn yield on Lulo",
      },
    ],
  ],
  schema: z.object({
    amount: z.number().positive().describe("Amount of USDC to lend"),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    try {
      const amount = input.amount as number;

      const response = await lendAsset(agent, amount);

      return {
        status: "success",
        signature: response,
        message: `Successfully lent ${amount} USDC`,
      };
    } catch (error: any) {
      return {
        status: "error",
        message: `Lending failed: ${error.message}`,
      };
    }
  },
};

export default lendAssetAction;


================================================
File: src/actions/lulo/luloLend.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { luloLend } from "../../tools/lulo";

const luloLendAction: Action = {
  name: "LULO_LEND",
  similes: [
    "lend USDC with lulo",
    "lend PYUSD with lulo",
    "lend USDS with lulo",
    "lend USDT with lulo",
    "lend SQL with lulo",
    "lend jitoSQL with lulo",
    "lend bSQL with lulo",
    "lend mSQL with lulo",
    "lend BONK with lulo",
    "lend JUP with lulo",
  ],
  description: "Lend SPL tokens using Lulo protocol",
  examples: [
    [
      {
        input: {
          mintAddress: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",
          amount: 100,
        },
        output: {
          status: "success",
          signature: "4xKpN2...",
          message: "Successfully lend 100 USDC",
        },
        explanation: "Lend 100 USDC on Lulo",
      },
    ],
  ],
  schema: z.object({
    mintAddress: z.string().describe("SPL Mint address"),
    amount: z.number().positive().describe("Amount to lend"),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    try {
      const mintAddress = input.mintAddress as string;
      const amount = input.amount as number;

      const response = await luloLend(agent, mintAddress, amount);

      return {
        status: "success",
        signature: response,
        message: `Successfully lend ${amount} of token ${mintAddress}`,
      };
    } catch (error: any) {
      return {
        status: "error",
        message: `Lend failed: ${error.message}`,
      };
    }
  },
};

export default luloLendAction;


================================================
File: src/actions/lulo/luloWithdraw.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { luloWithdraw } from "../../tools/lulo";

const luloWithdrawAction: Action = {
  name: "LULO_WITHDRAW",
  similes: [
    "withdraw USDC with lulo",
    "withdraw PYUSD with lulo",
    "withdraw USDS with lulo",
    "withdraw USDT with lulo",
    "withdraw SQL with lulo",
    "withdraw jitoSQL with lulo",
    "withdraw bSQL with lulo",
    "withdraw mSQL with lulo",
    "withdraw BONK with lulo",
    "withdraw JUP with lulo",
  ],
  description: "Withdraw SPL tokens using Lulo protocol",
  examples: [
    [
      {
        input: {
          mintAddress: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",
          amount: 100,
        },
        output: {
          status: "success",
          signature: "4xKpN2...",
          message: "Successfully withdraw 100 USDC",
        },
        explanation: "Withdraw 100 USDC on Lulo",
      },
    ],
  ],
  schema: z.object({
    mintAddress: z.string().describe("SPL Mint address"),
    amount: z.number().positive().describe("Amount to lend"),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    try {
      const mintAddress = input.mintAddress as string;
      const amount = input.amount as number;

      const response = await luloWithdraw(agent, mintAddress, amount);

      return {
        status: "success",
        signature: response,
        message: `Successfully withdraw ${amount} of token ${mintAddress}`,
      };
    } catch (error: any) {
      return {
        status: "error",
        message: `Withdraw failed: ${error.message}`,
      };
    }
  },
};

export default luloWithdrawAction;


================================================
File: src/actions/metaplex/deployCollection.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { deploy_collection } from "../../tools/metaplex";

interface CollectionOptions {
  name: string;
  uri: string;
  royaltyBasisPoints?: number;
}

const deployCollectionAction: Action = {
  name: "DEPLOY_COLLECTION",
  similes: [
    "create collection",
    "launch collection",
    "deploy nft collection",
    "create nft collection",
    "mint collection",
  ],
  description: `Deploy a new NFT collection on Solana blockchain.`,
  examples: [
    [
      {
        input: {
          name: "My Collection",
          uri: "https://example.com/collection.json",
          royaltyBasisPoints: 500,
        },
        output: {
          status: "success",
          message: "Collection deployed successfully",
          collectionAddress: "7nE9GvcwsqzYxmJLSrYmSB1V1YoJWVK1KWzAcWAzjXkN",
          name: "My Collection",
        },
        explanation: "Deploy an NFT collection with 5% royalty",
      },
    ],
    [
      {
        input: {
          name: "Basic Collection",
          uri: "https://example.com/basic.json",
        },
        output: {
          status: "success",
          message: "Collection deployed successfully",
          collectionAddress: "8nE9GvcwsqzYxmJLSrYmSB1V1YoJWVK1KWzAcWAzjXkM",
          name: "Basic Collection",
        },
        explanation: "Deploy a basic NFT collection without royalties",
      },
    ],
  ],
  schema: z.object({
    name: z.string().min(1, "Name is required"),
    uri: z.string().url("URI must be a valid URL"),
    royaltyBasisPoints: z.number().min(0).max(10000).optional(),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    const options: CollectionOptions = {
      name: input.name,
      uri: input.uri,
      royaltyBasisPoints: input.royaltyBasisPoints,
    };

    const result = await deploy_collection(agent, options);

    return {
      status: "success",
      message: "Collection deployed successfully",
      collectionAddress: result.collectionAddress.toString(),
      name: input.name,
    };
  },
};

export default deployCollectionAction;


================================================
File: src/actions/metaplex/deployToken.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { deploy_token } from "../../tools";

const deployTokenAction: Action = {
  name: "DEPLOY_TOKEN",
  similes: [
    "create token",
    "launch token",
    "deploy new token",
    "create new token",
    "mint token",
  ],
  description:
    "Deploy a new SPL token on the Solana blockchain with specified parameters",
  examples: [
    [
      {
        input: {
          name: "My Token",
          uri: "https://example.com/token.json",
          symbol: "MTK",
          decimals: 9,
          initialSupply: 1000000,
        },
        output: {
          mint: "7nE9GvcwsqzYxmJLSrYmSB1V1YoJWVK1KWzAcWAzjXkN",
          status: "success",
          message: "Token deployed successfully",
        },
        explanation: "Deploy a token with initial supply and metadata",
      },
    ],
    [
      {
        input: {
          name: "Basic Token",
          uri: "https://example.com/basic.json",
          symbol: "BASIC",
        },
        output: {
          mint: "8nE9GvcwsqzYxmJLSrYmSB1V1YoJWVK1KWzAcWAzjXkM",
          status: "success",
          message: "Token deployed successfully",
        },
        explanation: "Deploy a basic token with minimal parameters",
      },
    ],
  ],
  schema: z.object({
    name: z.string().min(1, "Name is required"),
    uri: z.string().url("URI must be a valid URL"),
    symbol: z.string().min(1, "Symbol is required"),
    decimals: z.number().optional(),
    initialSupply: z.number().optional(),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    try {
      const result = await deploy_token(
        agent,
        input.name,
        input.uri,
        input.symbol,
        input.decimals,
        input.initialSupply,
      );

      return {
        mint: result.mint.toString(),
        status: "success",
        message: "Token deployed successfully",
      };
    } catch (error: any) {
      return {
        status: "error",
        message: `Token deployment failed: ${error.message}`,
      };
    }
  },
};

export default deployTokenAction;


================================================
File: src/actions/metaplex/getAsset.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { get_asset } from "../../tools/metaplex";

const getAssetAction: Action = {
  name: "GET_ASSET",
  similes: [
    "fetch asset",
    "retrieve asset",
    "get asset details",
    "fetch asset details",
  ],
  description: `Fetch asset details using the Metaplex DAS API.`,
  examples: [
    [
      {
        input: {
          assetId: "Asset ID",
        },
        output: {
          status: "success",
          message: "Asset retrieved successfully",
          result: {
            // Example asset details
            name: "Example Asset",
            symbol: "EXA",
            uri: "https://example.com/asset.json",
          },
        },
        explanation: "Fetch details of an asset using its ID",
      },
    ],
  ],
  schema: z.object({
    assetId: z.string().min(1, "Asset ID is required"),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    const assetId = input.assetId;

    const result = await get_asset(agent, assetId);

    return {
      status: "success",
      message: "Asset retrieved successfully",
      result,
    };
  },
};

export default getAssetAction;


================================================
File: src/actions/metaplex/getAssetsByAuthority.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { get_assets_by_authority } from "../../tools/metaplex";

const getAssetsByAuthorityAction: Action = {
  name: "GET_ASSETS_BY_AUTHORITY",
  similes: [
    "fetch assets by authority",
    "retrieve assets by authority",
    "get assets by authority address",
    "fetch authority assets",
  ],
  description: `Fetch a list of assets owned by a specific address using the Metaplex DAS API.`,
  examples: [
    [
      {
        input: {
          authority: "mRdta4rc2RtsxEUDYuvKLamMZAdW6qHcwuq866Skxxv",
          limit: 10,
        },
        output: {
          status: "success",
          message: "Assets retrieved successfully",
          result: {
            total: 2,
            limit: 10,
            items: [
              {
                interface: "V1_NFT",
                id: "ExampleAssetId1",
                content: {
                  json_uri: "https://example.com/asset1.json",
                  metadata: {
                    name: "Example Asset 1",
                    symbol: "EXA1",
                  },
                },
                authorities: [],
                compression: {},
                grouping: [],
                royalty: {},
                creators: [],
                ownership: {},
                supply: {},
                mutable: true,
                burnt: false,
              },
              {
                interface: "V1_NFT",
                id: "ExampleAssetId2",
                content: {
                  json_uri: "https://example.com/asset2.json",
                  metadata: {
                    name: "Example Asset 2",
                    symbol: "EXA2",
                  },
                },
                authorities: [],
                compression: {},
                grouping: [],
                royalty: {},
                creators: [],
                ownership: {},
                supply: {},
                mutable: true,
                burnt: false,
              },
            ],
          },
        },
        explanation: "Fetch a list of assets owned by a specific address",
      },
    ],
  ],
  schema: z.object({
    authority: z.string().min(1, "Authority address is required"),
    sortBy: z
      .object({
        sortBy: z.enum(["created", "updated", "recentAction", "none"]),
        sortDirection: z.enum(["asc", "desc"]),
      })
      .optional(),
    limit: z.number().optional(),
    page: z.number().optional(),
    before: z.string().optional(),
    after: z.string().optional(),
  }),
  handler: async (
    agent: SolanaAgentKit,
    input: z.infer<typeof getAssetsByAuthorityAction.schema>,
  ) => {
    const result = await get_assets_by_authority(agent, input);

    return {
      status: "success",
      message: "Assets retrieved successfully",
      result,
    };
  },
};

export default getAssetsByAuthorityAction;


================================================
File: src/actions/metaplex/getAssetsByCreator.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { get_assets_by_creator } from "../../tools/metaplex";

const getAssetsByCreatorAction: Action = {
  name: "GET_ASSETS_BY_CREATOR",
  similes: [
    "fetch assets by creator",
    "retrieve assets by creator",
    "get assets by creator address",
    "fetch creator assets",
  ],
  description: `Fetch a list of assets created by a specific address using the Metaplex DAS API.`,
  examples: [
    [
      {
        input: {
          creator: "D3XrkNZz6wx6cofot7Zohsf2KSsu2ArngNk8VqU9cTY3",
          onlyVerified: true,
          limit: 10,
        },
        output: {
          status: "success",
          message: "Assets retrieved successfully",
          result: {
            total: 2,
            limit: 10,
            items: [
              {
                interface: "V1_NFT",
                id: "ExampleAssetId1",
                content: {
                  json_uri: "https://example.com/asset1.json",
                  metadata: {
                    name: "Example Asset 1",
                    symbol: "EXA1",
                  },
                },
                authorities: [],
                compression: {},
                grouping: [],
                royalty: {},
                creators: [],
                ownership: {},
                supply: {},
                mutable: true,
                burnt: false,
              },
              {
                interface: "V1_NFT",
                id: "ExampleAssetId2",
                content: {
                  json_uri: "https://example.com/asset2.json",
                  metadata: {
                    name: "Example Asset 2",
                    symbol: "EXA2",
                  },
                },
                authorities: [],
                compression: {},
                grouping: [],
                royalty: {},
                creators: [],
                ownership: {},
                supply: {},
                mutable: true,
                burnt: false,
              },
            ],
          },
        },
        explanation: "Fetch a list of assets created by a specific address",
      },
    ],
  ],
  schema: z.object({
    creator: z.string().min(1, "Creator address is required"),
    onlyVerified: z.boolean(),
    sortBy: z
      .object({
        sortBy: z.enum(["created", "updated", "recentAction", "none"]),
        sortDirection: z.enum(["asc", "desc"]),
      })
      .optional(),
    limit: z.number().optional(),
    page: z.number().optional(),
    before: z.string().optional(),
    after: z.string().optional(),
  }),
  handler: async (
    agent: SolanaAgentKit,
    input: z.infer<typeof getAssetsByCreatorAction.schema>,
  ) => {
    const result = await get_assets_by_creator(agent, input);

    return {
      status: "success",
      message: "Assets retrieved successfully",
      result,
    };
  },
};

export default getAssetsByCreatorAction;


================================================
File: src/actions/metaplex/mintNFT.ts
================================================
import { PublicKey } from "@solana/web3.js";
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { mintCollectionNFT } from "../../tools/metaplex";

const mintNFTAction: Action = {
  name: "MINT_NFT",
  similes: [
    "mint nft",
    "create nft",
    "mint token",
    "create token",
    "add nft to collection",
  ],
  description: "Mint a new NFT in a collection on Solana blockchain.",
  examples: [
    [
      {
        input: {
          collectionMint: "J1S9H3QjnRtBbbuD4HjPV6RpRhwuk4zKbxsnCHuTgh9w",
          name: "My NFT",
          uri: "https://example.com/nft.json",
        },
        output: {
          status: "success",
          message: "NFT minted successfully",
          mintAddress: "7nE9GvcwsqzYxmJLSrYmSB1V1YoJWVK1KWzAcWAzjXkN",
          metadata: {
            name: "My NFT",
            uri: "https://example.com/nft.json",
          },
          recipient: "7nE9GvcwsqzYxmJLSrYmSB1V1YoJWVK1KWzAcWAzjXkN",
        },
        explanation: "Mint an NFT to the default wallet",
      },
    ],
    [
      {
        input: {
          collectionMint: "J1S9H3QjnRtBbbuD4HjPV6RpRhwuk4zKbxsnCHuTgh9w",
          name: "Gift NFT",
          uri: "https://example.com/gift.json",
          recipient: "9aUn5swQzUTRanaaTwmszxiv89cvFwUCjEBv1vZCoT1u",
        },
        output: {
          status: "success",
          message: "NFT minted successfully",
          mintAddress: "8nE9GvcwsqzYxmJLSrYmSB1V1YoJWVK1KWzAcWAzjXkM",
          metadata: {
            name: "Gift NFT",
            uri: "https://example.com/gift.json",
          },
          recipient: "9aUn5swQzUTRanaaTwmszxiv89cvFwUCjEBv1vZCoT1u",
        },
        explanation: "Mint an NFT to a specific recipient",
      },
    ],
  ],
  schema: z.object({
    collectionMint: z.string().min(32, "Invalid collection mint address"),
    name: z.string().min(1, "Name is required"),
    uri: z.string().url("URI must be a valid URL"),
    recipient: z.string().min(32, "Invalid recipient address"),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    const result = await mintCollectionNFT(
      agent,
      new PublicKey(input.collectionMint),
      {
        name: input.name,
        uri: input.uri,
      },
      input.recipient ? new PublicKey(input.recipient) : undefined,
    );

    return {
      status: "success",
      message: "NFT minted successfully",
      mintAddress: result.mint.toString(),
      metadata: {
        name: input.name,
        uri: input.uri,
      },
      recipient: input.recipient || result.mint.toString(),
    };
  },
};

export default mintNFTAction;


================================================
File: src/actions/openbook/createOpenbookMarket.ts
================================================
import { PublicKey } from "@solana/web3.js";
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { openbookCreateMarket } from "../../tools/openbook";

const createOpenbookMarketAction: Action = {
  name: "CREATE_OPENBOOK_MARKET",
  similes: [
    "create openbook market",
    "setup trading market",
    "new openbook market",
    "create trading pair",
    "setup dex market",
    "new trading market",
  ],
  description: "Create a new trading market on Openbook DEX",
  examples: [
    [
      {
        input: {
          baseMint: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v", // USDC
          quoteMint: "So11111111111111111111111111111111111111112", // SOL
          lotSize: 1,
          tickSize: 0.01,
        },
        output: {
          status: "success",
          signatures: ["2ZE7Rz...", "3YKpM1..."],
          message: "Successfully created Openbook market",
        },
        explanation:
          "Create a new USDC/SOL market on Openbook with default lot and tick sizes",
      },
    ],
  ],
  schema: z.object({
    baseMint: z.string().min(1).describe("The base token's mint address"),
    quoteMint: z.string().min(1).describe("The quote token's mint address"),
    lotSize: z
      .number()
      .positive()
      .default(1)
      .describe("The minimum order size (lot size)"),
    tickSize: z
      .number()
      .positive()
      .default(0.01)
      .describe("The minimum price increment (tick size)"),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    try {
      const baseMint = new PublicKey(input.baseMint);
      const quoteMint = new PublicKey(input.quoteMint);
      const lotSize = input.lotSize || 1;
      const tickSize = input.tickSize || 0.01;

      const signatures = await openbookCreateMarket(
        agent,
        baseMint,
        quoteMint,
        lotSize,
        tickSize,
      );

      return {
        status: "success",
        signatures,
        message: "Successfully created Openbook market",
      };
    } catch (error: any) {
      return {
        status: "error",
        message: `Failed to create Openbook market: ${error.message}`,
      };
    }
  },
};

export default createOpenbookMarketAction;


================================================
File: src/actions/orca/createOrcaSingleSidedWhirlpool.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { PublicKey } from "@solana/web3.js";
import { Decimal } from "decimal.js";
import { orcaCreateSingleSidedLiquidityPool } from "../../tools";

// Fee tiers mapping from the original tool
const FEE_TIERS = {
  0.01: 1,
  0.02: 2,
  0.04: 4,
  0.05: 8,
  0.16: 16,
  0.3: 64,
  0.65: 96,
  1.0: 128,
  2.0: 256,
} as const;

const createOrcaSingleSidedWhirlpoolAction: Action = {
  name: "CREATE_ORCA_SINGLE_SIDED_WHIRLPOOL",
  similes: [
    "create orca whirlpool",
    "setup orca single sided pool",
    "initialize orca whirlpool",
    "create orca concentrated pool",
    "setup orca concentrated liquidity",
    "create orca trading pair",
  ],
  description:
    "Create a new single-sided whirlpool on Orca with concentrated liquidity",
  examples: [
    [
      {
        input: {
          depositTokenAmount: "1000000000000", // 1 million tokens with 6 decimals
          depositTokenMint: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v", // USDC
          otherTokenMint: "So11111111111111111111111111111111111111112", // SOL
          initialPrice: "0.001",
          maxPrice: "5.0",
          feeTier: 0.3,
        },
        output: {
          status: "success",
          signature: "2ZE7Rz...",
          message: "Successfully created Orca single-sided whirlpool",
        },
        explanation:
          "Create a USDC/SOL whirlpool with 1M USDC initial liquidity",
      },
    ],
  ],
  schema: z.object({
    depositTokenAmount: z
      .string()
      .min(1)
      .describe(
        "The amount of deposit token to provide as liquidity (including decimals)",
      ),
    depositTokenMint: z
      .string()
      .min(1)
      .describe("The mint address of the token being deposited"),
    otherTokenMint: z
      .string()
      .min(1)
      .describe("The mint address of the other token in the pool"),
    initialPrice: z
      .string()
      .min(1)
      .describe("Initial price of deposit token in terms of the other token"),
    maxPrice: z
      .string()
      .min(1)
      .describe("Maximum price at which liquidity is added"),
    feeTier: z
      .number()
      .refine((val) => val in FEE_TIERS, "Invalid fee tier")
      .describe("Fee tier percentage for the pool (e.g., 0.3 for 0.3%)"),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    try {
      const depositTokenAmount = Number(input.depositTokenAmount);
      const depositTokenMint = new PublicKey(input.depositTokenMint);
      const otherTokenMint = new PublicKey(input.otherTokenMint);
      const initialPrice = new Decimal(input.initialPrice);
      const maxPrice = new Decimal(input.maxPrice);
      const feeTier = input.feeTier;

      // Create the whirlpool
      const signature = await orcaCreateSingleSidedLiquidityPool(
        agent,
        depositTokenAmount,
        depositTokenMint,
        otherTokenMint,
        initialPrice,
        maxPrice,
        feeTier,
      );

      return {
        status: "success",
        signature,
        message: "Successfully created Orca single-sided whirlpool",
      };
    } catch (error: any) {
      return {
        status: "error",
        message: `Failed to create whirlpool: ${error.message}`,
      };
    }
  },
};

export default createOrcaSingleSidedWhirlpoolAction;


================================================
File: src/actions/pumpfun/launchPumpfunToken.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { launchPumpFunToken } from "../../tools";

const launchPumpfunTokenAction: Action = {
  name: "LAUNCH_PUMPFUN_TOKEN",
  similes: [
    "create pumpfun token",
    "launch token on pumpfun",
    "deploy pumpfun token",
    "create meme token",
    "launch memecoin",
    "create pump token",
  ],
  description:
    "Launch a new token on Pump.fun with customizable metadata and initial liquidity",
  examples: [
    [
      {
        input: {
          tokenName: "Sample Token",
          tokenTicker: "SMPL",
          description: "A sample token for demonstration",
          imageUrl: "https://example.com/token.png",
          twitter: "@sampletoken",
          telegram: "t.me/sampletoken",
          website: "https://sampletoken.com",
          initialLiquiditySOL: 0.1,
          slippageBps: 10,
          priorityFee: 0.0001,
        },
        output: {
          status: "success",
          signature: "2ZE7Rz...",
          mint: "7nxQB...",
          metadataUri: "https://arweave.net/...",
          message: "Successfully launched token on Pump.fun",
        },
        explanation:
          "Launch a new token with custom metadata and 0.1 SOL initial liquidity",
      },
    ],
  ],
  schema: z.object({
    tokenName: z.string().min(1).max(32).describe("Name of the token"),
    tokenTicker: z
      .string()
      .min(2)
      .max(10)
      .describe("Ticker symbol of the token"),
    description: z
      .string()
      .min(1)
      .max(1000)
      .describe("Description of the token"),
    imageUrl: z.string().url().describe("URL of the token image"),
    twitter: z.string().optional().describe("Twitter handle (optional)"),
    telegram: z.string().optional().describe("Telegram group link (optional)"),
    website: z.string().url().optional().describe("Website URL (optional)"),
    initialLiquiditySOL: z
      .number()
      .min(0.0001)
      .default(0.0001)
      .describe("Initial liquidity in SOL"),
    slippageBps: z
      .number()
      .min(1)
      .max(1000)
      .default(5)
      .describe("Slippage tolerance in basis points"),
    priorityFee: z
      .number()
      .min(0.00001)
      .default(0.00005)
      .describe("Priority fee in SOL"),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    try {
      const { tokenName, tokenTicker, description, imageUrl } = input;
      const result = await launchPumpFunToken(
        agent,
        tokenName,
        tokenTicker,
        description,
        imageUrl,
        input,
      );

      return {
        status: "success",
        signature: result.signature,
        mint: result.mint,
        metadataUri: result.metadataUri,
        message: "Successfully launched token on Pump.fun",
      };
    } catch (error: any) {
      return {
        status: "error",
        message: `Failed to launch token: ${error.message}`,
      };
    }
  },
};

export default launchPumpfunTokenAction;


================================================
File: src/actions/pyth/pythFetchPrice.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { fetchPythPrice, fetchPythPriceFeedID } from "../../tools";

const pythFetchPriceAction: Action = {
  name: "PYTH_FETCH_PRICE",
  similes: [
    "get pyth price",
    "check pyth price",
    "pyth oracle price",
    "fetch from pyth",
    "pyth price feed",
    "oracle price",
  ],
  description: "Fetch the current price from a Pyth oracle price feed",
  examples: [
    [
      {
        input: {
          tokenSymbol: "SOL", // SOL/USD price feed
        },
        output: {
          status: "success",
          price: "23.45",
          message: "Current price: $23.45",
        },
        explanation: "Get the current SOL/USD price from Pyth oracle",
      },
    ],
  ],
  schema: z.object({
    tokenSymbol: z
      .string()
      .min(1)
      .describe("The token symbol to fetch the price for"),
  }),
  handler: async (_agent: SolanaAgentKit, input: Record<string, any>) => {
    try {
      const priceFeedId = await fetchPythPriceFeedID(
        input.tokenSymbol as string,
      );

      const priceStr = await fetchPythPrice(priceFeedId);

      return {
        status: "success",
        price: priceStr,
        message: `Current price: $${priceStr}`,
      };
    } catch (error: any) {
      return {
        status: "error",
        message: `Failed to fetch price from Pyth: ${error.message}`,
      };
    }
  },
};

export default pythFetchPriceAction;


================================================
File: src/actions/raydium/raydiumCreateAmmV4.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { PublicKey } from "@solana/web3.js";
import BN from "bn.js";
import { raydiumCreateAmmV4 } from "../../tools";

const raydiumCreateAmmV4Action: Action = {
  name: "RAYDIUM_CREATE_AMM_V4",
  similes: [
    "create raydium v4 pool",
    "setup raydium v4 liquidity pool",
    "initialize raydium v4 amm",
    "create raydium v4 market maker",
    "setup raydium v4 pool",
    "create raydium v4 trading pair",
  ],
  description:
    "Create a new AMM V4 pool on Raydium with advanced features and improved efficiency",
  examples: [
    [
      {
        input: {
          baseMint: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v", // USDC
          quoteMint: "So11111111111111111111111111111111111111112", // SOL
          baseAmount: 1000,
          quoteAmount: 10,
          startPrice: 100, // 1 SOL = 100 USDC
          openTime: 1672531200, // Unix timestamp
        },
        output: {
          status: "success",
          signature: "2ZE7Rz...",
          poolId: "7nxQB...",
          message: "Successfully created Raydium AMM V4 pool",
        },
        explanation:
          "Create a USDC-SOL V4 pool with initial liquidity and price",
      },
    ],
  ],
  schema: z.object({
    baseMint: z.string().min(1).describe("The base token mint address"),
    quoteMint: z.string().min(1).describe("The quote token mint address"),
    baseAmount: z
      .number()
      .positive()
      .describe("Initial base token amount to provide as liquidity"),
    quoteAmount: z
      .number()
      .positive()
      .describe("Initial quote token amount to provide as liquidity"),
    startPrice: z
      .number()
      .positive()
      .describe("Initial price of quote token in base token units"),
    openTime: z
      .number()
      .positive()
      .describe("Unix timestamp when trading should start"),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    try {
      const marketId = new PublicKey(input.marketId);
      const baseAmount = new BN(input.baseAmount);
      const quoteAmount = new BN(input.quoteAmount);
      const startTime = new BN(input.startTime);

      const txId = await raydiumCreateAmmV4(
        agent,
        marketId,
        baseAmount,
        quoteAmount,
        startTime,
      );

      return {
        status: "success",
        signature: txId,
        message: "Successfully created Raydium AMM V4 pool",
      };
    } catch (error: any) {
      return {
        status: "error",
        message: `Failed to create AMM V4 pool: ${error.message}`,
      };
    }
  },
};

export default raydiumCreateAmmV4Action;


================================================
File: src/actions/raydium/raydiumCreateClmm.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { PublicKey } from "@solana/web3.js";
import { BN } from "@coral-xyz/anchor";
import Decimal from "decimal.js";
import { raydiumCreateClmm } from "../../tools";

const raydiumCreateClmmAction: Action = {
  name: "RAYDIUM_CREATE_CLMM",
  similes: [
    "create clmm pool",
    "create concentrated liquidity pool",
    "raydium clmm setup",
    "launch concentrated liquidity market maker",
  ],
  description: `Create a Raydium Concentrated Liquidity Market Maker (CLMM) pool with custom ranges, providing increased capital efficiency`,
  examples: [
    [
      {
        input: {
          mint1: "9xU1vzz456... (PublicKey)",
          mint2: "EfrsBcG98... (PublicKey)",
          configId: "D6yTTr... (Config PublicKey)",
          initialPrice: 123.12,
          startTime: 0, // or current UNIX timestamp
        },
        output: {
          status: "success",
          message: "Create raydium clmm pool successfully",
          transaction: "3skCN8... (transaction signature)",
        },
        explanation:
          "Creates a CLMM pool between mint1 and mint2 at an initial price of 123.12 and start time of 0.",
      },
    ],
  ],
  // Validate tool inputs using zod
  schema: z.object({
    mint1: z.string().min(1).describe("First token mint address (public key)"),
    mint2: z.string().min(1).describe("Second token mint address (public key)"),
    configId: z.string().min(1).describe("Raydium configId (public key)"),
    initialPrice: z.number().describe("Initial price for the CLMM pool"),
    startTime: z
      .number()
      .describe("Start time in seconds (UNIX timestamp or zero)"),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    try {
      const { mint1, mint2, configId, initialPrice, startTime } = input;

      const tx = await raydiumCreateClmm(
        agent,
        new PublicKey(mint1),
        new PublicKey(mint2),
        new PublicKey(configId),
        new Decimal(initialPrice),
        new BN(startTime),
      );

      return {
        status: "success",
        message: "Create raydium clmm pool successfully",
        transaction: tx,
      };
    } catch (error: any) {
      return {
        status: "error",
        message: `Failed to create CLMM pool: ${error.message}`,
        code: error.code || "UNKNOWN_ERROR",
      };
    }
  },
};

export default raydiumCreateClmmAction;


================================================
File: src/actions/raydium/raydiumCreateCpmm.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { PublicKey } from "@solana/web3.js";
import BN from "bn.js";
import { raydiumCreateCpmm } from "../../tools";

const raydiumCreateCpmmAction: Action = {
  name: "RAYDIUM_CREATE_CPMM",
  similes: [
    "create raydium pool",
    "setup raydium liquidity pool",
    "initialize raydium amm",
    "create constant product market maker",
    "setup raydium cpmm",
    "create raydium trading pair",
  ],
  description:
    "Create a new Constant Product Market Maker (CPMM) pool on Raydium",
  examples: [
    [
      {
        input: {
          baseMint: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v", // USDC
          quoteMint: "So11111111111111111111111111111111111111112", // SOL
          baseAmount: 1000,
          quoteAmount: 10,
          startTime: 1672531200, // Unix timestamp
        },
        output: {
          status: "success",
          signature: "2ZE7Rz...",
          poolId: "7nxQB...",
          message: "Successfully created Raydium CPMM pool",
        },
        explanation:
          "Create a USDC-SOL pool with initial liquidity of 1000 USDC and 10 SOL",
      },
    ],
  ],
  schema: z.object({
    baseMint: z.string().min(1).describe("The base token mint address"),
    quoteMint: z.string().min(1).describe("The quote token mint address"),
    baseAmount: z
      .number()
      .positive()
      .describe("Initial base token amount to provide as liquidity"),
    quoteAmount: z
      .number()
      .positive()
      .describe("Initial quote token amount to provide as liquidity"),
    startTime: z
      .number()
      .positive()
      .describe("Unix timestamp when trading should start"),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    try {
      const mintA = new PublicKey(input.baseMint);
      const mintB = new PublicKey(input.quoteMint);
      const configId = new PublicKey(input.configId);
      const mintAAmount = new BN(input.baseAmount);
      const mintBAmount = new BN(input.quoteAmount);
      const startTime = new BN(input.startTime);

      const txId = await raydiumCreateCpmm(
        agent,
        mintA,
        mintB,
        configId,
        mintAAmount,
        mintBAmount,
        startTime,
      );

      return {
        status: "success",
        signature: txId,
        message: "Successfully created Raydium CPMM pool",
      };
    } catch (error: any) {
      return {
        status: "error",
        message: `Failed to create CPMM pool: ${error.message}`,
      };
    }
  },
};

export default raydiumCreateCpmmAction;


================================================
File: src/actions/sns/getAllRegisteredAllDomains.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { getAllRegisteredAllDomains } from "../../tools";

const getAllRegisteredAllDomainsAction: Action = {
  name: "GET_ALL_REGISTERED_ALL_DOMAINS",
  similes: [
    "list registered domains",
    "get all domains",
    "fetch registered domains",
    "get domain list",
    "list active domains",
    "get registered names",
  ],
  description: "Get a list of all registered domains across all TLDs",
  examples: [
    [
      {
        input: {
          limit: 100,
          offset: 0,
        },
        output: {
          status: "success",
          domains: ["solana.sol", "bonk.abc", "wallet.backpack"],
          total: 3,
          message: "Successfully retrieved registered domains",
        },
        explanation: "Get the first 100 registered domains across all TLDs",
      },
    ],
  ],
  schema: z.object({
    limit: z
      .number()
      .positive()
      .max(1000)
      .default(100)
      .describe("Maximum number of domains to return"),
    offset: z
      .number()
      .nonnegative()
      .default(0)
      .describe("Number of domains to skip"),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    try {
      const limit = input.limit || 100;
      const offset = input.offset || 0;

      // Get all registered domains
      const domains = await getAllRegisteredAllDomains(agent);

      return {
        status: "success",
        domains: domains.slice(offset, offset + limit),
        total: domains.length,
        message: "Successfully retrieved registered domains",
      };
    } catch (error: any) {
      return {
        status: "error",
        message: `Failed to get registered domains: ${error.message}`,
      };
    }
  },
};

export default getAllRegisteredAllDomainsAction;


================================================
File: src/actions/sns/getMainAllDomainsDomain.ts
================================================
import { PublicKey } from "@solana/web3.js";
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { getMainAllDomainsDomain } from "../../tools";

const getMainAllDomainsDomainAction: Action = {
  name: "GET_MAIN_ALL_DOMAINS_DOMAIN",
  similes: [
    "get main domain",
    "fetch primary domain",
    "get default domain",
    "get main address name",
    "get primary name",
    "get main domain name",
  ],
  description: "Get the main domain associated with a wallet address",
  examples: [
    [
      {
        input: {
          address: "7nxQB...",
        },
        output: {
          status: "success",
          domain: "solana.sol",
          message: "Successfully retrieved main domain",
        },
        explanation: "Get the main domain name for a given wallet address",
      },
    ],
  ],
  schema: z.object({
    address: z
      .string()
      .min(1)
      .describe("The wallet address to get the main domain for"),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    try {
      const mainDomain = await getMainAllDomainsDomain(
        agent,
        new PublicKey(input.address),
      );

      if (!mainDomain) {
        return {
          status: "error",
          message: "No main domain found for this address",
        };
      }

      return {
        status: "success",
        domain: mainDomain,
        message: "Successfully retrieved main domain",
      };
    } catch (error: any) {
      return {
        status: "error",
        message: `Failed to get main domain: ${error.message}`,
      };
    }
  },
};

export default getMainAllDomainsDomainAction;


================================================
File: src/actions/sns/getPrimaryDomain.ts
================================================
import { PublicKey } from "@solana/web3.js";
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { getPrimaryDomain } from "../../tools";

const getPrimaryDomainAction: Action = {
  name: "GET_PRIMARY_DOMAIN",
  similes: [
    "get primary domain",
    "lookup primary domain",
    "check primary domain",
    "find primary domain",
    "get main domain",
    "primary sol domain",
  ],
  description:
    "Get the primary .sol domain associated with a Solana wallet address",
  examples: [
    [
      {
        input: {
          account: "7nxQB...",
        },
        output: {
          status: "success",
          domain: "vitalik.sol",
          message: "Primary domain: vitalik.sol",
        },
        explanation: "Get the primary .sol domain for a wallet address",
      },
    ],
  ],
  schema: z.object({
    account: z.string().min(1).describe("The Solana wallet address to lookup"),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    try {
      const account = new PublicKey(input.account);

      const response = await getPrimaryDomain(agent, account);

      return {
        status: "success",
        domain: response,
        message: `Primary domain: ${response}`,
      };
    } catch (error: any) {
      return {
        status: "error",
        message: `Failed to get primary domain: ${error.message}`,
      };
    }
  },
};

export default getPrimaryDomainAction;


================================================
File: src/actions/sns/registerDomain.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { registerDomain } from "../../tools";

const registerDomainAction: Action = {
  name: "REGISTER_DOMAIN",
  similes: [
    "register domain",
    "buy domain",
    "get domain name",
    "register .sol",
    "purchase domain",
    "domain registration",
  ],
  description: "Register a .sol domain name using Bonfida Name Service",
  examples: [
    [
      {
        input: {
          name: "mydomain",
          spaceKB: 1,
        },
        output: {
          status: "success",
          signature: "2ZE7Rz...",
          message: "Successfully registered mydomain.sol",
        },
        explanation: "Register a new .sol domain with 1KB storage space",
      },
    ],
  ],
  schema: z.object({
    name: z.string().min(1).describe("Domain name to register (without .sol)"),
    spaceKB: z
      .number()
      .min(1)
      .max(10)
      .default(1)
      .describe("Space allocation in KB (max 10KB)"),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    try {
      const name = input.name as string;
      const spaceKB = (input.spaceKB as number) || 1;

      const signature = await registerDomain(agent, name, spaceKB);

      return {
        status: "success",
        signature,
        message: `Successfully registered ${name}.sol`,
      };
    } catch (error: any) {
      return {
        status: "error",
        message: `Domain registration failed: ${error.message}`,
      };
    }
  },
};

export default registerDomainAction;


================================================
File: src/actions/sns/resolveSolDomain.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { resolveSolDomain } from "../../tools/";

const resolveSolDomainAction: Action = {
  name: "RESOLVE_SOL_DOMAIN",
  similes: [
    "resolve sol domain",
    "lookup sol domain",
    "get sol domain owner",
    "check sol domain",
    "find sol domain owner",
    "resolve .sol",
  ],
  description:
    "Resolve a .sol domain to its corresponding Solana wallet address using Bonfida Name Service",
  examples: [
    [
      {
        input: {
          domain: "vitalik.sol",
        },
        output: {
          status: "success",
          owner: "7nxQB...",
          message: "Successfully resolved vitalik.sol",
        },
        explanation: "Resolve a .sol domain to get the owner's wallet address",
      },
    ],
  ],
  schema: z.object({
    domain: z
      .string()
      .min(1)
      .describe("The .sol domain to resolve (with or without .sol suffix)"),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    try {
      const domain = input.domain as string;

      const res = await resolveSolDomain(agent, domain);

      return {
        status: "success",
        owner: res.toString(),
        message: `Successfully resolved ${res}`,
      };
    } catch (error: any) {
      return {
        status: "error",
        message: `Failed to resolve domain: ${error.message}`,
      };
    }
  },
};

export default resolveSolDomainAction;


================================================
File: src/actions/solana/balance.ts
================================================
import { PublicKey } from "@solana/web3.js";
import type { Action } from "../../types/action";
import type { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { get_balance } from "../../tools";

const balanceAction: Action = {
  name: "BALANCE_ACTION",
  similes: [
    "check balance",
    "get wallet balance",
    "view balance",
    "show balance",
    "check token balance",
  ],
  description: `Get the balance of a Solana wallet or token account.
  If you want to get the balance of your wallet, you don't need to provide the tokenAddress.
  If no tokenAddress is provided, the balance will be in SOL.`,
  examples: [
    [
      {
        input: {},
        output: {
          status: "success",
          balance: "100",
          token: "SOL",
        },
        explanation: "Get SOL balance of the wallet",
      },
    ],
    [
      {
        input: {
          tokenAddress: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",
        },
        output: {
          status: "success",
          balance: "1000",
          token: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",
        },
        explanation: "Get USDC token balance",
      },
    ],
  ],
  schema: z.object({
    tokenAddress: z.string().optional(),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    const balance = await get_balance(
      agent,
      input.tokenAddress && new PublicKey(input.tokenAddress),
    );

    return {
      status: "success",
      balance: balance,
      token: input.tokenAddress || "SOL",
    };
  },
};

export default balanceAction;


================================================
File: src/actions/solana/closeEmptyTokenAccounts.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { closeEmptyTokenAccounts } from "../../tools";

const closeEmptyTokenAccountsAction: Action = {
  name: "CLOSE_EMPTY_TOKEN_ACCOUNTS",
  similes: [
    "close token accounts",
    "remove empty accounts",
    "clean up token accounts",
    "close SPL token accounts",
    "clean wallet",
  ],
  description: `Close empty SPL Token accounts associated with your wallet to reclaim rent. 
 This action will close both regular SPL Token accounts and Token-2022 accounts that have zero balance. `,
  examples: [
    [
      {
        input: {},
        output: {
          status: "success",
          signature:
            "3KmPyiZvJQk8CfBVVaz8nf3c2crb6iqjQVDqNxknnusyb1FTFpXqD8zVSCBAd1X3rUcD8WiG1bdSjFbeHsmcYGXY",
          accountsClosed: 10,
        },
        explanation: "Closed 10 empty token accounts successfully.",
      },
    ],
    [
      {
        input: {},
        output: {
          status: "success",
          signature: "",
          accountsClosed: 0,
        },
        explanation: "No empty token accounts were found to close.",
      },
    ],
  ],
  schema: z.object({}),
  handler: async (agent: SolanaAgentKit) => {
    try {
      const result = await closeEmptyTokenAccounts(agent);

      if (result.size === 0) {
        return {
          status: "success",
          signature: "",
          accountsClosed: 0,
          message: "No empty token accounts found to close",
        };
      }

      return {
        status: "success",
        signature: result.signature,
        accountsClosed: result.size,
        message: `Successfully closed ${result.size} empty token accounts`,
      };
    } catch (error: any) {
      return {
        status: "error",
        message: `Failed to close empty token accounts: ${error.message}`,
      };
    }
  },
};

export default closeEmptyTokenAccountsAction;


================================================
File: src/actions/solana/getTPS.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { getTPS } from "../../tools/solana";

const getTPSAction: Action = {
  name: "GET_TPS",
  similes: [
    "get transactions per second",
    "check network speed",
    "network performance",
    "transaction throughput",
    "network tps",
  ],
  description:
    "Get the current transactions per second (TPS) of the Solana network",
  examples: [
    [
      {
        input: {},
        output: {
          status: "success",
          tps: 3500,
          message: "Current network TPS: 3500",
        },
        explanation: "Get the current TPS of the Solana network",
      },
    ],
  ],
  schema: z.object({}), // No input parameters required
  handler: async (agent: SolanaAgentKit, _input: Record<string, any>) => {
    try {
      const response = await getTPS(agent);
      return {
        status: "success",
        response,
        message: `Current network TPS: ${response}`,
      };
    } catch (error: any) {
      return {
        status: "error",
        message: `Failed to get TPS: ${error.message}`,
      };
    }
  },
};

export default getTPSAction;


================================================
File: src/actions/solana/requestFunds.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { request_faucet_funds } from "../../tools/solana";

const requestFundsAction: Action = {
  name: "REQUEST_FUNDS",
  similes: [
    "request sol",
    "get test sol",
    "use faucet",
    "request test tokens",
    "get devnet sol",
  ],
  description: "Request SOL from Solana faucet (devnet/testnet only)",
  examples: [
    [
      {
        input: {},
        output: {
          status: "success",
          message: "Successfully requested faucet funds",
          network: "devnet.solana.com",
        },
        explanation: "Request SOL from the devnet faucet",
      },
    ],
  ],
  schema: z.object({}), // No input parameters required
  handler: async (agent: SolanaAgentKit, _input: Record<string, any>) => {
    await request_faucet_funds(agent);

    return {
      status: "success",
      message: "Successfully requested faucet funds",
      network: agent.connection.rpcEndpoint.split("/")[2],
    };
  },
};

export default requestFundsAction;


================================================
File: src/actions/solana/transfer.ts
================================================
import { PublicKey } from "@solana/web3.js";
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { transfer } from "../../tools";

const transferAction: Action = {
  name: "TRANSFER",
  similes: [
    "send tokens",
    "transfer funds",
    "send money",
    "send sol",
    "transfer tokens",
  ],
  description: `Transfer tokens or SOL to another address (also called as wallet address).`,
  examples: [
    [
      {
        input: {
          to: "8x2dR8Mpzuz2YqyZyZjUbYWKSWesBo5jMx2Q9Y86udVk",
          amount: 1,
        },
        output: {
          status: "success",
          message: "Transfer completed successfully",
          amount: 1,
          recipient: "8x2dR8Mpzuz2YqyZyZjUbYWKSWesBo5jMx2Q9Y86udVk",
          token: "SOL",
          transaction:
            "5UfgJ5vVZxUxefDGqzqkVLHzHxVTyYH9StYyHKgvHYmXJgqJKxEqy9k4Rz9LpXrHF9kUZB7",
        },
        explanation: "Transfer 1 SOL to the recipient address",
      },
    ],
    [
      {
        input: {
          to: "8x2dR8Mpzuz2YqyZyZjUbYWKSWesBo5jMx2Q9Y86udVk",
          amount: 100,
          mint: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",
        },
        output: {
          status: "success",
          message: "Transfer completed successfully",
          amount: 100,
          recipient: "8x2dR8Mpzuz2YqyZyZjUbYWKSWesBo5jMx2Q9Y86udVk",
          token: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",
          transaction:
            "4VfgJ5vVZxUxefDGqzqkVLHzHxVTyYH9StYyHKgvHYmXJgqJKxEqy9k4Rz9LpXrHF9kUZB7",
        },
        explanation: "Transfer 100 USDC tokens to the recipient address",
      },
    ],
  ],
  schema: z.object({
    to: z.string().min(32, "Invalid Solana address"),
    amount: z.number().positive("Amount must be positive"),
    mint: z.string().optional(),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    const recipient = new PublicKey(input.to);
    const mintAddress = input.mint ? new PublicKey(input.mint) : undefined;

    const tx = await transfer(agent, recipient, input.amount, mintAddress);

    return {
      status: "success",
      message: "Transfer completed successfully",
      amount: input.amount,
      recipient: input.to,
      token: input.mint || "SOL",
      transaction: tx,
    };
  },
};

export default transferAction;


================================================
File: src/actions/solayer/stakeWithSolayer.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { stakeWithSolayer } from "../../tools";

const stakeWithSolayerAction: Action = {
  name: "STAKE_WITH_SOLAYER",
  similes: [
    "stake sol",
    "solayer sol",
    "ssol",
    "stake with solayer",
    "solayer restaking",
    "solayer staking",
    "stake with sol",
    "liquid staking solayer",
    "get solayer sol",
    "solayer sol restaking",
    "solayer sol staking",
  ],
  description:
    "Stake native SOL with Solayer's restaking protocol to receive Solayer SOL (sSOL)",
  examples: [
    [
      {
        input: {
          amount: 1.0,
        },
        output: {
          status: "success",
          signature: "3FgHn9...",
          message: "Successfully staked 1.0 SOL for Solayer SOL (sSOL)",
        },
        explanation: "Stake 1.0 SOL to receive Solayer SOL (sSOL)",
      },
    ],
  ],
  schema: z.object({
    amount: z.number().positive().describe("Amount of SOL to stake"),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    try {
      const amount = input.amount as number;

      const res = await stakeWithSolayer(agent, amount);
      return {
        status: "success",
        res,
        message: `Successfully staked ${amount} SOL for Solayer SOL (sSOL)`,
      };
    } catch (error: any) {
      return {
        status: "error",
        message: `Solayer staking failed: ${error.message}`,
      };
    }
  },
};

export default stakeWithSolayerAction;


================================================
File: src/actions/squads/approveMultisigProposal.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { multisig_approve_proposal } from "../../tools";

const approveMultisigProposalAction: Action = {
  name: "APPROVE_MULTISIG_PROPOSAL_ACTION",
  similes: [
    "approve proposal",
    "approve proposal to transfer funds",
    "approve proposal to transfer funds from 2-of-2 multisig",
    "approve proposal to transfer funds from 2-of-2 multisig account",
    "approve proposal to transfer funds from 2-of-2 multisig account on Solana",
  ],
  description: `Approve a proposal to transfer funds from a 2-of-2 multisig account on Solana with the user and the agent, where both approvals will be required to run the transactions.
  
  Note: For one AI agent, only one 2-by-2 multisig can be created as it is pair-wise.`,
  examples: [
    [
      {
        input: {
          transactionIndex: 0,
        },
        output: {
          status: "success",
          message: "Proposal approved successfully",
          transaction: "4xKpN2...",
          transactionIndex: "0",
        },
        explanation:
          "Approve a proposal to transfer 1 SOL from 2-of-2 multisig account on Solana",
      },
    ],
  ],
  schema: z.object({
    transactionIndex: z.number().optional(),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    const tx = await multisig_approve_proposal(agent, input.transactionIndex);

    return {
      status: "success",
      message: "Proposal approved successfully",
      transaction: tx,
      transactionIndex: input.transactionIndex.toString(),
    };
  },
};

export default approveMultisigProposalAction;


================================================
File: src/actions/squads/createMultisig.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { create_squads_multisig } from "../../tools";
import { PublicKey } from "@solana/web3.js";

const createMultisigAction: Action = {
  name: "CREATE_MULTISIG_ACTION",
  similes: [
    "create multisig",
    "create squads multisig",
    "create 2-by-2 multisig",
    "create 2-of-2 multisig",
    "create 2-of-2 multisig account",
    "create 2-of-2 multisig account on Solana",
  ],
  description: `Create a 2-of-2 multisig account on Solana using Squads with the user and the agent, where both approvals will be required to run the transactions.
  
  Note: For one AI agent, only one 2-by-2 multisig can be created as it is pair-wise.`,
  examples: [
    [
      {
        input: {
          creator: "7nE9GvcwsqzYxmJLSrYmSB1V1YoJWVK1KWzAcWAzjXkN",
        },
        output: {
          status: "success",
          message: "2-by-2 multisig account created successfully",
          signature: "4xKpN2...",
        },
        explanation: "Create a 2-of-2 multisig account on Solana",
      },
    ],
  ],
  schema: z.object({
    creator: z.string(),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    const multisig = await create_squads_multisig(
      agent,
      new PublicKey(input.creator as string),
    );

    return {
      status: "success",
      message: "2-by-2 multisig account created successfully",
      signature: multisig,
    };
  },
};

export default createMultisigAction;


================================================
File: src/actions/squads/createMultisigProposal.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { multisig_create_proposal } from "../../tools";

const createMultisigProposalAction: Action = {
  name: "CREATE_MULTISIG_PROPOSAL_ACTION",
  similes: [
    "create proposal",
    "create proposal to transfer funds",
    "create proposal to transfer funds from 2-of-2 multisig",
    "create proposal to transfer funds from 2-of-2 multisig account",
    "create proposal to transfer funds from 2-of-2 multisig account on Solana",
  ],
  description: `Create a proposal to transfer funds from a 2-of-2 multisig account on Solana with the user and the agent, where both approvals will be required to run the transactions.
  
  If transactionIndex is not provided, the latest index will automatically be fetched and used.`,
  examples: [
    [
      {
        input: {
          transactionIndex: 0,
        },
        output: {
          status: "success",
          message: "Proposal created successfully",
          transaction: "4xKpN2...",
          transactionIndex: "0",
        },
        explanation:
          "Create a proposal to transfer 1 SOL from 2-of-2 multisig account on Solana",
      },
    ],
  ],
  schema: z.object({
    transactionIndex: z.number().optional(),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    const transactionIndex =
      input.transactionIndex !== undefined
        ? Number(input.transactionIndex)
        : undefined;

    const multisig = await multisig_create_proposal(agent, transactionIndex);

    return {
      status: "success",
      message: "Proposal created successfully",
      transaction: multisig,
      transactionIndex: transactionIndex,
    };
  },
};

export default createMultisigProposalAction;


================================================
File: src/actions/squads/depositToMultisigTreasury.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { multisig_deposit_to_treasury } from "../../tools";

const depositToMultisigAction: Action = {
  name: "DEPOSIT_TO_MULTISIG_ACTION",
  similes: [
    "deposit to multisig",
    "deposit to squads multisig",
    "deposit to 2-of-2 multisig account",
    "deposit to 2-of-2 multisig account on Solana",
    "deposit SOL to 2-of-2 multisig",
    "deposit SPL tokens to 2-of-2 multisig",
  ],
  description: `Deposit funds to a 2-of-2 multisig account on Solana with the user and the agent, where both approvals will be required to run the transactions.`,
  examples: [
    [
      {
        input: {
          amount: 1,
        },
        output: {
          status: "success",
          message: "Funds deposited to 2-by-2 multisig account successfully",
          signature: "4xKpN2...",
        },
        explanation: "Deposit 1 SOL to 2-of-2 multisig account on Solana",
      },
    ],
  ],
  schema: z.object({
    amount: z.number().min(0, "Amount must be greater than 0"),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    const multisig = await multisig_deposit_to_treasury(
      agent,
      input.amount as number,
    );

    return {
      status: "success",
      message: "Funds deposited to 2-by-2 multisig account successfully",
      signature: multisig,
    };
  },
};

export default depositToMultisigAction;


================================================
File: src/actions/squads/executeMultisigProposal.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { multisig_execute_proposal } from "../../tools";

const executeMultisigProposalAction: Action = {
  name: "EXECUTE_MULTISIG_PROPOSAL_ACTION",
  similes: [
    "execute proposal",
    "execute proposal to transfer funds",
    "execute proposal to transfer funds from 2-of-2 multisig",
    "execute proposal to transfer funds from 2-of-2 multisig account",
    "execute proposal to transfer funds from 2-of-2 multisig account on Solana",
  ],
  description: `Execute a proposal to transfer funds from a 2-of-2 multisig account on Solana with the user and the agent, where both approvals will be required to run the transactions.`,
  examples: [
    [
      {
        input: {
          proposalIndex: 0,
        },
        output: {
          status: "success",
          message: "Proposal executed successfully",
          transaction: "4xKpN2...",
          proposalIndex: "0",
        },
        explanation:
          "Execute a proposal to transfer 1 SOL from 2-of-2 multisig account on Solana",
      },
    ],
  ],
  schema: z.object({
    proposalIndex: z.number().optional(),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    const proposalIndex =
      input.proposalIndex !== undefined
        ? Number(input.proposalIndex)
        : undefined;

    const multisig = await multisig_execute_proposal(agent, proposalIndex);

    return {
      status: "success",
      message: "Proposal executed successfully",
      transaction: multisig,
      proposalIndex,
    };
  },
};

export default executeMultisigProposalAction;


================================================
File: src/actions/squads/rejectMultisigProposal.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { multisig_reject_proposal } from "../../tools";

const rejectMultisigProposalAction: Action = {
  name: "REJECT_MULTISIG_PROPOSAL_ACTION",
  similes: [
    "reject proposal",
    "reject proposal to transfer funds",
    "reject proposal to transfer funds from 2-of-2 multisig",
    "reject proposal to transfer funds from 2-of-2 multisig account",
    "reject proposal to transfer funds from 2-of-2 multisig account on Solana",
  ],
  description: `Reject a proposal to transfer funds from a 2-of-2 multisig account on Solana with the user and the agent, where both approvals will be required to run the transactions.`,
  examples: [
    [
      {
        input: {
          proposalIndex: 0,
        },
        output: {
          status: "success",
          message: "Proposal rejected successfully",
          transaction: "4xKpN2...",
          proposalIndex: "0",
        },
        explanation:
          "Reject a proposal to transfer 1 SOL from 2-of-2 multisig account on Solana",
      },
    ],
  ],
  schema: z.object({
    proposalIndex: z.number().optional(),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    const proposalIndex =
      input.proposalIndex !== undefined
        ? Number(input.proposalIndex)
        : undefined;

    const tx = await multisig_reject_proposal(agent, proposalIndex);

    return {
      status: "success",
      message: "Proposal rejected successfully",
      transaction: tx,
      proposalIndex,
    };
  },
};

export default rejectMultisigProposalAction;


================================================
File: src/actions/squads/transferFromMultisigTreasury.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { multisig_transfer_from_treasury } from "../../tools";
import { PublicKey } from "@solana/web3.js";

const transferFromMultisigAction: Action = {
  name: "TRANSFER_FROM_MULTISIG_ACTION",
  similes: [
    "transfer from multisig",
    "transfer from squads multisig",
    "transfer SOL from 2-by-2 multisig",
    "transfer from 2-of-2 multisig account",
    "transfer from 2-of-2 multisig account on Solana",
  ],
  description: `Create a transaction to transfer funds from a 2-of-2 multisig account on Solana using Squads with the user and the agent, where both approvals will be required to run the transactions.`,
  examples: [
    [
      {
        input: {
          amount: 1,
          recipient: "7nE9GvcwsqzYxmJLSrYmSB1V1YoJWVK1KWzAcWAzjXkN",
        },
        output: {
          status: "success",
          message: "Transaction added to 2-by-2 multisig account successfully",
          transaction: "4xKpN2...",
          amount: "1",
          recipient: "7nE9GvcwsqzYxmJLSrYmSB1V1YoJWVK1KWzAcWAzjXkN",
        },
        explanation: "Transfer 1 SOL from 2-of-2 multisig account on Solana",
      },
    ],
  ],
  schema: z.object({
    amount: z.number().min(0, "Amount must be greater than 0"),
    recipient: z.string(),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    const multisig = await multisig_transfer_from_treasury(
      agent,
      input.amount as number,
      new PublicKey(input.recipient as string),
    );

    return {
      status: "success",
      message: "Transaction added to 2-by-2 multisig account successfully",
      transaction: multisig,
      amount: input.amount,
      recipient: input.recipient,
    };
  },
};

export default transferFromMultisigAction;


================================================
File: src/actions/voltr/depositStrategy.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { PublicKey } from "@solana/web3.js";
import { BN } from "bn.js";

const depositVoltrStrategyAction: Action = {
  name: "DEPOSIT_VOLTR_STRATEGY",
  similes: [
    "deposit to voltr strategy",
    "add funds to voltr vault strategy",
    "invest in voltr strategy",
    "deposit assets to voltr",
    "contribute to voltr vault",
    "fund voltr strategy",
  ],
  description: "Deposit assets into a specific strategy within a Voltr vault",
  examples: [
    [
      {
        input: {
          depositAmount: "1000000000", // 1 USDC with 6 decimals
          vault: "7opUkqYtxmQRriZvwZkPcg6LqmGjAh1RSEsVrdsGDx5K",
          strategy: "9ZQQYvr4x7AMqd6abVa1f5duGjti5wk1MHsX6hogPsLk",
        },
        output: {
          status: "success",
          vault: "7opUkqYtxmQRriZvwZkPcg6LqmGjAh1RSEsVrdsGDx5K",
          strategy: "9ZQQYvr4x7AMqd6abVa1f5duGjti5wk1MHsX6hogPsLk",
          signature: "2ZE7Rz...",
          message: "Successfully deposited 1000000000 into strategy",
        },
        explanation: "Deposit 1 USDC into a Voltr vault strategy",
      },
    ],
  ],
  schema: z.object({
    depositAmount: z
      .string()
      .min(1)
      .describe("The amount to deposit (in base units including decimals)"),
    vault: z
      .string()
      .min(1)
      .describe(
        "The public key of the Voltr source vault to take assets from, e.g., 'Ga27...'",
      ),
    strategy: z
      .string()
      .min(1)
      .describe(
        "The public key of the initialized target strategy to deposit into, e.g., 'Jheh...'",
      ),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    try {
      const depositAmount = new BN(input.depositAmount);
      const vault = new PublicKey(input.vault);
      const strategy = new PublicKey(input.strategy);

      const signature = await agent.voltrDepositStrategy(
        depositAmount,
        vault,
        strategy,
      );

      return {
        status: "success",
        vault: vault.toBase58(),
        strategy: strategy.toBase58(),
        signature,
        message: `Successfully deposited ${input.depositAmount} into strategy`,
      };
    } catch (error: any) {
      return {
        status: "error",
        message: `Failed to deposit into strategy: ${error.message}`,
      };
    }
  },
};

export default depositVoltrStrategyAction;


================================================
File: src/actions/voltr/getPositionValues.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { PublicKey } from "@solana/web3.js";

const getVoltrPositionValuesAction: Action = {
  name: "GET_VOLTR_POSITION_VALUES",
  similes: [
    "get voltr vault value",
    "check voltr position",
    "get voltr vault assets",
    "view voltr holdings",
    "check voltr portfolio",
    "get voltr vault breakdown",
  ],
  description:
    "Get the current position values and total assets for a Voltr vault",
  examples: [
    [
      {
        input: {
          vault: "7opUkqYtxmQRriZvwZkPcg6LqmGjAh1RSEsVrdsGDx5K",
        },
        output: {
          status: "success",
          data: {
            totalValue: 1000000,
            positions: [
              {
                strategy: "4JHtgXyMb9gFJ1hGd2sh645jrZcxurSG3QP7Le3aTMTx",
                value: 600000,
              },
              {
                strategy: "4i9kzGr1UkxBCCUkQUQ4vsF51fjdt2knKxrwM1h1NW4g",
                value: 400000,
              },
            ],
          },
          message: "Successfully retrieved Voltr vault position values",
        },
        explanation:
          "Get position values for a Voltr vault showing total value and value per strategy",
      },
    ],
  ],
  schema: z.object({
    vault: z
      .string()
      .min(1)
      .describe("The public key of the Voltr vault to query, e.g., 'Ga27...'"),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    try {
      const vault = new PublicKey(input.vault);

      const result = await agent.voltrGetPositionValues(vault);
      const positionData = JSON.parse(result);

      return {
        status: "success",
        vault: vault.toBase58(),
        data: positionData,
        message: "Successfully retrieved Voltr vault position values",
      };
    } catch (error: any) {
      return {
        status: "error",
        message: `Failed to get vault position values: ${error.message}`,
      };
    }
  },
};

export default getVoltrPositionValuesAction;


================================================
File: src/actions/voltr/withdrawStrategy.ts
================================================
import { Action } from "../../types/action";
import { SolanaAgentKit } from "../../agent";
import { z } from "zod";
import { PublicKey } from "@solana/web3.js";
import { BN } from "bn.js";

const withdrawVoltrStrategyAction: Action = {
  name: "WITHDRAW_VOLTR_STRATEGY",
  similes: [
    "withdraw from voltr strategy",
    "remove funds from voltr vault strategy",
    "take out from voltr strategy",
    "withdraw assets from voltr",
    "pull from voltr vault",
    "redeem from voltr strategy",
  ],
  description: "Withdraw assets from a specific strategy within a Voltr vault",
  examples: [
    [
      {
        input: {
          withdrawAmount: "1000000000", // 1 USDC with 6 decimals
          vault: "7opUkqYtxmQRriZvwZkPcg6LqmGjAh1RSEsVrdsGDx5K",
          strategy: "9ZQQYvr4x7AMqd6abVa1f5duGjti5wk1MHsX6hogPsLk",
        },
        output: {
          status: "success",
          vault: "7opUkqYtxmQRriZvwZkPcg6LqmGjAh1RSEsVrdsGDx5K",
          strategy: "9ZQQYvr4x7AMqd6abVa1f5duGjti5wk1MHsX6hogPsLk",
          signature: "2ZE7Rz...",
          message: "Successfully withdrew 1000000000 from strategy",
        },
        explanation: "Withdraw 1 USDC from a Voltr vault strategy",
      },
    ],
  ],
  schema: z.object({
    withdrawAmount: z
      .string()
      .min(1)
      .describe("The amount to withdraw (in base units including decimals)"),
    vault: z
      .string()
      .min(1)
      .describe(
        "The public key of the Voltr source vault to deposit assets into, e.g., 'Ga27...'",
      ),
    strategy: z
      .string()
      .min(1)
      .describe(
        "The public key of the initialized target strategy to withdraw from, e.g., 'Jheh...'",
      ),
  }),
  handler: async (agent: SolanaAgentKit, input: Record<string, any>) => {
    try {
      const withdrawAmount = new BN(input.withdrawAmount);
      const vault = new PublicKey(input.vault);
      const strategy = new PublicKey(input.strategy);

      const signature = await agent.voltrWithdrawStrategy(
        withdrawAmount,
        vault,
        strategy,
      );

      return {
        status: "success",
        vault: vault.toBase58(),
        strategy: strategy.toBase58(),
        signature,
        message: `Successfully withdrew ${input.withdrawAmount} from strategy`,
      };
    } catch (error: any) {
      return {
        status: "error",
        message: `Failed to withdraw from strategy: ${error.message}`,
      };
    }
  },
};

export default withdrawVoltrStrategyAction;


================================================
File: src/agent/index.ts
================================================
import { Connection, Keypair, PublicKey } from "@solana/web3.js";
import { BN } from "@coral-xyz/anchor";
import bs58 from "bs58";
import Decimal from "decimal.js";
import {
  CreateCollectionOptions,
  CreateSingleOptions,
  StoreInitOptions,
} from "@3land/listings-sdk/dist/types/implementation/implementationTypes";
import { DEFAULT_OPTIONS } from "../constants";
import {
  deploy_collection,
  deploy_token,
  get_balance,
  get_balance_other,
  getTPS,
  resolveSolDomain,
  getPrimaryDomain,
  launchPumpFunToken,
  lendAsset,
  luloLend,
  luloWithdraw,
  mintCollectionNFT,
  openbookCreateMarket,
  manifestCreateMarket,
  raydiumCreateAmmV4,
  raydiumCreateClmm,
  raydiumCreateCpmm,
  registerDomain,
  request_faucet_funds,
  trade,
  limitOrder,
  batchOrder,
  cancelAllOrders,
  withdrawAll,
  closePerpTradeShort,
  closePerpTradeLong,
  openPerpTradeShort,
  openPerpTradeLong,
  transfer,
  getTokenDataByAddress,
  getTokenDataByTicker,
  stakeWithJup,
  stakeWithSolayer,
  sendCompressedAirdrop,
  orcaCreateSingleSidedLiquidityPool,
  orcaCreateCLMM,
  orcaOpenCenteredPositionWithLiquidity,
  orcaOpenSingleSidedPosition,
  FEE_TIERS,
  fetchPrice,
  getAllDomainsTLDs,
  getAllRegisteredAllDomains,
  getOwnedDomainsForTLD,
  getMainAllDomainsDomain,
  getOwnedAllDomains,
  resolveAllDomains,
  create_gibwork_task,
  orcaClosePosition,
  orcaFetchPositions,
  rock_paper_scissor,
  create_TipLink,
  listNFTForSale,
  cancelListing,
  closeEmptyTokenAccounts,
  fetchTokenReportSummary,
  fetchTokenDetailedReport,
  fetchPythPrice,
  fetchPythPriceFeedID,
  flashOpenTrade,
  flashCloseTrade,
  createMeteoraDynamicAMMPool,
  createMeteoraDlmmPool,
  createCollection,
  createSingle,
  multisig_transfer_from_treasury,
  create_squads_multisig,
  multisig_create_proposal,
  multisig_deposit_to_treasury,
  multisig_reject_proposal,
  multisig_approve_proposal,
  multisig_execute_proposal,
  parseTransaction,
  sendTransactionWithPriorityFee,
  getAssetsByOwner,
  getHeliusWebhook,
  create_HeliusWebhook,
  deleteHeliusWebhook,
  createDriftUserAccount,
  createVault,
  depositIntoVault,
  depositToDriftUserAccount,
  getVaultAddress,
  doesUserHaveDriftAccount,
  driftUserAccountInfo,
  requestWithdrawalFromVault,
  tradeDriftVault,
  driftPerpTrade,
  updateVault,
  getVaultInfo,
  withdrawFromDriftUserAccount,
  withdrawFromDriftVault,
  updateVaultDelegate,
  get_token_balance,
  getAvailableDriftSpotMarkets,
  getAvailableDriftPerpMarkets,
  stakeToDriftInsuranceFund,
  requestUnstakeFromDriftInsuranceFund,
  unstakeFromDriftInsuranceFund,
  swapSpotToken,
  calculatePerpMarketFundingRate,
  getEntryQuoteOfPerpTrade,
  getLendingAndBorrowAPY,
  voltrGetPositionValues,
  voltrDepositStrategy,
  voltrWithdrawStrategy,
  get_asset,
  get_assets_by_authority,
  get_assets_by_creator,
  getPriceInference,
  getAllTopics,
  getInferenceByTopicId,
} from "../tools";
import {
  Config,
  TokenCheck,
  CollectionDeployment,
  CollectionOptions,
  GibworkCreateTaskReponse,
  JupiterTokenData,
  MintCollectionNFTResponse,
  PumpfunLaunchResponse,
  PumpFunTokenOptions,
  OrderParams,
  FlashTradeParams,
  FlashCloseTradeParams,
  HeliusWebhookIdResponse,
  HeliusWebhookResponse,
} from "../types";
import {
  DasApiAsset,
  DasApiAssetList,
  GetAssetsByAuthorityRpcInput,
  GetAssetsByCreatorRpcInput,
  SearchAssetsRpcInput,
} from "@metaplex-foundation/digital-asset-standard-api";
import { AlloraInference, AlloraTopic } from "@alloralabs/allora-sdk";

/**
 * Main class for interacting with Solana blockchain
 * Provides a unified interface for token operations, NFT management, trading and more
 *
 * @class SolanaAgentKit
 * @property {Connection} connection - Solana RPC connection
 * @property {Keypair} wallet - Wallet keypair for signing transactions
 * @property {PublicKey} wallet_address - Public key of the wallet
 * @property {Config} config - Configuration object
 */
export class SolanaAgentKit {
  public connection: Connection;
  public wallet: Keypair;
  public wallet_address: PublicKey;
  public config: Config;

  /**
   * @deprecated Using openai_api_key directly in constructor is deprecated.
   * Please use the new constructor with Config object instead:
   * @example
   * const agent = new SolanaAgentKit(privateKey, rpcUrl, {
   *   OPENAI_API_KEY: 'your-key'
   * });
   */
  constructor(
    private_key: string,
    rpc_url: string,
    openai_api_key: string | null,
  );
  constructor(private_key: string, rpc_url: string, config: Config);
  constructor(
    private_key: string,
    rpc_url: string,
    configOrKey: Config | string | null,
  ) {
    this.connection = new Connection(
      rpc_url || "https://api.mainnet-beta.solana.com",
    );
    this.wallet = Keypair.fromSecretKey(bs58.decode(private_key));
    this.wallet_address = this.wallet.publicKey;

    // Handle both old and new patterns
    if (typeof configOrKey === "string" || configOrKey === null) {
      this.config = { OPENAI_API_KEY: configOrKey || "" };
    } else {
      this.config = configOrKey;
    }
  }

  // Tool methods
  async requestFaucetFunds() {
    return request_faucet_funds(this);
  }

  async deployToken(
    name: string,
    uri: string,
    symbol: string,
    decimals: number = DEFAULT_OPTIONS.TOKEN_DECIMALS,
    initialSupply?: number,
  ): Promise<{ mint: PublicKey }> {
    return deploy_token(this, name, uri, symbol, decimals, initialSupply);
  }

  async deployCollection(
    options: CollectionOptions,
  ): Promise<CollectionDeployment> {
    return deploy_collection(this, options);
  }

  async getBalance(token_address?: PublicKey): Promise<number> {
    return get_balance(this, token_address);
  }

  async getTokenBalances(wallet_address?: PublicKey): Promise<{
    sol: number;
    tokens: Array<{
      tokenAddress: string;
      name: string;
      symbol: string;
      balance: number;
      decimals: number;
    }>;
  }> {
    return get_token_balance(this, wallet_address);
  }

  async getBalanceOther(
    walletAddress: PublicKey,
    tokenAddress?: PublicKey,
  ): Promise<number> {
    return get_balance_other(this, walletAddress, tokenAddress);
  }

  async mintNFT(
    collectionMint: PublicKey,
    metadata: Parameters<typeof mintCollectionNFT>[2],
    recipient?: PublicKey,
  ): Promise<MintCollectionNFTResponse> {
    return mintCollectionNFT(this, collectionMint, metadata, recipient);
  }

  async transfer(
    to: PublicKey,
    amount: number,
    mint?: PublicKey,
  ): Promise<string> {
    return transfer(this, to, amount, mint);
  }

  async registerDomain(name: string, spaceKB?: number): Promise<string> {
    return registerDomain(this, name, spaceKB);
  }

  async resolveSolDomain(domain: string): Promise<PublicKey> {
    return resolveSolDomain(this, domain);
  }

  async getPrimaryDomain(account: PublicKey): Promise<string> {
    return getPrimaryDomain(this, account);
  }

  async trade(
    outputMint: PublicKey,
    inputAmount: number,
    inputMint?: PublicKey,
    slippageBps: number = DEFAULT_OPTIONS.SLIPPAGE_BPS,
  ): Promise<string> {
    return trade(this, outputMint, inputAmount, inputMint, slippageBps);
  }

  async limitOrder(
    marketId: PublicKey,
    quantity: number,
    side: string,
    price: number,
  ): Promise<string> {
    return limitOrder(this, marketId, quantity, side, price);
  }

  async batchOrder(
    marketId: PublicKey,
    orders: OrderParams[],
  ): Promise<string> {
    return batchOrder(this, marketId, orders);
  }

  async cancelAllOrders(marketId: PublicKey): Promise<string> {
    return cancelAllOrders(this, marketId);
  }

  async withdrawAll(marketId: PublicKey): Promise<string> {
    return withdrawAll(this, marketId);
  }

  async openPerpTradeLong(
    args: Omit<Parameters<typeof openPerpTradeLong>[0], "agent">,
  ): Promise<string> {
    return openPerpTradeLong({
      agent: this,
      ...args,
    });
  }

  async openPerpTradeShort(
    args: Omit<Parameters<typeof openPerpTradeShort>[0], "agent">,
  ): Promise<string> {
    return openPerpTradeShort({
      agent: this,
      ...args,
    });
  }

  async closePerpTradeShort(
    args: Omit<Parameters<typeof closePerpTradeShort>[0], "agent">,
  ): Promise<string> {
    return closePerpTradeShort({
      agent: this,
      ...args,
    });
  }

  async closePerpTradeLong(
    args: Omit<Parameters<typeof closePerpTradeLong>[0], "agent">,
  ): Promise<string> {
    return closePerpTradeLong({
      agent: this,
      ...args,
    });
  }

  async lendAssets(amount: number): Promise<string> {
    return lendAsset(this, amount);
  }

  async luloLend(mintAddress: string, amount: number): Promise<string> {
    return luloLend(this, mintAddress, amount);
  }

  async luloWithdraw(mintAddress: string, amount: number): Promise<string> {
    return luloWithdraw(this, mintAddress, amount);
  }

  async getTPS(): Promise<number> {
    return getTPS(this);
  }

  async getTokenDataByAddress(
    mint: string,
  ): Promise<JupiterTokenData | undefined> {
    return getTokenDataByAddress(new PublicKey(mint));
  }

  async getTokenDataByTicker(
    ticker: string,
  ): Promise<JupiterTokenData | undefined> {
    return getTokenDataByTicker(ticker);
  }

  async fetchTokenPrice(mint: string) {
    return fetchPrice(new PublicKey(mint));
  }

  async launchPumpFunToken(
    tokenName: string,
    tokenTicker: string,
    description: string,
    imageUrl: string,
    options?: PumpFunTokenOptions,
  ): Promise<PumpfunLaunchResponse> {
    return launchPumpFunToken(
      this,
      tokenName,
      tokenTicker,
      description,
      imageUrl,
      options,
    );
  }

  async stake(amount: number): Promise<string> {
    return stakeWithJup(this, amount);
  }

  async restake(amount: number): Promise<string> {
    return stakeWithSolayer(this, amount);
  }

  async sendCompressedAirdrop(
    mintAddress: string,
    amount: number,
    decimals: number,
    recipients: string[],
    priorityFeeInLamports: number,
    shouldLog: boolean,
  ): Promise<string[]> {
    return await sendCompressedAirdrop(
      this,
      new PublicKey(mintAddress),
      amount,
      decimals,
      recipients.map((recipient) => new PublicKey(recipient)),
      priorityFeeInLamports,
      shouldLog,
    );
  }

  async meteoraCreateDynamicPool(
    tokenAMint: PublicKey,
    tokenBMint: PublicKey,
    tokenAAmount: BN,
    tokenBAmount: BN,
    tradeFeeNumerator: number,
    activationPoint: BN | null,
    hasAlphaVault: boolean,
    activationType: number,
  ): Promise<string> {
    return createMeteoraDynamicAMMPool(
      this,
      tokenAMint,
      tokenBMint,
      tokenAAmount,
      tokenBAmount,
      {
        tradeFeeNumerator,
        activationPoint,
        hasAlphaVault,
        activationType,
        padding: new Array(90).fill(0),
      },
    );
  }

  async meteoraCreateDlmmPool(
    tokenAMint: PublicKey,
    tokenBMint: PublicKey,
    binStep: number,
    initialPrice: number,
    priceRoundingUp: boolean,
    feeBps: number,
    activationType: number,
    hasAlphaVault: boolean,
    activationPoint: BN | undefined,
  ): Promise<string> {
    return createMeteoraDlmmPool(
      this,
      binStep,
      tokenAMint,
      tokenBMint,
      initialPrice,
      priceRoundingUp,
      feeBps,
      activationType,
      hasAlphaVault,
      activationPoint,
    );
  }

  async orcaClosePosition(positionMintAddress: PublicKey) {
    return orcaClosePosition(this, positionMintAddress);
  }

  async orcaCreateCLMM(
    mintDeploy: PublicKey,
    mintPair: PublicKey,
    initialPrice: Decimal,
    feeTier: keyof typeof FEE_TIERS,
  ) {
    return orcaCreateCLMM(this, mintDeploy, mintPair, initialPrice, feeTier);
  }

  async orcaCreateSingleSidedLiquidityPool(
    depositTokenAmount: number,
    depositTokenMint: PublicKey,
    otherTokenMint: PublicKey,
    initialPrice: Decimal,
    maxPrice: Decimal,
    feeTier: keyof typeof FEE_TIERS,
  ) {
    return orcaCreateSingleSidedLiquidityPool(
      this,
      depositTokenAmount,
      depositTokenMint,
      otherTokenMint,
      initialPrice,
      maxPrice,
      feeTier,
    );
  }

  async orcaFetchPositions() {
    return orcaFetchPositions(this);
  }

  async orcaOpenCenteredPositionWithLiquidity(
    whirlpoolAddress: PublicKey,
    priceOffsetBps: number,
    inputTokenMint: PublicKey,
    inputAmount: Decimal,
  ) {
    return orcaOpenCenteredPositionWithLiquidity(
      this,
      whirlpoolAddress,
      priceOffsetBps,
      inputTokenMint,
      inputAmount,
    );
  }

  async orcaOpenSingleSidedPosition(
    whirlpoolAddress: PublicKey,
    distanceFromCurrentPriceBps: number,
    widthBps: number,
    inputTokenMint: PublicKey,
    inputAmount: Decimal,
  ): Promise<string> {
    return orcaOpenSingleSidedPosition(
      this,
      whirlpoolAddress,
      distanceFromCurrentPriceBps,
      widthBps,
      inputTokenMint,
      inputAmount,
    );
  }

  async resolveAllDomains(domain: string): Promise<PublicKey | undefined> {
    return resolveAllDomains(this, domain);
  }

  async getOwnedAllDomains(owner: PublicKey): Promise<string[]> {
    return getOwnedAllDomains(this, owner);
  }

  async getOwnedDomainsForTLD(tld: string): Promise<string[]> {
    return getOwnedDomainsForTLD(this, tld);
  }

  async getAllDomainsTLDs(): Promise<string[]> {
    return getAllDomainsTLDs(this);
  }

  async getAllRegisteredAllDomains(): Promise<string[]> {
    return getAllRegisteredAllDomains(this);
  }

  async getMainAllDomainsDomain(owner: PublicKey): Promise<string | null> {
    return getMainAllDomainsDomain(this, owner);
  }

  async raydiumCreateAmmV4(
    marketId: PublicKey,
    baseAmount: BN,
    quoteAmount: BN,
    startTime: BN,
  ): Promise<string> {
    return raydiumCreateAmmV4(
      this,
      marketId,

      baseAmount,
      quoteAmount,

      startTime,
    );
  }

  async raydiumCreateClmm(
    mint1: PublicKey,
    mint2: PublicKey,
    configId: PublicKey,
    initialPrice: Decimal,
    startTime: BN,
  ): Promise<string> {
    return raydiumCreateClmm(
      this,
      mint1,
      mint2,
      configId,
      initialPrice,
      startTime,
    );
  }

  async raydiumCreateCpmm(
    mint1: PublicKey,
    mint2: PublicKey,
    configId: PublicKey,
    mintAAmount: BN,
    mintBAmount: BN,
    startTime: BN,
  ): Promise<string> {
    return raydiumCreateCpmm(
      this,
      mint1,
      mint2,
      configId,
      mintAAmount,
      mintBAmount,

      startTime,
    );
  }

  async openbookCreateMarket(
    baseMint: PublicKey,
    quoteMint: PublicKey,
    lotSize: number = 1,
    tickSize: number = 0.01,
  ): Promise<string[]> {
    return openbookCreateMarket(
      this,
      baseMint,
      quoteMint,

      lotSize,
      tickSize,
    );
  }

  async manifestCreateMarket(
    baseMint: PublicKey,
    quoteMint: PublicKey,
  ): Promise<string[]> {
    return manifestCreateMarket(this, baseMint, quoteMint);
  }

  async getPythPriceFeedID(tokenSymbol: string): Promise<string> {
    return fetchPythPriceFeedID(tokenSymbol);
  }

  async getPythPrice(priceFeedID: string): Promise<string> {
    return fetchPythPrice(priceFeedID);
  }

  async createGibworkTask(
    title: string,
    content: string,
    requirements: string,
    tags: string[],
    tokenMintAddress: string,
    tokenAmount: number,
    payer?: string,
  ): Promise<GibworkCreateTaskReponse> {
    return create_gibwork_task(
      this,
      title,
      content,
      requirements,
      tags,
      new PublicKey(tokenMintAddress),
      tokenAmount,
      payer ? new PublicKey(payer) : undefined,
    );
  }

  async rockPaperScissors(
    amount: number,
    choice: "rock" | "paper" | "scissors",
  ) {
    return rock_paper_scissor(this, amount, choice);
  }
  async createTiplink(amount: number, splmintAddress?: PublicKey) {
    return create_TipLink(this, amount, splmintAddress);
  }

  async tensorListNFT(nftMint: PublicKey, price: number): Promise<string> {
    return listNFTForSale(this, nftMint, price);
  }

  async tensorCancelListing(nftMint: PublicKey): Promise<string> {
    return cancelListing(this, nftMint);
  }

  async closeEmptyTokenAccounts(): Promise<{
    signature: string;
    size: number;
  }> {
    return closeEmptyTokenAccounts(this);
  }

  async fetchTokenReportSummary(mint: string): Promise<TokenCheck> {
    return fetchTokenReportSummary(mint);
  }

  async fetchTokenDetailedReport(mint: string): Promise<TokenCheck> {
    return fetchTokenDetailedReport(mint);
  }

  /**
   * Opens a new trading position on Flash.Trade
   * @param params Flash trade parameters including market, side, collateral, leverage, and pool name
   * @returns Transaction signature
   */
  async flashOpenTrade(params: FlashTradeParams): Promise<string> {
    return flashOpenTrade(this, params);
  }

  /**
   * Closes an existing trading position on Flash.Trade
   * @param params Flash trade close parameters
   * @returns Transaction signature
   */
  async flashCloseTrade(params: FlashCloseTradeParams): Promise<string> {
    return flashCloseTrade(this, params);
  }
  async heliusParseTransactions(transactionId: string): Promise<any> {
    return parseTransaction(this, transactionId);
  }
  async getAllAssetsbyOwner(owner: PublicKey, limit: number): Promise<any> {
    return getAssetsByOwner(this, owner, limit);
  }

  async create3LandCollection(
    collectionOpts: CreateCollectionOptions,
    isDevnet: boolean = false,
    priorityFeeParam?: number,
  ): Promise<string> {
    const optionsWithBase58: StoreInitOptions = {
      privateKey: this.wallet.secretKey,
    };
    if (isDevnet) {
      optionsWithBase58.isMainnet = false;
    } else {
      optionsWithBase58.isMainnet = true;
    }

    const tx = await createCollection(
      optionsWithBase58,
      collectionOpts,
      priorityFeeParam,
    );
    return `Transaction: ${tx}`;
  }

  async create3LandNft(
    collectionAccount: string,
    createItemOptions: CreateSingleOptions,
    isDevnet: boolean = false,
    withPool: boolean = false,
    priorityFeeParam?: number,
  ): Promise<string> {
    const optionsWithBase58: StoreInitOptions = {
      privateKey: this.wallet.secretKey,
    };
    if (isDevnet) {
      optionsWithBase58.isMainnet = false;
    } else {
      optionsWithBase58.isMainnet = true;
    }

    const tx = await createSingle(
      optionsWithBase58,
      collectionAccount,
      createItemOptions,
      !isDevnet,
      withPool,
      priorityFeeParam,
    );
    return `Transaction: ${tx}`;
  }
  async sendTranctionWithPriority(
    priorityLevel: string,
    amount: number,
    to: PublicKey,
    splmintAddress?: PublicKey,
  ): Promise<{ transactionId: string; fee: number }> {
    return sendTransactionWithPriorityFee(
      this,
      priorityLevel,
      amount,
      to,
      splmintAddress,
    );
  }

  async createSquadsMultisig(creator: PublicKey): Promise<string> {
    return create_squads_multisig(this, creator);
  }

  async depositToMultisig(
    amount: number,
    vaultIndex: number = 0,
    mint?: PublicKey,
  ): Promise<string> {
    return multisig_deposit_to_treasury(this, amount, vaultIndex, mint);
  }

  async transferFromMultisig(
    amount: number,
    to: PublicKey,
    vaultIndex: number = 0,
    mint?: PublicKey,
  ): Promise<string> {
    return multisig_transfer_from_treasury(this, amount, to, vaultIndex, mint);
  }

  async createMultisigProposal(
    transactionIndex?: number | bigint,
  ): Promise<string> {
    return multisig_create_proposal(this, transactionIndex);
  }

  async approveMultisigProposal(
    transactionIndex?: number | bigint,
  ): Promise<string> {
    return multisig_approve_proposal(this, transactionIndex);
  }

  async rejectMultisigProposal(
    transactionIndex?: number | bigint,
  ): Promise<string> {
    return multisig_reject_proposal(this, transactionIndex);
  }

  async executeMultisigTransaction(
    transactionIndex?: number | bigint,
  ): Promise<string> {
    return multisig_execute_proposal(this, transactionIndex);
  }
  async CreateWebhook(
    accountAddresses: string[],
    webhookURL: string,
  ): Promise<HeliusWebhookResponse> {
    return create_HeliusWebhook(this, accountAddresses, webhookURL);
  }
  async getWebhook(id: string): Promise<HeliusWebhookIdResponse> {
    return getHeliusWebhook(this, id);
  }
  async deleteWebhook(webhookID: string): Promise<any> {
    return deleteHeliusWebhook(this, webhookID);
  }

  async createDriftUserAccount(depositAmount: number, depositSymbol: string) {
    return await createDriftUserAccount(this, depositAmount, depositSymbol);
  }

  async createDriftVault(params: {
    name: string;
    marketName: `${string}-${string}`;
    redeemPeriod: number;
    maxTokens: number;
    minDepositAmount: number;
    managementFee: number;
    profitShare: number;
    hurdleRate?: number;
    permissioned?: boolean;
  }) {
    return await createVault(this, params);
  }

  async depositIntoDriftVault(amount: number, vault: string) {
    return await depositIntoVault(this, amount, vault);
  }
  async depositToDriftUserAccount(
    amount: number,
    symbol: string,
    isRepayment?: boolean,
  ) {
    return await depositToDriftUserAccount(this, amount, symbol, isRepayment);
  }
  async deriveDriftVaultAddress(name: string) {
    return await getVaultAddress(this, name);
  }
  async doesUserHaveDriftAccount() {
    return await doesUserHaveDriftAccount(this);
  }
  async driftUserAccountInfo() {
    return await driftUserAccountInfo(this);
  }
  async requestWithdrawalFromDriftVault(amount: number, vault: string) {
    return await requestWithdrawalFromVault(this, amount, vault);
  }
  async tradeUsingDelegatedDriftVault(
    vault: string,
    amount: number,
    symbol: string,
    action: "long" | "short",
    type: "market" | "limit",
    price?: number,
  ) {
    return await tradeDriftVault(
      this,
      vault,
      amount,
      symbol,
      action,
      type,
      price,
    );
  }
  async tradeUsingDriftPerpAccount(
    amount: number,
    symbol: string,
    action: "long" | "short",
    type: "market" | "limit",
    price?: number,
  ) {
    return await driftPerpTrade(this, { action, amount, symbol, type, price });
  }
  async updateDriftVault(
    vaultAddress: string,
    params: {
      name: string;
      marketName: `${string}-${string}`;
      redeemPeriod: number;
      maxTokens: number;
      minDepositAmount: number;
      managementFee: number;
      profitShare: number;
      hurdleRate?: number;
      permissioned?: boolean;
    },
  ) {
    return await updateVault(this, vaultAddress, params);
  }
  async getDriftVaultInfo(vaultName: string) {
    return await getVaultInfo(this, vaultName);
  }
  async withdrawFromDriftAccount(
    amount: number,
    symbol: string,
    isBorrow?: boolean,
  ) {
    return await withdrawFromDriftUserAccount(this, amount, symbol, isBorrow);
  }
  async withdrawFromDriftVault(vault: string) {
    return await withdrawFromDriftVault(this, vault);
  }
  async updateDriftVaultDelegate(vaultAddress: string, delegate: string) {
    return await updateVaultDelegate(this, vaultAddress, delegate);
  }

  getAvailableDriftMarkets(type?: "spot" | "perp") {
    switch (type) {
      case "spot":
        return getAvailableDriftSpotMarkets();
      case "perp":
        return getAvailableDriftPerpMarkets();
      default:
        return {
          spot: getAvailableDriftSpotMarkets(),
          perp: getAvailableDriftPerpMarkets(),
        };
    }
  }
  async stakeToDriftInsuranceFund(amount: number, symbol: string) {
    return await stakeToDriftInsuranceFund(this, amount, symbol);
  }
  async requestUnstakeFromDriftInsuranceFund(amount: number, symbol: string) {
    return await requestUnstakeFromDriftInsuranceFund(this, amount, symbol);
  }
  async unstakeFromDriftInsuranceFund(symbol: string) {
    return await unstakeFromDriftInsuranceFund(this, symbol);
  }
  async driftSpotTokenSwap(
    params: {
      fromSymbol: string;
      toSymbol: string;
      slippage?: number;
    } & (
      | {
          toAmount: number;
        }
      | { fromAmount: number }
    ),
  ) {
    return await swapSpotToken(this, {
      fromSymbol: params.fromSymbol,
      toSymbol: params.toSymbol,
      // @ts-expect-error - fromAmount and toAmount are mutually exclusive
      fromAmount: params.fromAmount,
      // @ts-expect-error - fromAmount and toAmount are mutually exclusive
      toAmount: params.toAmount,
      slippage: params.slippage,
    });
  }
  async getPerpMarketFundingRate(
    symbol: `${string}-PERP`,
    period: "year" | "hour" = "year",
  ) {
    return calculatePerpMarketFundingRate(this, symbol, period);
  }
  async getEntryQuoteOfPerpTrade(
    amount: number,
    symbol: `${string}-PERP`,
    action: "short" | "long",
  ) {
    return getEntryQuoteOfPerpTrade(symbol, amount, action);
  }
  async getLendAndBorrowAPY(symbol: string) {
    return getLendingAndBorrowAPY(this, symbol);
  }

  async voltrDepositStrategy(
    depositAmount: BN,
    vault: PublicKey,
    strategy: PublicKey,
  ): Promise<string> {
    return voltrDepositStrategy(this, depositAmount, vault, strategy);
  }

  async voltrWithdrawStrategy(
    withdrawAmount: BN,
    vault: PublicKey,
    strategy: PublicKey,
  ): Promise<string> {
    return voltrWithdrawStrategy(this, withdrawAmount, vault, strategy);
  }

  async voltrGetPositionValues(vault: PublicKey): Promise<string> {
    return voltrGetPositionValues(this, vault);
  }

  async getAsset(assetId: string): Promise<DasApiAsset> {
    return get_asset(this, assetId);
  }
  async getAssetsByAuthority(
    params: GetAssetsByAuthorityRpcInput,
  ): Promise<DasApiAssetList> {
    return get_assets_by_authority(this, params);
  }
  async getAssetsByCreator(
    params: GetAssetsByCreatorRpcInput,
  ): Promise<DasApiAssetList> {
    return get_assets_by_creator(this, params);
  }
  async getPriceInference(
    tokenSymbol: string,
    timeframe: string,
  ): Promise<string> {
    return getPriceInference(this, tokenSymbol, timeframe);
  }
  async getAllTopics(): Promise<AlloraTopic[]> {
    return getAllTopics(this);
  }
  async getInferenceByTopicId(topicId: number): Promise<AlloraInference> {
    return getInferenceByTopicId(this, topicId);
  }
}


================================================
File: src/constants/index.ts
================================================
import { PublicKey } from "@solana/web3.js";

/**
 * Common token addresses used across the toolkit
 */
export const TOKENS = {
  USDC: new PublicKey("EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v"),
  USDT: new PublicKey("Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB"),
  USDS: new PublicKey("USDSwr9ApdHk5bvJKMjzff41FfuX8bSxdKcR81vTwcA"),
  SOL: new PublicKey("So11111111111111111111111111111111111111112"),
  jitoSOL: new PublicKey("J1toso1uCk3RLmjorhTtrVwY9HJ7X8V9yYac6Y7kGCPn"),
  bSOL: new PublicKey("bSo13r4TkiE4KumL71LsHTPpL2euBYLFx6h9HP3piy1"),
  mSOL: new PublicKey("mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So"),
  BONK: new PublicKey("DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263"),
} as const;

/**
 * Default configuration options
 * @property {number} SLIPPAGE_BPS - Default slippage tolerance in basis points (300 = 3%)
 * @property {number} TOKEN_DECIMALS - Default number of decimals for new tokens
 * @property {number} LEVERAGE_BPS - Default leverage for trading PERP
 */
export const DEFAULT_OPTIONS = {
  SLIPPAGE_BPS: 300,
  TOKEN_DECIMALS: 9,
  RERERRAL_FEE: 200,
  LEVERAGE_BPS: 50000, // 10000 = x1, 50000 = x5, 100000 = x10, 1000000 = x100
} as const;

export const METEORA_DYNAMIC_FEE_DENOMINATOR = 100000;

/**
 * Jupiter API URL
 */
export const JUP_API = "https://quote-api.jup.ag/v6";
export const JUP_REFERRAL_ADDRESS =
  "REFER4ZgmyYx9c6He5XfaTMiGfdLwRnkV4RPp9t9iF3";

export const METEORA_DYNAMIC_AMM_PROGRAM_ID = new PublicKey(
  "Eo7WjKq67rjJQSZxS6z3YkapzY3eMj6Xy8X5EQVn5UaB",
);
export const METEORA_DLMM_PROGRAM_ID = new PublicKey(
  "LbVRzDTvBDEcrthxfZ4RL6yiq3uZw8bS6MwtdY6UhFQ",
);
/**
 * Minimum compute price required to carry out complex transactions on the Drift protocol
 */
export const MINIMUM_COMPUTE_PRICE_FOR_COMPLEX_ACTIONS =
  0.000003 * 1000000 * 1000000;


================================================
File: src/langchain/index.ts
================================================
export * from "./adrena";
export * from "./alldomains";
export * from "./dexscreener";
export * from "./alldomains";
export * from "./flash";
export * from "./gibwork";
export * from "./jupiter";
export * from "./lulo";
export * from "./manifest";
export * from "./solana";
export * from "./agent";
export * from "./metaplex";
export * from "./openbook";
export * from "./orca";
export * from "./pumpfun";
export * from "./pyth";
export * from "./raydium";
export * from "./rugcheck";
export * from "./sendarcade";
export * from "./solayer";
export * from "./tensor";
export * from "./3land";
export * from "./tiplink";
export * from "./sns";
export * from "./lightprotocol";
export * from "./squads";
export * from "./meteora";
export * from "./helius";
export * from "./drift";
export * from "./voltr";
export * from "./allora";

import type { SolanaAgentKit } from "../agent";
import {
  SolanaBalanceTool,
  SolanaBalanceOtherTool,
  SolanaTransferTool,
  SolanaDeployTokenTool,
  SolanaDeployCollectionTool,
  SolanaMintNFTTool,
  SolanaTradeTool,
  SolanaRequestFundsTool,
  SolanaRegisterDomainTool,
  SolanaGetWalletAddressTool,
  SolanaPumpfunTokenLaunchTool,
  SolanaCreateImageTool,
  SolanaLendAssetTool,
  SolanaLuloLendTool,
  SolanaLuloWithdrawTool,
  SolanaTPSCalculatorTool,
  SolanaStakeTool,
  SolanaRestakeTool,
  SolanaFetchPriceTool,
  SolanaGetDomainTool,
  SolanaTokenDataTool,
  SolanaTokenDataByTickerTool,
  SolanaCompressedAirdropTool,
  SolanaRaydiumCreateAmmV4,
  SolanaRaydiumCreateClmm,
  SolanaRaydiumCreateCpmm,
  SolanaOpenbookCreateMarket,
  SolanaManifestCreateMarket,
  SolanaLimitOrderTool,
  SolanaBatchOrderTool,
  SolanaCancelAllOrdersTool,
  SolanaWithdrawAllTool,
  SolanaClosePosition,
  SolanaOrcaCreateCLMM,
  SolanaOrcaCreateSingleSideLiquidityPool,
  SolanaOrcaFetchPositions,
  SolanaOrcaOpenCenteredPosition,
  SolanaOrcaOpenSingleSidedPosition,
  SolanaPythFetchPrice,
  SolanaResolveDomainTool,
  SolanaGetOwnedDomains,
  SolanaGetOwnedTldDomains,
  SolanaGetAllTlds,
  SolanaGetMainDomain,
  SolanaResolveAllDomainsTool,
  SolanaCreateGibworkTask,
  SolanaRockPaperScissorsTool,
  SolanaTipLinkTool,
  SolanaListNFTForSaleTool,
  SolanaCancelNFTListingTool,
  SolanaCloseEmptyTokenAccounts,
  SolanaFetchTokenReportSummaryTool,
  SolanaFetchTokenDetailedReportTool,
  Solana3LandCreateSingle,
  Solana3LandCreateCollection,
  SolanaPerpOpenTradeTool,
  SolanaPerpCloseTradeTool,
  SolanaFlashOpenTrade,
  SolanaFlashCloseTrade,
  SolanaCreate2by2Multisig,
  SolanaDepositTo2by2Multisig,
  SolanaTransferFrom2by2Multisig,
  SolanaCreateProposal2by2Multisig,
  SolanaApproveProposal2by2Multisig,
  SolanaExecuteProposal2by2Multisig,
  SolanaRejectProposal2by2Multisig,
  SolanaMeteoraCreateDynamicPool,
  SolanaMeteoraCreateDlmmPool,
  SolanaSendTransactionWithPriorityFee,
  SolanaHeliusWebhookTool,
  SolanaGetHeliusWebhookTool,
  SolanaDeleteHeliusWebhookTool,
  SolanaParseTransactionHeliusTool,
  SolanaGetAllAssetsByOwner,
  SolanaCheckDriftAccountTool,
  SolanaCreateDriftUserAccountTool,
  SolanaCreateDriftVaultTool,
  SolanaDepositIntoDriftVaultTool,
  SolanaDepositToDriftUserAccountTool,
  SolanaDeriveVaultAddressTool,
  SolanaDriftUserAccountInfoTool,
  SolanaDriftVaultInfoTool,
  SolanaRequestDriftWithdrawalTool,
  SolanaTradeDelegatedDriftVaultTool,
  SolanaTradeDriftPerpAccountTool,
  SolanaUpdateDriftVaultDelegateTool,
  SolanaUpdateDriftVaultTool,
  SolanaWithdrawFromDriftAccountTool,
  SolanaWithdrawFromDriftVaultTool,
  SolanaDriftLendAndBorrowAPYTool,
  SolanaDriftEntryQuoteOfPerpTradeTool,
  SolanaDriftPerpMarketFundingRateTool,
  SolanaDriftSpotTokenSwapTool,
  SolanaRequestUnstakeFromDriftInsuranceFundTool,
  SolanaStakeToDriftInsuranceFundTool,
  SolanaUnstakeFromDriftInsuranceFundTool,
  SolanaVoltrGetPositionValues,
  SolanaVoltrDepositStrategy,
  SolanaVoltrWithdrawStrategy,
  SolanaGetAssetTool,
  SolanaGetAssetsByAuthorityTool,
  SolanaGetAssetsByCreatorTool,
  SolanaGetInfoTool,
  SolanaAlloraGetPriceInference,
  SolanaAlloraGetAllTopics,
  SolanaAlloraGetInferenceByTopicId,
} from "./index";

export function createSolanaTools(solanaKit: SolanaAgentKit) {
  return [
    new SolanaGetInfoTool(solanaKit),
    new SolanaBalanceTool(solanaKit),
    new SolanaBalanceOtherTool(solanaKit),
    new SolanaTransferTool(solanaKit),
    new SolanaDeployTokenTool(solanaKit),
    new SolanaDeployCollectionTool(solanaKit),
    new SolanaMintNFTTool(solanaKit),
    new SolanaTradeTool(solanaKit),
    new SolanaRequestFundsTool(solanaKit),
    new SolanaRegisterDomainTool(solanaKit),
    new SolanaGetWalletAddressTool(solanaKit),
    new SolanaPumpfunTokenLaunchTool(solanaKit),
    new SolanaCreateImageTool(solanaKit),
    new SolanaLendAssetTool(solanaKit),
    new SolanaLuloLendTool(solanaKit),
    new SolanaLuloWithdrawTool(solanaKit),
    new SolanaTPSCalculatorTool(solanaKit),
    new SolanaStakeTool(solanaKit),
    new SolanaRestakeTool(solanaKit),
    new SolanaFetchPriceTool(solanaKit),
    new SolanaGetDomainTool(solanaKit),
    new SolanaTokenDataTool(solanaKit),
    new SolanaTokenDataByTickerTool(solanaKit),
    new SolanaCompressedAirdropTool(solanaKit),
    new SolanaRaydiumCreateAmmV4(solanaKit),
    new SolanaRaydiumCreateClmm(solanaKit),
    new SolanaRaydiumCreateCpmm(solanaKit),
    new SolanaOpenbookCreateMarket(solanaKit),
    new SolanaManifestCreateMarket(solanaKit),
    new SolanaLimitOrderTool(solanaKit),
    new SolanaBatchOrderTool(solanaKit),
    new SolanaCancelAllOrdersTool(solanaKit),
    new SolanaWithdrawAllTool(solanaKit),
    new SolanaMeteoraCreateDynamicPool(solanaKit),
    new SolanaMeteoraCreateDlmmPool(solanaKit),
    new SolanaClosePosition(solanaKit),
    new SolanaOrcaCreateCLMM(solanaKit),
    new SolanaOrcaCreateSingleSideLiquidityPool(solanaKit),
    new SolanaOrcaFetchPositions(solanaKit),
    new SolanaOrcaOpenCenteredPosition(solanaKit),
    new SolanaOrcaOpenSingleSidedPosition(solanaKit),
    new SolanaPythFetchPrice(solanaKit),
    new SolanaResolveDomainTool(solanaKit),
    new SolanaGetOwnedDomains(solanaKit),
    new SolanaGetOwnedTldDomains(solanaKit),
    new SolanaGetAllTlds(solanaKit),
    new SolanaGetMainDomain(solanaKit),
    new SolanaResolveAllDomainsTool(solanaKit),
    new SolanaCreateGibworkTask(solanaKit),
    new SolanaRockPaperScissorsTool(solanaKit),
    new SolanaTipLinkTool(solanaKit),
    new SolanaListNFTForSaleTool(solanaKit),
    new SolanaCancelNFTListingTool(solanaKit),
    new SolanaCloseEmptyTokenAccounts(solanaKit),
    new SolanaFetchTokenReportSummaryTool(solanaKit),
    new SolanaFetchTokenDetailedReportTool(solanaKit),
    new Solana3LandCreateSingle(solanaKit),
    new Solana3LandCreateCollection(solanaKit),
    new SolanaPerpOpenTradeTool(solanaKit),
    new SolanaPerpCloseTradeTool(solanaKit),
    new SolanaFlashOpenTrade(solanaKit),
    new SolanaFlashCloseTrade(solanaKit),
    new SolanaCreate2by2Multisig(solanaKit),
    new SolanaCreateProposal2by2Multisig(solanaKit),
    new SolanaApproveProposal2by2Multisig(solanaKit),
    new SolanaRejectProposal2by2Multisig(solanaKit),
    new SolanaExecuteProposal2by2Multisig(solanaKit),
    new SolanaDepositTo2by2Multisig(solanaKit),
    new SolanaTransferFrom2by2Multisig(solanaKit),
    new SolanaSendTransactionWithPriorityFee(solanaKit),
    new SolanaHeliusWebhookTool(solanaKit),
    new SolanaGetHeliusWebhookTool(solanaKit),
    new SolanaDeleteHeliusWebhookTool(solanaKit),
    new SolanaParseTransactionHeliusTool(solanaKit),
    new SolanaGetAllAssetsByOwner(solanaKit),
    new Solana3LandCreateSingle(solanaKit),
    new SolanaSendTransactionWithPriorityFee(solanaKit),
    new SolanaHeliusWebhookTool(solanaKit),
    new SolanaGetHeliusWebhookTool(solanaKit),
    new SolanaDeleteHeliusWebhookTool(solanaKit),
    new SolanaCreateDriftUserAccountTool(solanaKit),
    new SolanaCreateDriftVaultTool(solanaKit),
    new SolanaDepositIntoDriftVaultTool(solanaKit),
    new SolanaDepositToDriftUserAccountTool(solanaKit),
    new SolanaDeriveVaultAddressTool(solanaKit),
    new SolanaCheckDriftAccountTool(solanaKit),
    new SolanaDriftUserAccountInfoTool(solanaKit),
    new SolanaRequestDriftWithdrawalTool(solanaKit),
    new SolanaTradeDelegatedDriftVaultTool(solanaKit),
    new SolanaTradeDriftPerpAccountTool(solanaKit),
    new SolanaUpdateDriftVaultDelegateTool(solanaKit),
    new SolanaUpdateDriftVaultTool(solanaKit),
    new SolanaDriftVaultInfoTool(solanaKit),
    new SolanaWithdrawFromDriftAccountTool(solanaKit),
    new SolanaWithdrawFromDriftVaultTool(solanaKit),
    new SolanaDriftSpotTokenSwapTool(solanaKit),
    new SolanaStakeToDriftInsuranceFundTool(solanaKit),
    new SolanaRequestUnstakeFromDriftInsuranceFundTool(solanaKit),
    new SolanaUnstakeFromDriftInsuranceFundTool(solanaKit),
    new SolanaDriftLendAndBorrowAPYTool(solanaKit),
    new SolanaDriftEntryQuoteOfPerpTradeTool(solanaKit),
    new SolanaDriftPerpMarketFundingRateTool(solanaKit),
    new SolanaVoltrGetPositionValues(solanaKit),
    new SolanaVoltrDepositStrategy(solanaKit),
    new SolanaVoltrWithdrawStrategy(solanaKit),
    new SolanaGetAssetTool(solanaKit),
    new SolanaGetAssetsByAuthorityTool(solanaKit),
    new SolanaGetAssetsByCreatorTool(solanaKit),
    new SolanaAlloraGetPriceInference(solanaKit),
    new SolanaAlloraGetAllTopics(solanaKit),
    new SolanaAlloraGetInferenceByTopicId(solanaKit),
  ];
}


================================================
File: src/langchain/3land/create_collection.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";
import { CreateCollectionOptions } from "@3land/listings-sdk/dist/types/implementation/implementationTypes";

export class Solana3LandCreateCollection extends Tool {
  name = "3land_minting_tool";
  description = `Creates an NFT Collection that you can visit on 3.land's website (3.land/collection/{collectionAccount})
  
  Inputs:
  isMainnet (required): defines is the tx takes places in mainnet
  collectionSymbol (required): the symbol of the collection
  collectionName (required): the name of the collection
  collectionDescription (required): the description of the collection
  mainImageUrl (required): the image of the collection
  coverImageUrl (optional): the cover image of the collection
  priorityFeeParam (optional): default value is 50000, if tx doesnt land this param can help it land
  `;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const inputFormat = JSON.parse(input);
      const isMainnet = inputFormat.isMainnet;

      const collectionSymbol = inputFormat?.collectionSymbol;
      const collectionName = inputFormat?.collectionName;
      const collectionDescription = inputFormat?.collectionDescription;
      const mainImageUrl = inputFormat?.mainImageUrl;
      const coverImageUrl = inputFormat?.coverImageUrl;
      const priorityFeeParam = inputFormat?.priorityFeeParam;

      const collectionOpts: CreateCollectionOptions = {
        ...(collectionSymbol && { collectionSymbol }),
        ...(collectionName && { collectionName }),
        ...(collectionDescription && { collectionDescription }),
        ...(mainImageUrl && { mainImageUrl }),
        ...(coverImageUrl && { coverImageUrl }),
      };

      const tx = await this.solanaKit.create3LandCollection(
        collectionOpts,
        !isMainnet,
        priorityFeeParam,
      );
      return JSON.stringify({
        status: "success",
        message: `Created Collection successfully ${tx}`,
        transaction: tx,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/3land/create_single.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";
import { CreateSingleOptions } from "@3land/listings-sdk/dist/types/implementation/implementationTypes";

export class Solana3LandCreateSingle extends Tool {
  name = "3land_minting_tool";
  description = `Creates an NFT and lists it on 3.land's website

  Inputs:
  collectionAccount (optional): represents the account for the nft collection
  itemName (required): the name of the NFT
  sellerFee (required): the fee of the seller
  itemAmount (required): the amount of the NFTs that can be minted
  itemDescription (required): the description of the NFT
  traits (required): the traits of the NFT [{trait_type: string, value: string}]
  price (required): the price of the item, if is 0 the listing will be free
  mainImageUrl (required): the main image of the NFT
  coverImageUrl (optional): the cover image of the NFT
  splHash (optional): the hash of the spl token, if not provided listing will be in $SOL
  poolName (optional): the name of the pool
  isMainnet (required): defines if the tx takes places in mainnet
  withPool (optional): defines if minted edition will be tied to a liquidity pool
  priorityFeeParam (optional): default value is 50000, if tx doesnt land this param can help it land
  `;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const inputFormat = JSON.parse(input);
      const isMainnet = inputFormat.isMainnet;
      const withPool = inputFormat.withPool;
      const poolName = inputFormat.poolName;
      const priorityFeeParam = inputFormat?.priorityFeeParam;

      const collectionAccount = inputFormat.collectionAccount;

      const itemName = inputFormat?.itemName;
      const sellerFee = inputFormat?.sellerFee;
      const itemAmount = inputFormat?.itemAmount;
      const itemSymbol = inputFormat?.itemSymbol;
      const itemDescription = inputFormat?.itemDescription;
      const traits = inputFormat?.traits;
      const price = inputFormat?.price;
      const mainImageUrl = inputFormat?.mainImageUrl;
      const coverImageUrl = inputFormat?.coverImageUrl;
      const splHash = inputFormat?.splHash;

      if (withPool) {
        if (!poolName) {
          throw new Error("poolName is required when withPool is true");
        }
        if (!splHash) {
          throw new Error("splHash is required when withPool is true");
        }
      }

      const createItemOptions: CreateSingleOptions = {
        ...(itemName && { itemName }),
        ...(sellerFee && { sellerFee }),
        ...(itemAmount && { itemAmount }),
        ...(itemSymbol && { itemSymbol }),
        ...(itemDescription && { itemDescription }),
        ...(traits && { traits }),
        ...(price && { price }),
        ...(mainImageUrl && { mainImageUrl }),
        ...(coverImageUrl && { coverImageUrl }),
        ...(splHash && { splHash }),
        ...(poolName && { poolName }),
      };

      if (!collectionAccount) {
        throw new Error("Collection account is required");
      }

      const tx = await this.solanaKit.create3LandNft(
        collectionAccount,
        createItemOptions,
        !isMainnet,
        withPool,
        priorityFeeParam,
      );
      return JSON.stringify({
        status: "success",
        message: `Created listing successfully ${tx}`,
        transaction: tx,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/3land/index.ts
================================================
export * from "./create_single";
export * from "./create_collection";


================================================
File: src/langchain/adrena/close_trade.ts
================================================
import { PublicKey } from "@solana/web3.js";
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaPerpCloseTradeTool extends Tool {
  name = "solana_close_perp_trade";
  description = `This tool can be used to close perpetuals trade ( It uses Adrena Protocol ).

  Inputs ( input is a JSON string ):
  tradeMint: string, eg "J1toso1uCk3RLmjorhTtrVwY9HJ7X8V9yYac6Y7kGCPn", "DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263" etc. (optional)
  price?: number, eg 100 (optional)
  side: string, eg: "long" or "short"`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const parsedInput = JSON.parse(input);

      const tx =
        parsedInput.side === "long"
          ? await this.solanaKit.closePerpTradeLong({
              price: parsedInput.price,
              tradeMint: new PublicKey(parsedInput.tradeMint),
            })
          : await this.solanaKit.closePerpTradeShort({
              price: parsedInput.price,
              tradeMint: new PublicKey(parsedInput.tradeMint),
            });

      return JSON.stringify({
        status: "success",
        message: "Perpetual trade closed successfully",
        transaction: tx,
        price: parsedInput.price,
        tradeMint: new PublicKey(parsedInput.tradeMint),
        side: parsedInput.side,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/adrena/index.ts
================================================
export * from "./open_trade";
export * from "./close_trade";


================================================
File: src/langchain/adrena/open_trade.ts
================================================
import { PublicKey } from "@solana/web3.js";
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaPerpOpenTradeTool extends Tool {
  name = "solana_open_perp_trade";
  description = `This tool can be used to open perpetuals trade ( It uses Adrena Protocol ).

  Inputs ( input is a JSON string ):
  collateralAmount: number, eg 1 or 0.01 (required)
  collateralMint: string, eg "J1toso1uCk3RLmjorhTtrVwY9HJ7X8V9yYac6Y7kGCPn" or "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v" etc. (optional)
  tradeMint: string, eg "J1toso1uCk3RLmjorhTtrVwY9HJ7X8V9yYac6Y7kGCPn", "DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263" etc. (optional)
  leverage: number, eg 50000 = x5, 100000 = x10, 1000000 = x100 (optional)
  price?: number, eg 100 (optional)
  slippage?: number, eg 0.3 (optional)
  side: string, eg: "long" or "short"`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const parsedInput = JSON.parse(input);

      const tx =
        parsedInput.side === "long"
          ? await this.solanaKit.openPerpTradeLong({
              price: parsedInput.price,
              collateralAmount: parsedInput.collateralAmount,
              collateralMint: new PublicKey(parsedInput.collateralMint),
              leverage: parsedInput.leverage,
              tradeMint: new PublicKey(parsedInput.tradeMint),
              slippage: parsedInput.slippage,
            })
          : await this.solanaKit.openPerpTradeLong({
              price: parsedInput.price,
              collateralAmount: parsedInput.collateralAmount,
              collateralMint: new PublicKey(parsedInput.collateralMint),
              leverage: parsedInput.leverage,
              tradeMint: new PublicKey(parsedInput.tradeMint),
              slippage: parsedInput.slippage,
            });

      return JSON.stringify({
        status: "success",
        message: "Perpetual trade opened successfully",
        transaction: tx,
        price: parsedInput.price,
        collateralAmount: parsedInput.collateralAmount,
        collateralMint: new PublicKey(parsedInput.collateralMint),
        leverage: parsedInput.leverage,
        tradeMint: new PublicKey(parsedInput.tradeMint),
        slippage: parsedInput.slippage,
        side: parsedInput.side,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/agent/create_image.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";
import { create_image } from "../../tools/agent";

export class SolanaCreateImageTool extends Tool {
  name = "solana_create_image";
  description =
    "Create an image using OpenAI's DALL-E. Input should be a string prompt for the image.";

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  private validateInput(input: string): void {
    if (typeof input !== "string" || input.trim().length === 0) {
      throw new Error("Input must be a non-empty string prompt");
    }
  }

  protected async _call(input: string): Promise<string> {
    try {
      this.validateInput(input);
      const result = await create_image(this.solanaKit, input.trim());

      return JSON.stringify({
        status: "success",
        message: "Image created successfully",
        ...result,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/agent/get_info.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";
import { get_info } from "../../tools/agent";

export class SolanaGetInfoTool extends Tool {
  name = "solana_get_info";
  description =
    "Get detailed and latest information about any topic using Perplexity AI. Input should be a question or topic to get information about.";

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  private validateInput(input: string): void {
    if (typeof input !== "string" || input.trim().length === 0) {
      throw new Error("Input must be a non-empty string question");
    }
  }

  protected async _call(input: string): Promise<string> {
    try {
      this.validateInput(input);
      const result = await get_info(this.solanaKit, input.trim());

      return JSON.stringify({
        status: "success",
        message: "Information retrieved successfully",
        content: result,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/agent/index.ts
================================================
export * from "./create_image";
export * from "./wallet_address";
export * from "./get_info";


================================================
File: src/langchain/agent/wallet_address.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaGetWalletAddressTool extends Tool {
  name = "solana_get_wallet_address";
  description = `Get the wallet address of the agent`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  async _call(_input: string): Promise<string> {
    return this.solanaKit.wallet_address.toString();
  }
}


================================================
File: src/langchain/alldomains/get_all_tld.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaGetAllTlds extends Tool {
  name = "solana_get_all_tlds";
  description = `Get all active top-level domains (TLDs) in the AllDomains Name Service`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  async _call(): Promise<string> {
    try {
      const tlds = await this.solanaKit.getAllDomainsTLDs();

      return JSON.stringify({
        status: "success",
        message: "TLDs fetched successfully",
        tlds,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "FETCH_TLDS_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/alldomains/index.ts
================================================
export * from "./resolve_all_domains";
export * from "./owned_domains";
export * from "./tld_domains";
export * from "./get_all_tld";


================================================
File: src/langchain/alldomains/owned_domains.ts
================================================
import { PublicKey } from "@solana/web3.js";
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaGetOwnedDomains extends Tool {
  name = "solana_get_owned_domains";
  description = `Get all domains owned by a specific wallet address.

  Inputs:
  owner: string, eg "4Be9CvxqHW6BYiRAxW9Q3xu1ycTMWaL5z8NX4HR3ha7t" (required)`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  async _call(input: string): Promise<string> {
    try {
      const ownerPubkey = new PublicKey(input.trim());
      const domains = await this.solanaKit.getOwnedAllDomains(ownerPubkey);

      return JSON.stringify({
        status: "success",
        message: "Owned domains fetched successfully",
        domains,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "FETCH_OWNED_DOMAINS_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/alldomains/resolve_all_domains.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaResolveAllDomainsTool extends Tool {
  name = "solana_resolve_all_domains";
  description = `Resolve domain names to a public key for ALL domain types EXCEPT .sol domains.
  Use this for domains like .blink, .bonk, etc.
  DO NOT use this for .sol domains (use solana_resolve_domain instead).

  Input:
  domain: string, eg "mydomain.blink" or "mydomain.bonk" (required)`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  async _call(input: string): Promise<string> {
    try {
      const owner = await this.solanaKit.resolveAllDomains(input);

      if (!owner) {
        return JSON.stringify({
          status: "error",
          message: "Domain not found",
          code: "DOMAIN_NOT_FOUND",
        });
      }

      return JSON.stringify({
        status: "success",
        message: "Domain resolved successfully",
        owner: owner?.toString(),
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "DOMAIN_RESOLUTION_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/alldomains/tld_domains.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaGetOwnedTldDomains extends Tool {
  name = "solana_get_owned_tld_domains";
  description = `Get all domains owned by the agent's wallet for a specific TLD.

  Inputs:
  tld: string, eg "bonk" (required)`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  async _call(input: string): Promise<string> {
    try {
      const domains = await this.solanaKit.getOwnedDomainsForTLD(input);

      return JSON.stringify({
        status: "success",
        message: "TLD domains fetched successfully",
        domains,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "FETCH_TLD_DOMAINS_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/allora/get_all_topics.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";
import { AlloraGetAllTopicsResponse } from "../../index";

export class SolanaAlloraGetAllTopics extends Tool {
  name = "solana_allora_get_all_topics";
  description = `Get all topics from Allora's API
  
    Inputs: None`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  async _call(_: string): Promise<string> {
    try {
      const topics = await this.solanaKit.getAllTopics();

      const response: AlloraGetAllTopicsResponse = {
        status: "success",
        message: "Topics fetched successfully",
        topics,
      };

      return JSON.stringify(response);
    } catch (error: any) {
      const response: AlloraGetAllTopicsResponse = {
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      };
      return JSON.stringify(response);
    }
  }
}


================================================
File: src/langchain/allora/get_inference_by_topic_id.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";
import { AlloraGetInferenceByTopicIdResponse } from "../../types";

export class SolanaAlloraGetInferenceByTopicId extends Tool {
  name = "solana_allora_get_inference_by_topic_id";
  description = `Get the inference for a given topic ID from Allora's API
    Inputs:
    topicId: number as a string, e.g., "42"`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  async _call(input: string): Promise<string> {
    try {
      const topicId = Number(input);

      const inference = await this.solanaKit.getInferenceByTopicId(topicId);

      const response: AlloraGetInferenceByTopicIdResponse = {
        status: "success",
        message: "Inference fetched successfully",
        topicId,
        inference,
      };

      return JSON.stringify(response);
    } catch (error: any) {
      const response: AlloraGetInferenceByTopicIdResponse = {
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      };
      return JSON.stringify(response);
    }
  }
}


================================================
File: src/langchain/allora/get_price_inference.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";
import { AlloraPriceInferenceResponse } from "../../index";
import { PriceInferenceTimeframe } from "@alloralabs/allora-sdk";
import { PriceInferenceToken } from "@alloralabs/allora-sdk";

export class SolanaAlloraGetPriceInference extends Tool {
  name = "solana_allora_get_price_inference";
  description = `Get the price inference for a given token and timeframe from Allora's API
    Inputs (JSON string):
    - tokenSymbol: string, e.g., BTC for bitcoin
    - timeframe: string, e.g., 5m for 5 minutes`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  async _call(input: string): Promise<string> {
    try {
      const parsedInput = JSON.parse(input);
      const { tokenSymbol, timeframe } = parsedInput;

      const priceInference = await this.solanaKit.getPriceInference(
        tokenSymbol as PriceInferenceToken,
        timeframe as PriceInferenceTimeframe,
      );

      const response: AlloraPriceInferenceResponse = {
        status: "success",
        message: "Price inference fetched successfully",
        tokenSymbol,
        timeframe,
        priceInference,
      };

      return JSON.stringify(response);
    } catch (error: any) {
      const response: AlloraPriceInferenceResponse = {
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      };
      return JSON.stringify(response);
    }
  }
}


================================================
File: src/langchain/allora/index.ts
================================================
export * from "./get_price_inference";
export * from "./get_inference_by_topic_id";
export * from "./get_all_topics";


================================================
File: src/langchain/dexscreener/index.ts
================================================
export * from "./token_data_ticker";


================================================
File: src/langchain/dexscreener/token_data_ticker.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaTokenDataByTickerTool extends Tool {
  name = "solana_token_data_by_ticker";
  description = `Get the token data for a given token ticker

  Inputs: ticker is required.
  ticker: string, eg "USDC" (required)`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const ticker = input.trim();
      const tokenData = await this.solanaKit.getTokenDataByTicker(ticker);
      return JSON.stringify({
        status: "success",
        tokenData,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/drift/create_user_account.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaCreateDriftUserAccountTool extends Tool {
  name = "create_drift_user_account";
  description = `Create a new user account with a deposit on Drift protocol.
  
  Inputs (JSON string):
  - amount: number, amount of the token to deposit (required)
  - symbol: string, symbol of the token to deposit (required)`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const parsedInput = JSON.parse(input);
      const res = await this.solanaKit.createDriftUserAccount(
        parsedInput.amount,
        parsedInput.symbol,
      );

      return JSON.stringify({
        status: "success",
        message: `User account created with ${parsedInput.amount} ${parsedInput.symbol} successfully deposited`,
        account: res.account,
        signature: res.txSignature,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "CREATE_DRIFT_USER_ACCOUNT_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/drift/create_vault.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaCreateDriftVaultTool extends Tool {
  name = "create_drift_vault";
  description = `Create a new drift vault delegating the agents address as the owner.
  
  Inputs (JSON string):
  - name: string, unique vault name (min 5 chars)
  - marketName: string, market name in TOKEN-SPOT format
  - redeemPeriod: number, days to wait before funds can be redeemed (min 1)
  - maxTokens: number, maximum tokens vault can accommodate (min 100)
  - minDepositAmount: number, minimum deposit amount
  - managementFee: number, fee percentage for managing funds (max 20)
  - profitShare: number, profit sharing percentage (max 90, default 5)
  - hurdleRate: number, optional hurdle rate
  - permissioned: boolean, whether vault has whitelist`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const parsedInput = JSON.parse(input);
      const tx = await this.solanaKit.createDriftVault(parsedInput);

      return JSON.stringify({
        status: "success",
        message: "Drift vault created successfully",
        vaultName: parsedInput.name,
        signature: tx,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "CREATE_DRIFT_VAULT_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/drift/deposit_into_vault.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaDepositIntoDriftVaultTool extends Tool {
  name = "deposit_into_drift_vault";
  description = `Deposit funds into an existing drift vault.
  
  Inputs (JSON string):
  - vaultAddress: string, address of the vault (required)
  - amount: number, amount to deposit (required)`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const parsedInput = JSON.parse(input);
      const tx = await this.solanaKit.depositIntoDriftVault(
        parsedInput.amount,
        parsedInput.vaultAddress,
      );

      return JSON.stringify({
        status: "success",
        message: "Funds deposited successfully",
        signature: tx,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "DEPOSIT_INTO_VAULT_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/drift/deposit_to_user_account.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaDepositToDriftUserAccountTool extends Tool {
  name = "deposit_to_drift_user_account";
  description = `Deposit funds into your drift user account.
  
  Inputs (JSON string):
  - amount: number, amount to deposit (required)
  - symbol: string, token symbol (required)
  - repay: boolean, whether to repay borrowed funds (optional, default: false)`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const parsedInput = JSON.parse(input);
      const tx = await this.solanaKit.depositToDriftUserAccount(
        parsedInput.amount,
        parsedInput.symbol,
        parsedInput.repay,
      );

      return JSON.stringify({
        status: "success",
        message: "Funds deposited successfully",
        signature: tx,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "DEPOSIT_TO_DRIFT_ACCOUNT_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/drift/derive_vault_address.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaDeriveVaultAddressTool extends Tool {
  name = "derive_drift_vault_address";
  description = `Derive a drift vault address from the vault's name.
  
  Inputs (JSON string):
  - name: string, name of the vault to derive the address of (required)`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const address = await this.solanaKit.deriveDriftVaultAddress(input);

      return JSON.stringify({
        status: "success",
        message: "Vault address derived successfully",
        address,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "DERIVE_VAULT_ADDRESS_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/drift/does_user_have_drift_account.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaCheckDriftAccountTool extends Tool {
  name = "does_user_have_drift_account";
  description = `Check if a user has a Drift account.
  
  Inputs: No inputs required - checks the current user's account`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(_input: string): Promise<string> {
    try {
      const res = await this.solanaKit.doesUserHaveDriftAccount();

      if (!res.hasAccount) {
        return JSON.stringify({
          status: "error",
          message: "You do not have a Drift account",
        });
      }

      return JSON.stringify({
        status: "success",
        message: "Nice! You have a Drift account",
        account: res.account,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "CHECK_DRIFT_ACCOUNT_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/drift/drift_user_account_info.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaDriftUserAccountInfoTool extends Tool {
  name = "drift_user_account_info";
  description = `Get information about your drift account.
  
  Inputs: No inputs required - retrieves current user's account info`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(_input: string): Promise<string> {
    try {
      const accountInfo = await this.solanaKit.driftUserAccountInfo();
      return JSON.stringify({
        status: "success",
        data: accountInfo,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "DRIFT_ACCOUNT_INFO_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/drift/entry_quote_of_perp_trade.ts
================================================
import { Tool } from "langchain/tools";
import type { SolanaAgentKit } from "../../agent";

export class SolanaDriftEntryQuoteOfPerpTradeTool extends Tool {
  name = "drift_entry_quote_of_perp_trade";
  description = `Get an entry quote for a perpetual trade on Drift protocol.
  
  Inputs (JSON string):
  - amount: number, amount to trade (required)
  - symbol: string, market symbol (required)
  - action: "long" | "short", trade direction (required)`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const parsedInput = JSON.parse(input);
      const quote = await this.solanaKit.getEntryQuoteOfPerpTrade(
        parsedInput.amount,
        parsedInput.symbol,
        parsedInput.action,
      );

      return JSON.stringify({
        status: "success",
        message: `Entry quote retrieved for ${parsedInput.action} ${parsedInput.amount} ${parsedInput.symbol}`,
        data: quote,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "ENTRY_QUOTE_OF_PERP_TRADE_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/drift/index.ts
================================================
export * from "./create_user_account";
export * from "./create_vault";
export * from "./deposit_into_vault";
export * from "./deposit_to_user_account";
export * from "./derive_vault_address";
export * from "./does_user_have_drift_account";
export * from "./drift_user_account_info";
export * from "./request_withdrawal";
export * from "./trade_delegated_vault";
export * from "./trade_perp_account";
export * from "./update_drift_vault_delegate";
export * from "./update_vault";
export * from "./vault_info";
export * from "./withdraw_from_account";
export * from "./withdraw_from_vault";
export * from "./perp_market_funding_rate";
export * from "./entry_quote_of_perp_trade";
export * from "./lend_and_borrow_apy";
export * from "./stake_to_insurance_fund";
export * from "./swap_spot_token";
export * from "./unstake_from_insurance_fund";
export * from "./request_unstake_from_insurance_fund";


================================================
File: src/langchain/drift/lend_and_borrow_apy.ts
================================================
import { Tool } from "langchain/tools";
import type { SolanaAgentKit } from "../../agent";

export class SolanaDriftLendAndBorrowAPYTool extends Tool {
  name = "drift_lend_and_borrow_apy";
  description = `Get lending and borrowing APY for a token on Drift protocol.
  
  Inputs (JSON string):
  - symbol: string, token symbol (required)`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const apyInfo = await this.solanaKit.getLendAndBorrowAPY(input);

      return JSON.stringify({
        status: "success",
        message: `APY information retrieved for ${input}`,
        data: apyInfo,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "LEND_AND_BORROW_APY_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/drift/perp_market_funding_rate.ts
================================================
import { Tool } from "langchain/tools";
import type { SolanaAgentKit } from "../../agent";

export class SolanaDriftPerpMarketFundingRateTool extends Tool {
  name = "drift_perp_market_funding_rate";
  description = `Get the funding rate for a perpetual market on Drift protocol.
  
  Inputs (JSON string):
  - symbol: string, market symbol (required)
	- period: year or hour (default: hour)`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const parsedInput = JSON.parse(input);
      const fundingRate = await this.solanaKit.getPerpMarketFundingRate(
        parsedInput.symbol,
        parsedInput.period,
      );

      return JSON.stringify({
        status: "success",
        message: `Funding rate retrieved for ${parsedInput.symbol}`,
        data: fundingRate,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
      });
    }
  }
}


================================================
File: src/langchain/drift/request_unstake_from_insurance_fund.ts
================================================
import { Tool } from "langchain/tools";
import type { SolanaAgentKit } from "../../agent";

export class SolanaRequestUnstakeFromDriftInsuranceFundTool extends Tool {
  name = "request_unstake_from_drift_insurance_fund";
  description = `Request to unstake tokens from Drift Insurance Fund.
  
  Inputs (JSON string):
  - amount: number, amount to unstake (required)
  - symbol: string, token symbol (required)`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const parsedInput = JSON.parse(input);
      const tx = await this.solanaKit.requestUnstakeFromDriftInsuranceFund(
        parsedInput.amount,
        parsedInput.symbol,
      );

      return JSON.stringify({
        status: "success",
        message: `Requested unstake of ${parsedInput.amount} ${parsedInput.symbol} from the Drift Insurance Fund`,
        signature: tx,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "REQUEST_UNSTAKE_FROM_DRIFT_INSURANCE_FUND_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/drift/request_withdrawal.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaRequestDriftWithdrawalTool extends Tool {
  name = "request_withdrawal_from_drift_vault";
  description = `Request a withdrawal from an existing drift vault.
  
  Inputs (JSON string):
  - vaultAddress: string, vault address (required)
  - amount: number, amount of shares to withdraw (required)`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const parsedInput = JSON.parse(input);
      const tx = await this.solanaKit.requestWithdrawalFromDriftVault(
        parsedInput.amount,
        parsedInput.vaultAddress,
      );

      return JSON.stringify({
        status: "success",
        message: "Withdrawal request successful",
        signature: tx,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "REQUEST_DRIFT_WITHDRAWAL_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/drift/stake_to_insurance_fund.ts
================================================
import { Tool } from "langchain/tools";
import type { SolanaAgentKit } from "../../agent";

export class SolanaStakeToDriftInsuranceFundTool extends Tool {
  name = "stake_to_drift_insurance_fund";
  description = `Stake a token to Drift Insurance Fund.
  
  Inputs (JSON string):
  - amount: number, amount to stake (required)
  - symbol: string, token symbol (required)`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const parsedInput = JSON.parse(input);
      const tx = await this.solanaKit.stakeToDriftInsuranceFund(
        parsedInput.amount,
        parsedInput.symbol,
      );

      return JSON.stringify({
        status: "success",
        message: `Staked ${parsedInput.amount} ${parsedInput.symbol} to the Drift Insurance Fund`,
        signature: tx,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "STAKE_TO_DRIFT_INSURANCE_FUND_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/drift/swap_spot_token.ts
================================================
import { Tool } from "langchain/tools";
import type { SolanaAgentKit } from "../../agent";

export class SolanaDriftSpotTokenSwapTool extends Tool {
  name = "drift_spot_token_swap";
  description = `Swap spot tokens on Drift protocol.
  
  Inputs (JSON string):
  - fromSymbol: string, symbol of token to swap from (required)
  - toSymbol: string, symbol of token to swap to (required)
  - fromAmount: number, amount to swap from (optional) required if toAmount is not provided
  - toAmount: number, amount to swap to (optional) required if fromAmount is not provided
  - slippage: number, slippage tolerance in percentage (optional)`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const parsedInput = JSON.parse(input);
      const tx = await this.solanaKit.driftSpotTokenSwap(parsedInput);

      return JSON.stringify({
        status: "success",
        message: `Swapped ${parsedInput.fromAmount} ${parsedInput.fromSymbol} for ${parsedInput.toSymbol}`,
        signature: tx,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "DRIFT_SPOT_TOKEN_SWAP_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/drift/trade_delegated_vault.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaTradeDelegatedDriftVaultTool extends Tool {
  name = "trade_delegated_drift_vault";
  description = `Carry out trades in a Drift vault.
  
  Inputs (JSON string):
  - vaultAddress: string, address of the Drift vault
  - amount: number, amount to trade
  - symbol: string, symbol of the token to trade
  - action: "long" | "short", trade direction
  - type: "market" | "limit", order type
  - price: number, optional limit price`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const parsedInput = JSON.parse(input);
      const tx = await this.solanaKit.tradeUsingDelegatedDriftVault(
        parsedInput.vaultAddress,
        parsedInput.amount,
        parsedInput.symbol,
        parsedInput.action,
        parsedInput.type,
        parsedInput.price,
      );

      return JSON.stringify({
        status: "success",
        message:
          parsedInput.type === "limit"
            ? "Order placed successfully"
            : "Trade successful",
        transactionId: tx,
        ...parsedInput,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "TRADE_DRIFT_VAULT_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/drift/trade_perp_account.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaTradeDriftPerpAccountTool extends Tool {
  name = "trade_drift_perp_account";
  description = `Trade a perpetual account on Drift protocol.
  
  Inputs (JSON string):
  - amount: number, amount to trade (required)
  - symbol: string, token symbol (required)
  - action: "long" | "short", trade direction (required)
  - type: "market" | "limit", order type (required)
  - price: number, required for limit orders`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const parsedInput = JSON.parse(input);
      const signature = await this.solanaKit.tradeUsingDriftPerpAccount(
        parsedInput.amount,
        parsedInput.symbol,
        parsedInput.action,
        parsedInput.type,
        parsedInput.price,
      );

      return JSON.stringify({
        status: "success",
        signature,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "TRADE_PERP_ACCOUNT_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/drift/unstake_from_insurance_fund.ts
================================================
import { Tool } from "langchain/tools";
import type { SolanaAgentKit } from "../../agent";

export class SolanaUnstakeFromDriftInsuranceFundTool extends Tool {
  name = "unstake_from_drift_insurance_fund";
  description = `Unstake tokens from Drift Insurance Fund after request period has elapsed.
  
  Inputs (JSON string):
  - symbol: string, token symbol (required)`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const tx = await this.solanaKit.unstakeFromDriftInsuranceFund(input);

      return JSON.stringify({
        status: "success",
        message: `Unstaked ${input} from the Drift Insurance Fund`,
        signature: tx,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNSTAKE_FROM_DRIFT_INSURANCE_FUND_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/drift/update_drift_vault_delegate.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaUpdateDriftVaultDelegateTool extends Tool {
  name = "update_drift_vault_delegate";
  description = `Update the delegate of a drift vault.
  
  Inputs (JSON string):
  - vaultAddress: string, address of the vault (required)
  - newDelegate: string, address of the new delegate (required)`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const parsedInput = JSON.parse(input);
      const tx = await this.solanaKit.updateDriftVaultDelegate(
        parsedInput.vaultAddress,
        parsedInput.newDelegate,
      );

      return JSON.stringify({
        status: "success",
        message: "Vault delegate updated successfully",
        signature: tx,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UPDATE_DRIFT_VAULT_DELEGATE_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/drift/update_vault.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaUpdateDriftVaultTool extends Tool {
  name = "update_drift_vault";
  description = `Update an existing drift vault with new settings.
  
  Inputs (JSON string):
  - vaultAddress: string, vault address (required)
  - redeemPeriod: number, days until redemption (optional)
  - maxTokens: number, maximum tokens allowed (optional)
  - minDepositAmount: number, minimum deposit amount (optional)
  - managementFee: number, management fee percentage (optional)
  - profitShare: number, profit sharing percentage (optional)
  - hurdleRate: number, hurdle rate (optional)
  - permissioned: boolean, whitelist requirement (optional)`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const parsedInput = JSON.parse(input);
      const tx = await this.solanaKit.updateDriftVault(
        parsedInput.vaultAddress,
        // @ts-expect-error - type mismatch
        {
          hurdleRate: parsedInput.hurdleRate,
          maxTokens: parsedInput.maxTokens,
          minDepositAmount: parsedInput.minDepositAmount,
          profitShare: parsedInput.profitShare,
          managementFee: parsedInput.managementFee,
          permissioned: parsedInput.permissioned,
          redeemPeriod: parsedInput.redeemPeriod,
        },
      );

      return JSON.stringify({
        status: "success",
        message: "Drift vault parameters updated successfully",
        signature: tx,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UPDATE_DRIFT_VAULT_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/drift/vault_info.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaDriftVaultInfoTool extends Tool {
  name = "drift_vault_info";
  description = `Get information about a drift vault.
  
  Inputs (JSON string):
  - vaultNameOrAddress: string, name or address of the vault (required)`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const vaultInfo = await this.solanaKit.getDriftVaultInfo(input);

      return JSON.stringify({
        status: "success",
        message: "Vault info retrieved successfully",
        data: vaultInfo,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "DRIFT_VAULT_INFO_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/drift/withdraw_from_account.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaWithdrawFromDriftAccountTool extends Tool {
  name = "withdraw_from_drift_account";
  description = `Withdraw or borrow funds from your drift account.
  
  Inputs (JSON string):
  - amount: number, amount to withdraw (required)
  - symbol: string, token symbol (required)
  - isBorrow: boolean, whether to borrow funds instead of withdrawing (optional, default: false)`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const parsedInput = JSON.parse(input);
      const tx = await this.solanaKit.withdrawFromDriftAccount(
        parsedInput.amount,
        parsedInput.symbol,
        parsedInput.isBorrow,
      );

      return JSON.stringify({
        status: "success",
        message: "Funds withdrawn successfully",
        signature: tx,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "WITHDRAW_FROM_DRIFT_ACCOUNT_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/drift/withdraw_from_vault.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaWithdrawFromDriftVaultTool extends Tool {
  name = "withdraw_from_drift_vault";
  description = `Withdraw funds from a vault given the redemption time has elapsed.
  
  Inputs (JSON string):
  - vaultAddress: string, vault address (required)`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const tx = await this.solanaKit.withdrawFromDriftVault(input);

      return JSON.stringify({
        status: "success",
        message: "Withdrawal successful",
        signature: tx,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "WITHDRAW_FROM_DRIFT_VAULT_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/flash/flash_close.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaFlashCloseTrade extends Tool {
  name = "solana_flash_close_trade";
  description = `Close an existing leveraged trading position on Flash.Trade exchange.

  Inputs ( input is a JSON string ):
  token: string, eg "SOL", "BTC", "ETH" (required)
  side: string, eg "long", "short" (required)
  
  Example prompt is Close a 20x leveraged trade for SOL on long side`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const parsedInput = JSON.parse(input);

      // Validate input parameters
      if (!parsedInput.token) {
        throw new Error("Token is required");
      }
      if (!["SOL", "BTC", "ETH"].includes(parsedInput.token)) {
        throw new Error('Token must be one of ["SOL", "BTC", "ETH"]');
      }
      if (!["long", "short"].includes(parsedInput.side)) {
        throw new Error('Side must be either "long" or "short"');
      }

      const tx = await this.solanaKit.flashCloseTrade({
        token: parsedInput.token,
        side: parsedInput.side,
      });

      return JSON.stringify({
        status: "success",
        message: "Flash trade position closed successfully",
        transaction: tx,
        token: parsedInput.token,
        side: parsedInput.side,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/flash/flash_open.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";
import { marketTokenMap } from "../../utils/flashUtils";

export class SolanaFlashOpenTrade extends Tool {
  name = "solana_flash_open_trade";
  description = `This tool can be used to open a new leveraged trading position on Flash.Trade exchange.

  Inputs ( input is a JSON string ):
  token: string, eg "SOL", "BTC", "ETH" (required)
  type: string, eg "long", "short" (required) 
  collateral: number, eg 10, 100, 1000 (required) 
  leverage: number, eg 5, 10, 20 (required)
  
  Example prompt is Open a 20x leveraged trade for SOL on long side using flash trade with 500 USD as collateral`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const parsedInput = JSON.parse(input);

      // Validate input parameters
      if (!parsedInput.token) {
        throw new Error("Token is required, received: " + parsedInput.token);
      }
      if (!Object.keys(marketTokenMap).includes(parsedInput.token)) {
        throw new Error(
          "Token must be one of " +
            Object.keys(marketTokenMap).join(", ") +
            ", received: " +
            parsedInput.token +
            "\n" +
            "Please check https://beast.flash.trade/ for the list of supported tokens",
        );
      }
      if (!["long", "short"].includes(parsedInput.type)) {
        throw new Error(
          'Type must be either "long" or "short", received: ' +
            parsedInput.type,
        );
      }
      if (!parsedInput.collateral || parsedInput.collateral <= 0) {
        throw new Error(
          "Collateral amount must be positive, received: " +
            parsedInput.collateral,
        );
      }
      if (!parsedInput.leverage || parsedInput.leverage <= 0) {
        throw new Error(
          "Leverage must be positive, received: " + parsedInput.leverage,
        );
      }

      const tx = await this.solanaKit.flashOpenTrade({
        token: parsedInput.token,
        side: parsedInput.type,
        collateralUsd: parsedInput.collateral,
        leverage: parsedInput.leverage,
      });

      return JSON.stringify({
        status: "success",
        message: "Flash trade position opened successfully",
        transaction: tx,
        token: parsedInput.token,
        side: parsedInput.type,
        collateral: parsedInput.collateral,
        leverage: parsedInput.leverage,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/flash/index.ts
================================================
export * from "./flash_open";
export * from "./flash_close";


================================================
File: src/langchain/gibwork/create_task.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";
import { GibworkCreateTaskReponse } from "../../index";

export class SolanaCreateGibworkTask extends Tool {
  name = "create_gibwork_task";
  description = `Create a task on Gibwork.

  Inputs (input is a JSON string):
  title: string, title of the task (required)
  content: string, description of the task (required)
  requirements: string, requirements to complete the task (required)
  tags: string[], list of tags associated with the task (required)
  payer: string, payer address (optional, defaults to agent wallet)
  tokenMintAddress: string, the mint address of the token, e.g., "JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN" (required)
  amount: number, payment amount (required)
  `;

  constructor(private solanaSdk: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const parsedInput = JSON.parse(input);

      const taskData = await this.solanaSdk.createGibworkTask(
        parsedInput.title,
        parsedInput.content,
        parsedInput.requirements,
        parsedInput.tags,
        parsedInput.tokenMintAddress,
        parsedInput.amount,
        parsedInput.payer,
      );

      const response: GibworkCreateTaskReponse = {
        status: "success",
        taskId: taskData.taskId,
        signature: taskData.signature,
      };

      return JSON.stringify(response);
    } catch (err: any) {
      return JSON.stringify({
        status: "error",
        message: err.message,
        code: err.code || "CREATE_TASK_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/gibwork/index.ts
================================================
export * from "./create_task";


================================================
File: src/langchain/helius/create_webhook.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaHeliusWebhookTool extends Tool {
  name = "create_helius_webhook";
  description = `Creates a Helius Webhook that listens to specified account addresses.
    Inputs (input is a JSON string):
    accountAddresses: string[] | string, 
      e.g. ["BVdNLvyG2DNiWAXBE9qAmc4MTQXymd5Bzfo9xrQSUzVP","Eo2ciguhMLmcTWXELuEQPdu7DWZt67LHXb2rdHZUbot7"]
      or "BVdNLvyG2DNiWAXBE9qAmc4MTQXymd5Bzfo9xrQSUzVP,Eo2ciguhMLmcTWXELuEQPdu7DWZt67LHXb2rdHZUbot7"
    webhookURL: string, e.g. "https://TestServer.test.repl.co/webhooks"`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const parsedInput = JSON.parse(input);
      let accountAddresses: string[] = [];

      if (!parsedInput.accountAddresses) {
        throw new Error('Missing "accountAddresses" property in input JSON.');
      }
      if (Array.isArray(parsedInput.accountAddresses)) {
        accountAddresses = parsedInput.accountAddresses.map((addr: string) =>
          addr.trim(),
        );
      } else if (typeof parsedInput.accountAddresses === "string") {
        accountAddresses = parsedInput.accountAddresses
          .split(",")
          .map((addr: string) => addr.trim());
      } else {
        throw new Error(
          'Invalid type for "accountAddresses". Expected array or comma-separated string.',
        );
      }

      const webhookURL = parsedInput.webhookURL;
      if (!webhookURL) {
        throw new Error(
          'Invalid input. Expected a "webhookURL" property in the JSON.',
        );
      }
      const result = await this.solanaKit.CreateWebhook(
        accountAddresses,
        webhookURL,
      );

      // Return success in JSON
      return JSON.stringify({
        status: "success",
        message: "Helius Webhook created successfully",
        webhookURL: result.webhookURL,
        webhookID: result.webhookID,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/helius/delete_webhook.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaDeleteHeliusWebhookTool extends Tool {
  name = "delete_helius_webhook";
  description = `Deletes a Helius Webhook by its ID.
  Inputs (input is a JSON string):
    webhookID: string, e.g. "1ed4244d-a591-4854-ac31-cc28d40b8255"`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const parsedInput = JSON.parse(input);

      const webhookID = parsedInput.webhookID;
      if (!webhookID || typeof webhookID !== "string") {
        throw new Error(
          'Invalid input. Expected a "webhookID" property in the JSON.',
        );
      }
      const result = await this.solanaKit.deleteWebhook(webhookID);

      return JSON.stringify({
        status: "success",
        message: "Helius Webhook deleted successfully",
        data: result,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/helius/get_all_assets.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";
import { PublicKey } from "@solana/web3.js";

export class SolanaGetAllAssetsByOwner extends Tool {
  name = "solana_get_all_assets_by_owner";
  description = `Get all assets owned by a specific wallet address.
    Inputs:
    - owner: string, the wallet address of the owner, e.g., "4Be9CvxqHW6BYiRAxW9Q3xu1ycTMWaL5z8NX4HR3ha7t" (required)
    - limit: number, the maximum number of assets to retrieve (optional)`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const { owner, limit } = JSON.parse(input);
      const ownerPubkey = new PublicKey(owner);

      const assets = await this.solanaKit.getAllAssetsbyOwner(
        ownerPubkey,
        limit,
      );
      return JSON.stringify({
        status: "success",
        message: "Assets retrieved successfully",
        assets: assets,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/helius/get_webhook.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaGetHeliusWebhookTool extends Tool {
  name = "get_helius_webhook";
  description = `Retrieves a Helius Webhook by its ID.
  Inputs (input is a JSON string):
    webhookID: string, e.g. "1ed4244d-a591-4854-ac31-cc28d40b8255"`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const parsedInput = JSON.parse(input);

      const webhookID = parsedInput.webhookID;
      if (!webhookID || typeof webhookID !== "string") {
        throw new Error(
          'Invalid input. Expected a "webhookID" property in the JSON.',
        );
      }

      const result = await this.solanaKit.getWebhook(webhookID);
      return JSON.stringify({
        status: "success",
        message: "Helius Webhook retrieved successfully",
        wallet: result.wallet,
        webhookURL: result.webhookURL,
        transactionTypes: result.transactionTypes,
        accountAddresses: result.accountAddresses,
        webhookType: result.webhookType,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/helius/index.ts
================================================
export * from "./create_webhook";
export * from "./delete_webhook";
export * from "./get_all_assets";
export * from "./get_webhook";
export * from "./parse_transaction";
export * from "./send_transaction_priority";


================================================
File: src/langchain/helius/parse_transaction.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaParseTransactionHeliusTool extends Tool {
  name = "solana_parse_transaction_helius";
  description = `Parse a Solana transaction using Helius API.
    Inputs:
    - transactionId: string, the ID of the transaction to parse, e.g., "5h3k...9d2k" (required).`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<any> {
    try {
      const transactionId = input.trim();
      const parsedTransaction =
        await this.solanaKit.heliusParseTransactions(transactionId);
      return JSON.stringify({
        status: "success",
        message: "transaction parsed successfully",
        transaction: parsedTransaction,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "NOt able to Parse transaction",
      });
    }
  }
}


================================================
File: src/langchain/helius/send_transaction_priority.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";
import { PublicKey } from "@solana/web3.js";

export class SolanaSendTransactionWithPriorityFee extends Tool {
  name = "solana_send_transaction_with_priority_fee";
  description = `Sends a Solana transaction with a user-defined priority fee.
    **Inputs (JSON-encoded string)**:
    - priorityLevel: string — the priority level ("NONE", "Min", "Low", "Medium", "High", "VeryHigh", or "UnsafeMax")
    - amount: number — the amount of SOL to send
    - to: string — the recipient's wallet address (public key in base58);`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const { priorityLevel, amount, to, splmintAddress } = JSON.parse(input);

      const validPriorityLevels = [
        "NONE",
        "Min",
        "Low",
        "Medium",
        "High",
        "VeryHigh",
        "UnsafeMax",
      ];
      if (!validPriorityLevels.includes(priorityLevel)) {
        throw new Error(
          `Invalid priority level. Must be one of: ${validPriorityLevels.join(", ")}. Received: ${priorityLevel}`,
        );
      }

      if (!amount || !to) {
        throw new Error(
          `Missing required fields. Received: priorityLevel=${priorityLevel}, amount=${amount}, to=${to}`,
        );
      }

      const toPubkey = new PublicKey(to);
      const priorityFeeTx = await this.solanaKit.sendTranctionWithPriority(
        priorityLevel,
        amount,
        toPubkey,
        splmintAddress,
      );

      return JSON.stringify({
        status: "success",
        message: "Transaction sent successfully",
        priorityFeeTx,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/jupiter/fetch_price.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

/**
 * Tool to fetch the price of a token in USDC
 */
export class SolanaFetchPriceTool extends Tool {
  name = "solana_fetch_price";
  description = `Fetch the price of a given token in USDC.

  Inputs:
  - tokenId: string, the mint address of the token, e.g., "JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN"`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  async _call(input: string): Promise<string> {
    try {
      const price = await this.solanaKit.fetchTokenPrice(input.trim());
      return JSON.stringify({
        status: "success",
        tokenId: input.trim(),
        priceInUSDC: price,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/jupiter/index.ts
================================================
export * from "./fetch_price";
export * from "./token_data";
export * from "./trade";
export * from "./stake";


================================================
File: src/langchain/jupiter/stake.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaStakeTool extends Tool {
  name = "solana_stake";
  description = `This tool can be used to stake your SOL (Solana), also called as SOL staking or liquid staking.

  Inputs ( input is a JSON string ):
  amount: number, eg 1 or 0.01 (required)`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const parsedInput = JSON.parse(input) || Number(input);

      const tx = await this.solanaKit.stake(parsedInput.amount);

      return JSON.stringify({
        status: "success",
        message: "Staked successfully",
        transaction: tx,
        amount: parsedInput.amount,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/jupiter/token_data.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaTokenDataTool extends Tool {
  name = "solana_token_data";
  description = `Get the token data for a given token mint address

  Inputs: mintAddress is required.
  mintAddress: string, eg "So11111111111111111111111111111111111111112" (required)`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const parsedInput = input.trim();

      const tokenData = await this.solanaKit.getTokenDataByAddress(parsedInput);

      return JSON.stringify({
        status: "success",
        tokenData,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/jupiter/trade.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";
import { PublicKey } from "@solana/web3.js";

export class SolanaTradeTool extends Tool {
  name = "solana_trade";
  description = `This tool can be used to swap tokens to another token ( It uses Jupiter Exchange ).

  Inputs ( input is a JSON string ):
  outputMint: string, eg "So11111111111111111111111111111111111111112" or "SENDdRQtYMWaQrBroBrJ2Q53fgVuq95CV9UPGEvpCxa" (required)
  inputAmount: number, eg 1 or 0.01 (required)
  inputMint?: string, eg "So11111111111111111111111111111111111111112" (optional)
  slippageBps?: number, eg 100 (optional)`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const parsedInput = JSON.parse(input);

      const tx = await this.solanaKit.trade(
        new PublicKey(parsedInput.outputMint),
        parsedInput.inputAmount,
        parsedInput.inputMint
          ? new PublicKey(parsedInput.inputMint)
          : new PublicKey("So11111111111111111111111111111111111111112"),
        parsedInput.slippageBps,
      );

      return JSON.stringify({
        status: "success",
        message: "Trade executed successfully",
        transaction: tx,
        inputAmount: parsedInput.inputAmount,
        inputToken: parsedInput.inputMint || "SOL",
        outputToken: parsedInput.outputMint,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/lightprotocol/compressed_airdrop.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaCompressedAirdropTool extends Tool {
  name = "solana_compressed_airdrop";
  description = `Airdrop SPL tokens with ZK Compression (also called as airdropping tokens)

  Inputs (input is a JSON string):
  mintAddress: string, the mint address of the token, e.g., "JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN" (required)
  amount: number, the amount of tokens to airdrop per recipient, e.g., 42 (required)
  decimals: number, the decimals of the token, e.g., 6 (required)
  recipients: string[], the recipient addresses, e.g., ["1nc1nerator11111111111111111111111111111111"] (required)
  priorityFeeInLamports: number, the priority fee in lamports. Default is 30_000. (optional)
  shouldLog: boolean, whether to log progress to stdout. Default is false. (optional)`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const parsedInput = JSON.parse(input);

      const txs = await this.solanaKit.sendCompressedAirdrop(
        parsedInput.mintAddress,
        parsedInput.amount,
        parsedInput.decimals,
        parsedInput.recipients,
        parsedInput.priorityFeeInLamports || 30_000,
        parsedInput.shouldLog || false,
      );

      return JSON.stringify({
        status: "success",
        message: `Airdropped ${parsedInput.amount} tokens to ${parsedInput.recipients.length} recipients.`,
        transactionHashes: txs,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/lightprotocol/index.ts
================================================
export * from "./compressed_airdrop";


================================================
File: src/langchain/lulo/index.ts
================================================
export * from "./lend_asset";
export * from "./lulo_lend";
export * from "./lulo_withdraw";


================================================
File: src/langchain/lulo/lend_asset.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaLendAssetTool extends Tool {
  name = "solana_lend_asset";
  description = `Lend idle USDC for yield using Lulo. ( only USDC is supported )

  Inputs (input is a json string):
  amount: number, eg 1, 0.01 (required)`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  async _call(input: string): Promise<string> {
    try {
      const amount = JSON.parse(input).amount || input;

      const tx = await this.solanaKit.lendAssets(amount);

      return JSON.stringify({
        status: "success",
        message: "Asset lent successfully",
        transaction: tx,
        amount,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/lulo/lulo_lend.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaLuloLendTool extends Tool {
  name = "solana_lulo_lend";
  description = `Lend token for yield using Lulo. (support USDC/PYUSD/USDS/USDT/SOL/jitoSOL/bSOL/mSOL/BONK/JUP)
    Inputs:
    mintAddress: string, eg "So11111111111111111111111111111111111111112" (required)
    amount: number, eg 1, 0.01 (required)`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  async _call(input: string): Promise<string> {
    try {
      const parsedInput = JSON.parse(input);
      const mintAddress = parsedInput.mintAddress;
      const amount = parsedInput.amount;

      const tx = await this.solanaKit.luloLend(mintAddress, amount);

      return JSON.stringify({
        status: "success",
        message: "Asset lent successfully",
        transaction: tx,
        amount,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/lulo/lulo_withdraw.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaLuloWithdrawTool extends Tool {
  name = "solana_lulo_withdraw";
  description = `Withdraw token USDC using Lulo. (support USDC/PYUSD/USDS/USDT/SOL/jitoSOL/bSOL/mSOL/BONK/JUP)
    Inputs (input is a json string):
    mintAddress: string, eg "So11111111111111111111111111111111111111112" (required)
    amount: number, eg 1, 0.01 (required)`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  async _call(input: string): Promise<string> {
    try {
      const parsedInput = JSON.parse(input);
      const mintAddress = parsedInput.mintAddress;
      const amount = parsedInput.amount;

      const tx = await this.solanaKit.luloWithdraw(mintAddress, amount);

      return JSON.stringify({
        status: "success",
        message: "Asset withdraw successfully",
        transaction: tx,
        amount,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/manifest/batch_order.ts
================================================
import { OrderParams } from "../../types";
import { generateOrdersfromPattern } from "../../tools/manifest";
import { PublicKey } from "@solana/web3.js";
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaBatchOrderTool extends Tool {
  name = "solana_batch_order";
  description = `Places multiple limit orders in one transaction using Manifest. Submit orders either as a list or pattern:

  1. List format:
  {
    "marketId": "ENhU8LsaR7vDD2G1CsWcsuSGNrih9Cv5WZEk7q9kPapQ",
    "orders": [
      { "quantity": 1, "side": "Buy", "price": 200 },
      { "quantity": 0.5, "side": "Sell", "price": 205 }
    ]
  }

  2. Pattern format:
  {
    "marketId": "ENhU8LsaR7vDD2G1CsWcsuSGNrih9Cv5WZEk7q9kPapQ",
    "pattern": {
      "side": "Buy",
      "totalQuantity": 100,
      "priceRange": { "max": 1.0 },
      "spacing": { "type": "percentage", "value": 1 },
      "numberOfOrders": 5
    }
  }

  Examples:
  - "Place 5 buy orders totaling 100 tokens, 1% apart below $1"
  - "Create 3 sell orders of 10 tokens each between $50-$55"
  - "Place buy orders worth 50 tokens, $0.10 spacing from $0.80"

  Important: All orders must be in one transaction. Combine buy and sell orders into a single pattern or list. Never break the orders down to individual buy or sell orders.`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const parsedInput = JSON.parse(input);
      let ordersToPlace: OrderParams[] = [];

      if (!parsedInput.marketId) {
        throw new Error("Market ID is required");
      }

      if (parsedInput.pattern) {
        ordersToPlace = generateOrdersfromPattern(parsedInput.pattern);
      } else if (Array.isArray(parsedInput.orders)) {
        ordersToPlace = parsedInput.orders;
      } else {
        throw new Error("Either pattern or orders array is required");
      }

      if (ordersToPlace.length === 0) {
        throw new Error("No orders generated or provided");
      }

      ordersToPlace.forEach((order: OrderParams, index: number) => {
        if (!order.quantity || !order.side || !order.price) {
          throw new Error(
            `Invalid order at index ${index}: quantity, side, and price are required`,
          );
        }
        if (order.side !== "Buy" && order.side !== "Sell") {
          throw new Error(
            `Invalid side at index ${index}: must be "Buy" or "Sell"`,
          );
        }
      });

      const tx = await this.solanaKit.batchOrder(
        new PublicKey(parsedInput.marketId),
        parsedInput.orders,
      );

      return JSON.stringify({
        status: "success",
        message: "Batch order executed successfully",
        transaction: tx,
        marketId: parsedInput.marketId,
        orders: parsedInput.orders,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/manifest/cancel_orders.ts
================================================
import { PublicKey } from "@solana/web3.js";
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaCancelAllOrdersTool extends Tool {
  name = "solana_cancel_all_orders";
  description = `This tool can be used to cancel all orders from a Manifest market.

  Input ( input is a JSON string ):
  marketId: string, eg "ENhU8LsaR7vDD2G1CsWcsuSGNrih9Cv5WZEk7q9kPapQ" for SOL/USDC (required)`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const marketId = new PublicKey(input.trim());
      const tx = await this.solanaKit.cancelAllOrders(marketId);

      return JSON.stringify({
        status: "success",
        message: "Cancel orders successfully",
        transaction: tx,
        marketId,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/manifest/index.ts
================================================
export * from "./manifest_market";
export * from "./batch_order";
export * from "./cancel_orders";
export * from "./limit_order";
export * from "./withdraw";


================================================
File: src/langchain/manifest/limit_order.ts
================================================
import { PublicKey } from "@solana/web3.js";
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaLimitOrderTool extends Tool {
  name = "solana_limit_order";
  description = `This tool can be used to place limit orders using Manifest.

  Do not allow users to place multiple orders with this instruction, use solana_batch_order instead.

  Inputs ( input is a JSON string ):
  marketId: PublicKey, eg "ENhU8LsaR7vDD2G1CsWcsuSGNrih9Cv5WZEk7q9kPapQ" for SOL/USDC (required)
  quantity: number, eg 1 or 0.01 (required)
  side: string, eg "Buy" or "Sell" (required)
  price: number, in tokens eg 200 for SOL/USDC (required)`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const parsedInput = JSON.parse(input);

      const tx = await this.solanaKit.limitOrder(
        new PublicKey(parsedInput.marketId),
        parsedInput.quantity,
        parsedInput.side,
        parsedInput.price,
      );

      return JSON.stringify({
        status: "success",
        message: "Trade executed successfully",
        transaction: tx,
        marketId: parsedInput.marketId,
        quantity: parsedInput.quantity,
        side: parsedInput.side,
        price: parsedInput.price,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/manifest/manifest_market.ts
================================================
import { PublicKey } from "@solana/web3.js";
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaManifestCreateMarket extends Tool {
  name = "solana_manifest_create_market";
  description = `Manifest market

  Inputs (input is a json string):
  baseMint: string (required)
  quoteMint: string (required)
  `;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  async _call(input: string): Promise<string> {
    try {
      const inputFormat = JSON.parse(input);

      const tx = await this.solanaKit.manifestCreateMarket(
        new PublicKey(inputFormat.baseMint),
        new PublicKey(inputFormat.quoteMint),
      );

      return JSON.stringify({
        status: "success",
        message: "Create manifest market successfully",
        transaction: tx[0],
        marketId: tx[1],
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/manifest/withdraw.ts
================================================
import { PublicKey } from "@solana/web3.js";
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaWithdrawAllTool extends Tool {
  name = "solana_withdraw_all";
  description = `This tool can be used to withdraw all funds from a Manifest market.

  Input ( input is a JSON string ):
  marketId: string, eg "ENhU8LsaR7vDD2G1CsWcsuSGNrih9Cv5WZEk7q9kPapQ" for SOL/USDC (required)`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const marketId = new PublicKey(input.trim());
      const tx = await this.solanaKit.withdrawAll(marketId);

      return JSON.stringify({
        status: "success",
        message: "Withdrew successfully",
        transaction: tx,
        marketId,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/metaplex/deploy_collection.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaDeployCollectionTool extends Tool {
  name = "solana_deploy_collection";
  description = `Deploy a new NFT collection on Solana blockchain.

  Inputs (input is a JSON string):
  name: string, eg "My Collection" (required)
  uri: string, eg "https://example.com/collection.json" (required)
  royaltyBasisPoints?: number, eg 500 for 5% (optional)`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const parsedInput = JSON.parse(input);

      const result = await this.solanaKit.deployCollection(parsedInput);

      return JSON.stringify({
        status: "success",
        message: "Collection deployed successfully",
        collectionAddress: result.collectionAddress.toString(),
        name: parsedInput.name,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/metaplex/deploy_token.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaDeployTokenTool extends Tool {
  name = "solana_deploy_token";
  description = `Deploy a new token on Solana blockchain.

  Inputs (input is a JSON string):
  name: string, eg "My Token" (required)
  uri: string, eg "https://example.com/token.json" (required)
  symbol: string, eg "MTK" (required)
  decimals?: number, eg 9 (optional, defaults to 9)
  initialSupply?: number, eg 1000000 (optional)`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const parsedInput = JSON.parse(input);

      const result = await this.solanaKit.deployToken(
        parsedInput.name,
        parsedInput.uri,
        parsedInput.symbol,
        parsedInput.decimals,
        parsedInput.initialSupply,
      );

      return JSON.stringify({
        status: "success",
        message: "Token deployed successfully",
        mintAddress: result.mint.toString(),
        decimals: parsedInput.decimals || 9,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/metaplex/get_asset.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaGetAssetTool extends Tool {
  name = "solana_get_asset";
  description = `Fetch asset details for a given asset ID using the Metaplex DAS API.

  Inputs (input is a string):
  eg "8TrvJBRa6Pzb9BDadqroHhWTHxaxK8Ws8r91oZ2jxaVV" (required)`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const result = await this.solanaKit.getAsset(input);

      return JSON.stringify({
        status: "success",
        message: "Asset retrieved successfully",
        result,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/metaplex/get_assets_by_authority.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaGetAssetsByAuthorityTool extends Tool {
  name = "solana_get_assets_by_authority";
  description = `Fetch a list of assets by a specific authority address using the Metaplex DAS API.

  Inputs (input is a JSON string):
  authority: string, eg "mRdta4rc2RtsxEUDYuvKLamMZAdW6qHcwuq866Skxxv" (required)
  sortBy: { sortBy: "created" | "updated" | "recentAction" | "none", sortDirection: "asc" | "desc" } (optional)
  limit: number (optional)
  page: number (optional)
  before: string (optional)
  after: string (optional)`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const parsedInput = JSON.parse(input);

      const result = await this.solanaKit.getAssetsByAuthority(parsedInput);

      return JSON.stringify({
        status: "success",
        message: "Assets retrieved successfully",
        result,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/metaplex/get_assets_by_creator.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaGetAssetsByCreatorTool extends Tool {
  name = "solana_get_assets_by_creator";
  description = `Fetch a list of assets created by a specific address using the Metaplex DAS API.

  Inputs (input is a JSON string):
  creator: string, eg "D3XrkNZz6wx6cofot7Zohsf2KSsu2ArngNk8VqU9cTY3" (required)
  onlyVerified: boolean (optional)
  sortBy: { sortBy: "created" | "updated" | "recentAction" | "none", sortDirection: "asc" | "desc" } (optional)
  limit: number (optional)
  page: number (optional)
  before: string (optional)
  after: string (optional)`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const parsedInput = JSON.parse(input);

      const result = await this.solanaKit.getAssetsByCreator(parsedInput);

      return JSON.stringify({
        status: "success",
        message: "Assets retrieved successfully",
        result,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/metaplex/index.ts
================================================
export * from "./deploy_collection";
export * from "./mint_nft";
export * from "./deploy_token";
export * from "./get_asset";
export * from "./get_assets_by_authority";
export * from "./get_assets_by_creator";


================================================
File: src/langchain/metaplex/mint_nft.ts
================================================
import { PublicKey } from "@solana/web3.js";
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaMintNFTTool extends Tool {
  name = "solana_mint_nft";
  description = `Mint a new NFT in a collection on Solana blockchain.

    Inputs (input is a JSON string):
    collectionMint: string, eg "J1S9H3QjnRtBbbuD4HjPV6RpRhwuk4zKbxsnCHuTgh9w" (required) - The address of the collection to mint into
    name: string, eg "My NFT" (required)
    uri: string, eg "https://example.com/nft.json" (required)
    recipient?: string, eg "9aUn5swQzUTRanaaTwmszxiv89cvFwUCjEBv1vZCoT1u" (optional) - The wallet to receive the NFT, defaults to agent's wallet which is ${this.solanaKit.wallet_address.toString()}`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const parsedInput = JSON.parse(input);

      const result = await this.solanaKit.mintNFT(
        new PublicKey(parsedInput.collectionMint),
        {
          name: parsedInput.name,
          uri: parsedInput.uri,
        },
        parsedInput.recipient
          ? new PublicKey(parsedInput.recipient)
          : this.solanaKit.wallet_address,
      );

      return JSON.stringify({
        status: "success",
        message: "NFT minted successfully",
        mintAddress: result.mint.toString(),
        metadata: {
          name: parsedInput.name,
          symbol: parsedInput.symbol,
          uri: parsedInput.uri,
        },
        recipient: parsedInput.recipient || result.mint.toString(),
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/meteora/index.ts
================================================
export * from "./meteora_dlmm_pool";
export * from "./meteora_dynamic_pool";


================================================
File: src/langchain/meteora/meteora_dlmm_pool.ts
================================================
import { PublicKey } from "@solana/web3.js";
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";
import { BN } from "bn.js";

export class SolanaMeteoraCreateDlmmPool extends Tool {
  name = "meteora_create_dlmm_pool";
  description = `Create a Meteora DLMM Pool. This function doesn't add liquidity.
  
  Inputs (JSON string):
  - tokenAMint: string, token A mint (required).
  - tokenBMint: string, token B mint (required).
  - binStep: number, pool bin step, e.g., 20 (required).
  - initialPrice: number, pool initial price, e.g., 0.25 (required).
  - feeBps: number, trade fee in percentage, e.g. 20 for 0.2% (required).
  - priceRoundingUp: boolean, whether the initial price should be rounded up or not, default is true (optional).
  - activationType: number, pool start trading time indicator. 0 is slot and 1 is timestamp, default is 1 for timestamp (optional).
  - activationPoint: number, pool start trading slot / timestamp, default is null means pool can start trading immediately (optional).
  - hasAlphaVault: boolean, whether the pool supports alpha vault, default is false (optional).
  `;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  async _call(input: string): Promise<string> {
    try {
      interface CreateMeteoraDlmmPoolInput {
        tokenAMint: string;
        tokenBMint: string;
        binStep: number;
        initialPrice: number;
        feeBps: number;
        priceRoundingUp?: boolean;
        activationType?: number;
        activationPoint?: number;
        hasAlphaVault?: boolean;
      }
      const inputFormat: CreateMeteoraDlmmPoolInput = JSON.parse(input);

      const tokenAMint = new PublicKey(inputFormat.tokenAMint);
      const tokenBMint = new PublicKey(inputFormat.tokenBMint);
      const binStep = inputFormat.binStep;
      const initialPrice = inputFormat.initialPrice;
      const feeBps = inputFormat.feeBps;
      const priceRoundingUp = inputFormat.priceRoundingUp ?? true;
      const activationType = inputFormat.activationType ?? 1;
      const activationPoint = inputFormat.activationPoint
        ? new BN(inputFormat.activationPoint)
        : undefined;
      const hasAlphaVault = inputFormat.hasAlphaVault ?? false;

      const txId = await this.solanaKit.meteoraCreateDlmmPool(
        tokenAMint,
        tokenBMint,
        binStep,
        initialPrice,
        priceRoundingUp,
        feeBps,
        activationType,
        hasAlphaVault,
        activationPoint,
      );

      return JSON.stringify({
        status: "success",
        message: "Meteora DLMM pool created successfully.",
        transaction: txId,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/meteora/meteora_dynamic_pool.ts
================================================
import { PublicKey } from "@solana/web3.js";
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";
import { BN } from "bn.js";
import { MintLayout } from "@solana/spl-token";
import Decimal from "decimal.js";

export class SolanaMeteoraCreateDynamicPool extends Tool {
  name = "meteora_create_dynamic_pool";
  description = `Create a Meteora Dynamic Pool. This function adds liquidity with a constant-product formula.
  
  Inputs (JSON string):
  - tokenAMint: string, token A mint (required).
  - tokenBMint: string, token B mint (required).
  - tokenAAmount: number, token A amount not including decimals, e.g., 1 (required).
  - tokenBAmount: number, token B amount not including decimals, e.g., 0.2 (required).
  - tradeFeeNumerator: number, trade fee numerator, e.g., 2500 for 2.5% (required).
  - activationType: number, pool start trading time indicator, 0 is slot and 1 is timestamp, default is 1 for timestamp (optional).
  - activationPoint: number, pool start trading slot / timestamp, default is null means pool can start trading immediately (optional).
  - hasAlphaVault: boolean, whether the pool supports alpha vault, default is false (optional).
  `;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  async _call(input: string): Promise<string> {
    try {
      interface CreateMeteoraDynamicAmmPoolInput {
        tokenAMint: string;
        tokenBMint: string;
        tokenAAmount: number;
        tokenBAmount: number;
        tradeFeeNumerator: number;
        activationType?: number;
        activationPoint?: number;
        hasAlphaVault?: boolean;
      }
      const inputFormat: CreateMeteoraDynamicAmmPoolInput = JSON.parse(input);

      const tokenAMint = new PublicKey(inputFormat.tokenAMint);
      const tokenBMint = new PublicKey(inputFormat.tokenBMint);

      const tokenAMintInfo =
        await this.solanaKit.connection.getAccountInfo(tokenAMint);
      const tokenBMintInfo =
        await this.solanaKit.connection.getAccountInfo(tokenBMint);

      if (!tokenAMintInfo) {
        return JSON.stringify({
          status: "error",
          message: "failed to fetch tokenAMint info",
          code: "UNKNOWN_ERROR",
        });
      }
      if (!tokenBMintInfo) {
        return JSON.stringify({
          status: "error",
          message: "failed to fetch tokenBMint info",
          code: "UNKNOWN_ERROR",
        });
      }

      const tokenADecimals = MintLayout.decode(tokenAMintInfo.data).decimals;
      const tokenBDecimals = MintLayout.decode(tokenBMintInfo.data).decimals;

      const tokenAAmount = new BN(
        new Decimal(inputFormat.tokenAAmount)
          .mul(10 ** tokenADecimals)
          .toString(),
      );
      const tokenBAmount = new BN(
        new Decimal(inputFormat.tokenBAmount)
          .mul(10 ** tokenBDecimals)
          .toString(),
      );

      const tradeFeeNumerator = new BN(
        inputFormat.tradeFeeNumerator.toString(),
      ).toNumber();
      const activationType = inputFormat.activationType ?? 1;
      const activationPoint = inputFormat.activationPoint
        ? new BN(inputFormat.activationPoint)
        : null;
      const hasAlphaVault = inputFormat.hasAlphaVault ?? false;

      const txId = await this.solanaKit.meteoraCreateDynamicPool(
        tokenAMint,
        tokenBMint,
        tokenAAmount,
        tokenBAmount,
        tradeFeeNumerator,
        activationPoint,
        hasAlphaVault,
        activationType,
      );

      return JSON.stringify({
        status: "success",
        message: "Meteora Dynamic pool created successfully.",
        transaction: txId,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/openbook/index.ts
================================================
export * from "./openbook_market";


================================================
File: src/langchain/openbook/openbook_market.ts
================================================
import { PublicKey } from "@solana/web3.js";
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaOpenbookCreateMarket extends Tool {
  name = "solana_openbook_create_market";
  description = `Openbook marketId, required for ammv4

  Inputs (input is a json string):
  baseMint: string (required)
  quoteMint: string (required)
  lotSize: number (required)
  tickSize: number (required)
  `;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  async _call(input: string): Promise<string> {
    try {
      const inputFormat = JSON.parse(input);

      const tx = await this.solanaKit.openbookCreateMarket(
        new PublicKey(inputFormat.baseMint),
        new PublicKey(inputFormat.quoteMint),

        inputFormat.lotSize,
        inputFormat.tickSize,
      );

      return JSON.stringify({
        status: "success",
        message: "Openbook market created successfully",
        transaction: tx,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/orca/index.ts
================================================
export * from "./orca_clmm";
export * from "./orca_single_sided_pool";
export * from "./orca_position";
export * from "./orca_fetch_positions";
export * from "./orca_centered_position";
export * from "./orca_single_sided_position";


================================================
File: src/langchain/orca/orca_centered_position.ts
================================================
import { PublicKey } from "@solana/web3.js";
import { Decimal } from "decimal.js";
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaOrcaOpenCenteredPosition extends Tool {
  name = "orca_open_centered_position_with_liquidity";
  description = `Add liquidity to a CLMM by opening a centered position in an Orca Whirlpool, the most efficient liquidity pool on Solana.

  Inputs (JSON string):
  - whirlpoolAddress: string, address of the Orca Whirlpool (required).
  - priceOffsetBps: number, bps offset (one side) from the current pool price, e.g., 500 for 5% (required).
  - inputTokenMint: string, mint address of the deposit token (required).
  - inputAmount: number, amount of the deposit token, e.g., 100.0 (required).`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  async _call(input: string): Promise<string> {
    try {
      const inputFormat = JSON.parse(input);
      const whirlpoolAddress = new PublicKey(inputFormat.whirlpoolAddress);
      const priceOffsetBps = parseInt(inputFormat.priceOffsetBps, 10);
      const inputTokenMint = new PublicKey(inputFormat.inputTokenMint);
      const inputAmount = new Decimal(inputFormat.inputAmount);

      if (priceOffsetBps < 0) {
        throw new Error(
          "Invalid distanceFromCurrentPriceBps. It must be equal or greater than 0.",
        );
      }

      const txId = await this.solanaKit.orcaOpenCenteredPositionWithLiquidity(
        whirlpoolAddress,
        priceOffsetBps,
        inputTokenMint,
        inputAmount,
      );

      return JSON.stringify({
        status: "success",
        message: "Centered liquidity position opened successfully.",
        transaction: txId,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/orca/orca_clmm.ts
================================================
import { PublicKey } from "@solana/web3.js";
import { Decimal } from "decimal.js";
import { FEE_TIERS } from "../../tools/orca";
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaOrcaCreateCLMM extends Tool {
  name = "orca_create_clmm";
  description = `Create a Concentrated Liquidity Market Maker (CLMM) pool on Orca, the most efficient and capital-optimized CLMM on Solana. This function initializes a CLMM pool but does not add liquidity. You can add liquidity later using a centered position or a single-sided position.

  Inputs (JSON string):
  - mintDeploy: string, the mint of the token you want to deploy (required).
  - mintPair: string, The mint of the token you want to pair the deployed mint with (required).
  - initialPrice: number, initial price of mintA in terms of mintB, e.g., 0.001 (required).
  - feeTier: number, fee tier in bps. Options: 1, 2, 4, 5, 16, 30, 65, 100, 200 (required).`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  async _call(input: string): Promise<string> {
    try {
      const inputFormat = JSON.parse(input);
      const mintA = new PublicKey(inputFormat.mintDeploy);
      const mintB = new PublicKey(inputFormat.mintPair);
      const initialPrice = new Decimal(inputFormat.initialPrice);
      const feeTier = inputFormat.feeTier;

      if (!feeTier || !(feeTier in FEE_TIERS)) {
        throw new Error(
          `Invalid feeTier. Available options: ${Object.keys(FEE_TIERS).join(
            ", ",
          )}`,
        );
      }

      const txId = await this.solanaKit.orcaCreateCLMM(
        mintA,
        mintB,
        initialPrice,
        feeTier,
      );

      return JSON.stringify({
        status: "success",
        message:
          "CLMM pool created successfully. Note: No liquidity was added.",
        transaction: txId,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/orca/orca_fetch_positions.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaOrcaFetchPositions extends Tool {
  name = "orca_fetch_positions";
  description = `Fetch all the liquidity positions in an Orca Whirlpool by owner. Returns an object with positiont mint addresses as keys and position status details as values.`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  async _call(): Promise<string> {
    try {
      const txId = await this.solanaKit.orcaFetchPositions();

      return JSON.stringify({
        status: "success",
        message: "Liquidity positions fetched.",
        transaction: txId,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/orca/orca_position.ts
================================================
import { PublicKey } from "@solana/web3.js";
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaClosePosition extends Tool {
  name = "orca_close_position";
  description = `Closes an existing liquidity position in an Orca Whirlpool. This function fetches the position
  details using the provided mint address and closes the position with a 1% slippage.

  Inputs (JSON string):
  - positionMintAddress: string, the address of the position mint that represents the liquidity position.`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  async _call(input: string): Promise<string> {
    try {
      const inputFormat = JSON.parse(input);
      const positionMintAddress = new PublicKey(
        inputFormat.positionMintAddress,
      );

      const txId = await this.solanaKit.orcaClosePosition(positionMintAddress);

      return JSON.stringify({
        status: "success",
        message: "Liquidity position closed successfully.",
        transaction: txId,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/orca/orca_single_sided_pool.ts
================================================
import { PublicKey } from "@solana/web3.js";
import { Decimal } from "decimal.js";
import { FEE_TIERS } from "../../tools/orca";
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaOrcaCreateSingleSideLiquidityPool extends Tool {
  name = "orca_create_single_sided_liquidity_pool";
  description = `Create a single-sided liquidity pool on Orca, the most efficient and capital-optimized CLMM platform on Solana.

  This function initializes a single-sided liquidity pool, ideal for community driven project, fair launches, and fundraising. Minimize price impact by setting a narrow price range.

  Inputs (JSON string):
  - depositTokenAmount: number, in units of the deposit token including decimals, e.g., 1000000000 (required).
  - depositTokenMint: string, mint address of the deposit token, e.g., "DepositTokenMintAddress" (required).
  - otherTokenMint: string, mint address of the other token, e.g., "OtherTokenMintAddress" (required).
  - initialPrice: number, initial price of the deposit token in terms of the other token, e.g., 0.001 (required).
  - maxPrice: number, maximum price at which liquidity is added, e.g., 5.0 (required).
  - feeTier: number, fee tier for the pool in bps. Options: 1, 2, 4, 5, 16, 30, 65, 100, 200 (required).`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  async _call(input: string): Promise<string> {
    try {
      const inputFormat = JSON.parse(input);
      const depositTokenAmount = inputFormat.depositTokenAmount;
      const depositTokenMint = new PublicKey(inputFormat.depositTokenMint);
      const otherTokenMint = new PublicKey(inputFormat.otherTokenMint);
      const initialPrice = new Decimal(inputFormat.initialPrice);
      const maxPrice = new Decimal(inputFormat.maxPrice);
      const feeTier = inputFormat.feeTier;

      if (!feeTier || !(feeTier in FEE_TIERS)) {
        throw new Error(
          `Invalid feeTier. Available options: ${Object.keys(FEE_TIERS).join(
            ", ",
          )}`,
        );
      }

      const txId = await this.solanaKit.orcaCreateSingleSidedLiquidityPool(
        depositTokenAmount,
        depositTokenMint,
        otherTokenMint,
        initialPrice,
        maxPrice,
        feeTier,
      );

      return JSON.stringify({
        status: "success",
        message: "Single-sided Whirlpool created successfully",
        transaction: txId,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/orca/orca_single_sided_position.ts
================================================
import { PublicKey } from "@solana/web3.js";
import { Decimal } from "decimal.js";
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaOrcaOpenSingleSidedPosition extends Tool {
  name = "orca_open_single_sided_position";
  description = `Add liquidity to a CLMM by opening a single-sided position in an Orca Whirlpool, the most efficient liquidity pool on Solana.

  Inputs (JSON string):
  - whirlpoolAddress: string, address of the Orca Whirlpool (required).
  - distanceFromCurrentPriceBps: number, distance in basis points from the current price for the position (required).
  - widthBps: number, width of the position in basis points (required).
  - inputTokenMint: string, mint address of the deposit token (required).
  - inputAmount: number, amount of the deposit token, e.g., 100.0 (required).`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  async _call(input: string): Promise<string> {
    try {
      const inputFormat = JSON.parse(input);
      const whirlpoolAddress = new PublicKey(inputFormat.whirlpoolAddress);
      const distanceFromCurrentPriceBps =
        inputFormat.distanceFromCurrentPriceBps;
      const widthBps = inputFormat.widthBps;
      const inputTokenMint = new PublicKey(inputFormat.inputTokenMint);
      const inputAmount = new Decimal(inputFormat.inputAmount);

      if (distanceFromCurrentPriceBps < 0 || widthBps < 0) {
        throw new Error(
          "Invalid distanceFromCurrentPriceBps or width. It must be equal or greater than 0.",
        );
      }

      const txId = await this.solanaKit.orcaOpenSingleSidedPosition(
        whirlpoolAddress,
        distanceFromCurrentPriceBps,
        widthBps,
        inputTokenMint,
        inputAmount,
      );

      return JSON.stringify({
        status: "success",
        message: "Single-sided liquidity position opened successfully.",
        transaction: txId,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/pumpfun/index.ts
================================================
export * from "./launch_pumpfun_token";


================================================
File: src/langchain/pumpfun/launch_pumpfun_token.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaPumpfunTokenLaunchTool extends Tool {
  name = "solana_launch_pumpfun_token";

  description = `This tool can be used to launch a token on Pump.fun,
   do not use this tool for any other purpose, or for creating SPL tokens.
   If the user asks you to chose the parameters, you should generate valid values.
   For generating the image, you can use the solana_create_image tool.

   Inputs:
   tokenName: string, eg "PumpFun Token",
   tokenTicker: string, eg "PUMP",
   description: string, eg "PumpFun Token is a token on the Solana blockchain",
   imageUrl: string, eg "https://i.imgur.com/UFm07Np_d.png`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  private validateInput(input: any): void {
    if (!input.tokenName || typeof input.tokenName !== "string") {
      throw new Error("tokenName is required and must be a string");
    }
    if (!input.tokenTicker || typeof input.tokenTicker !== "string") {
      throw new Error("tokenTicker is required and must be a string");
    }
    if (!input.description || typeof input.description !== "string") {
      throw new Error("description is required and must be a string");
    }
    if (!input.imageUrl || typeof input.imageUrl !== "string") {
      throw new Error("imageUrl is required and must be a string");
    }
    if (
      input.initialLiquiditySOL !== undefined &&
      typeof input.initialLiquiditySOL !== "number"
    ) {
      throw new Error("initialLiquiditySOL must be a number when provided");
    }
  }

  protected async _call(input: string): Promise<string> {
    try {
      // Parse and normalize input
      input = input.trim();
      const parsedInput = JSON.parse(input);

      this.validateInput(parsedInput);

      // Launch token with validated input
      await this.solanaKit.launchPumpFunToken(
        parsedInput.tokenName,
        parsedInput.tokenTicker,
        parsedInput.description,
        parsedInput.imageUrl,
        {
          twitter: parsedInput.twitter,
          telegram: parsedInput.telegram,
          website: parsedInput.website,
          initialLiquiditySOL: parsedInput.initialLiquiditySOL,
        },
      );

      return JSON.stringify({
        status: "success",
        message: "Token launched successfully on Pump.fun",
        tokenName: parsedInput.tokenName,
        tokenTicker: parsedInput.tokenTicker,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/pyth/index.ts
================================================
export * from "./pyth_price";


================================================
File: src/langchain/pyth/pyth_price.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";
import { PythFetchPriceResponse } from "../../index";

export class SolanaPythFetchPrice extends Tool {
  name = "solana_pyth_fetch_price";
  description = `Fetch the price of a given price feed from Pyth's Hermes service

  Inputs:
  tokenSymbol: string, e.g., BTC for bitcoin`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  async _call(input: string): Promise<string> {
    try {
      const priceFeedID = await this.solanaKit.getPythPriceFeedID(input);
      const price = await this.solanaKit.getPythPrice(priceFeedID);

      const response: PythFetchPriceResponse = {
        status: "success",
        tokenSymbol: input,
        priceFeedID,
        price,
      };

      return JSON.stringify(response);
    } catch (error: any) {
      const response: PythFetchPriceResponse = {
        status: "error",
        tokenSymbol: input,
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      };
      return JSON.stringify(response);
    }
  }
}


================================================
File: src/langchain/raydium/index.ts
================================================
export * from "./raydium_amm";
export * from "./raydium_clmm";
export * from "./raydium_cpmm";
export * from "./types";


================================================
File: src/langchain/raydium/raydium_amm.ts
================================================
import { PublicKey } from "@solana/web3.js";
import { BN } from "@coral-xyz/anchor";
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaRaydiumCreateAmmV4 extends Tool {
  name = "raydium_create_ammV4";
  description = `Raydium's Legacy AMM that requires an OpenBook marketID

  Inputs (input is a json string):
  marketId: string (required)
  baseAmount: number(int), eg: 111111 (required)
  quoteAmount: number(int), eg: 111111 (required)
  startTime: number(seconds), eg: now number or zero (required)
  `;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  async _call(input: string): Promise<string> {
    try {
      const inputFormat = JSON.parse(input);

      const tx = await this.solanaKit.raydiumCreateAmmV4(
        new PublicKey(inputFormat.marketId),
        new BN(inputFormat.baseAmount),
        new BN(inputFormat.quoteAmount),
        new BN(inputFormat.startTime),
      );

      return JSON.stringify({
        status: "success",
        message: "Raydium amm v4 pool created successfully",
        transaction: tx,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/raydium/raydium_clmm.ts
================================================
import { PublicKey } from "@solana/web3.js";
import { BN } from "@coral-xyz/anchor";
import { Decimal } from "decimal.js";
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaRaydiumCreateClmm extends Tool {
  name = "raydium_create_clmm";
  description = `Concentrated liquidity market maker, custom liquidity ranges, increased capital efficiency

  Inputs (input is a json string):
  mint1: string (required)
  mint2: string (required)
  configId: string (required) stores pool info, id, index, protocolFeeRate, tradeFeeRate, tickSpacing, fundFeeRate
  initialPrice: number, eg: 123.12 (required)
  startTime: number(seconds), eg: now number or zero (required)
  `;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  async _call(input: string): Promise<string> {
    try {
      const inputFormat = JSON.parse(input);

      const tx = await this.solanaKit.raydiumCreateClmm(
        new PublicKey(inputFormat.mint1),
        new PublicKey(inputFormat.mint2),

        new PublicKey(inputFormat.configId),

        new Decimal(inputFormat.initialPrice),
        new BN(inputFormat.startTime),
      );

      return JSON.stringify({
        status: "success",
        message: "Raydium clmm pool created successfully",
        transaction: tx,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/raydium/raydium_cpmm.ts
================================================
import { PublicKey } from "@solana/web3.js";
import { BN } from "@coral-xyz/anchor";
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaRaydiumCreateCpmm extends Tool {
  name = "raydium_create_cpmm";
  description = `Raydium's newest CPMM, does not require marketID, supports Token 2022 standard

  Inputs (input is a json string):
  mint1: string (required)
  mint2: string (required)
  configId: string (required), stores pool info, index, protocolFeeRate, tradeFeeRate, fundFeeRate, createPoolFee
  mintAAmount: number(int), eg: 1111 (required)
  mintBAmount: number(int), eg: 2222 (required)
  startTime: number(seconds), eg: now number or zero (required)
  `;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  async _call(input: string): Promise<string> {
    try {
      const inputFormat = JSON.parse(input);

      const tx = await this.solanaKit.raydiumCreateCpmm(
        new PublicKey(inputFormat.mint1),
        new PublicKey(inputFormat.mint2),

        new PublicKey(inputFormat.configId),

        new BN(inputFormat.mintAAmount),
        new BN(inputFormat.mintBAmount),

        new BN(inputFormat.startTime),
      );

      return JSON.stringify({
        status: "success",
        message: "Raydium cpmm pool created successfully",
        transaction: tx,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/raydium/types.ts
================================================
export interface RaydiumAmmV4Input {
  marketId: string;
  baseAmount: number | string;
  quoteAmount: number | string;
  startTime: number;
}

export interface RaydiumClmmInput {
  mint1: string;
  mint2: string;
  configId: string;
  initialPrice: number | string;
  startTime: number;
}

export interface RaydiumCpmmInput {
  mint1: string;
  mint2: string;
  configId: string;
  mintAAmount: number | string;
  mintBAmount: number | string;
  startTime: number;
}


================================================
File: src/langchain/rugcheck/index.ts
================================================
export * from "./token_report_summary";
export * from "./token_report_detailed";


================================================
File: src/langchain/rugcheck/token_report_detailed.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaFetchTokenDetailedReportTool extends Tool {
  name = "solana_fetch_token_detailed_report";
  description = `Fetches a detailed report for a specific token from RugCheck.
  Inputs:
  - mint: string, the mint address of the token, e.g., "JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN" (required).`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const mint = input.trim();
      const detailedReport =
        await this.solanaKit.fetchTokenDetailedReport(mint);

      return JSON.stringify({
        status: "success",
        message: "Detailed token report fetched successfully",
        report: detailedReport,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "FETCH_TOKEN_DETAILED_REPORT_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/rugcheck/token_report_summary.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaFetchTokenReportSummaryTool extends Tool {
  name = "solana_fetch_token_report_summary";
  description = `Fetches a summary report for a specific token from RugCheck.
  Inputs:
  - mint: string, the mint address of the token, e.g., "JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN" (required).`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const mint = input.trim();
      const report = await this.solanaKit.fetchTokenReportSummary(mint);

      return JSON.stringify({
        status: "success",
        message: "Token report summary fetched successfully",
        report,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "FETCH_TOKEN_REPORT_SUMMARY_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/sendarcade/index.ts
================================================
export * from "./rock_paper_scissors";


================================================
File: src/langchain/sendarcade/rock_paper_scissors.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaRockPaperScissorsTool extends Tool {
  name = "rock_paper_scissors";
  description = `Play rock paper scissors to win SEND coins.

  Inputs (input is a JSON string):
  choice: string, either "rock", "paper", or "scissors" (required)
  amount: number, amount of SOL to play with - must be 0.1, 0.01, or 0.005 SOL (required)`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  private validateInput(input: any): void {
    if (input.choice !== undefined) {
      throw new Error("choice is required.");
    }
    if (
      input.amount !== undefined &&
      (typeof input.spaceKB !== "number" || input.spaceKB <= 0)
    ) {
      throw new Error("amount must be a positive number when provided");
    }
  }

  protected async _call(input: string): Promise<string> {
    try {
      const parsedInput = JSON.parse(input);
      this.validateInput(parsedInput);
      const result = await this.solanaKit.rockPaperScissors(
        Number(parsedInput['"amount"']),
        parsedInput['"choice"'].replace(/^"|"$/g, "") as
          | "rock"
          | "paper"
          | "scissors",
      );

      return JSON.stringify({
        status: "success",
        message: result,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/sns/get_domain.ts
================================================
import { PublicKey } from "@solana/web3.js";
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaGetDomainTool extends Tool {
  name = "solana_get_domain";
  description = `Retrieve the .sol domain associated for a given account address.

  Inputs:
  account: string, eg "4Be9CvxqHW6BYiRAxW9Q3xu1ycTMWaL5z8NX4HR3ha7t" (required)
  `;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const account = new PublicKey(input.trim());
      const domain = await this.solanaKit.getPrimaryDomain(account);

      return JSON.stringify({
        status: "success",
        message: "Primary domain retrieved successfully",
        domain,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/sns/index.ts
================================================
export * from "./register_domain";
export * from "./resolve_domain";
export * from "./get_domain";
export * from "./main_domain";


================================================
File: src/langchain/sns/main_domain.ts
================================================
import { PublicKey } from "@solana/web3.js";
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaGetMainDomain extends Tool {
  name = "solana_get_main_domain";
  description = `Get the main/favorite domain for a given wallet address.

  Inputs:
  owner: string, eg "4Be9CvxqHW6BYiRAxW9Q3xu1ycTMWaL5z8NX4HR3ha7t" (required)`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  async _call(input: string): Promise<string> {
    try {
      const ownerPubkey = new PublicKey(input.trim());
      const mainDomain =
        await this.solanaKit.getMainAllDomainsDomain(ownerPubkey);

      return JSON.stringify({
        status: "success",
        message: "Main domain fetched successfully",
        domain: mainDomain,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "FETCH_MAIN_DOMAIN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/sns/register_domain.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaRegisterDomainTool extends Tool {
  name = "solana_register_domain";
  description = `Register a .sol domain name for your wallet.

  Inputs:
  name: string, eg "pumpfun.sol" (required)
  spaceKB: number, eg 1 (optional, default is 1)
  `;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  private validateInput(input: any): void {
    if (!input.name || typeof input.name !== "string") {
      throw new Error("name is required and must be a string");
    }
    if (
      input.spaceKB !== undefined &&
      (typeof input.spaceKB !== "number" || input.spaceKB <= 0)
    ) {
      throw new Error("spaceKB must be a positive number when provided");
    }
  }

  protected async _call(input: string): Promise<string> {
    try {
      const parsedInput = JSON.parse(input);
      this.validateInput(parsedInput);

      const tx = await this.solanaKit.registerDomain(
        parsedInput.name,
        parsedInput.spaceKB || 1,
      );

      return JSON.stringify({
        status: "success",
        message: "Domain registered successfully",
        transaction: tx,
        domain: `${parsedInput.name}.sol`,
        spaceKB: parsedInput.spaceKB || 1,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/sns/resolve_domain.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaResolveDomainTool extends Tool {
  name = "solana_resolve_domain";
  description = `Resolve ONLY .sol domain names to a Solana PublicKey.
  This tool is exclusively for .sol domains.
  DO NOT use this for other domain types like .blink, .bonk, etc.

  Inputs:
  domain: string, eg "pumpfun.sol" (required)
  `;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const domain = input.trim();
      const publicKey = await this.solanaKit.resolveSolDomain(domain);

      return JSON.stringify({
        status: "success",
        message: "Domain resolved successfully",
        publicKey: publicKey.toBase58(),
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/solana/balance.ts
================================================
import { PublicKey } from "@solana/web3.js";
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaBalanceTool extends Tool {
  name = "solana_balance";
  description = `Get the balance of a Solana wallet or token account.

  If you want to get the balance of your wallet, you don't need to provide the tokenAddress.
  If no tokenAddress is provided, the balance will be in SOL.

  Inputs ( input is a JSON string ):
  tokenAddress: string, eg "So11111111111111111111111111111111111111112" (optional)`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const tokenAddress = input ? new PublicKey(input) : undefined;
      const balance = await this.solanaKit.getBalance(tokenAddress);

      return JSON.stringify({
        status: "success",
        balance,
        token: input || "SOL",
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/solana/balance_other.ts
================================================
import { PublicKey } from "@solana/web3.js";
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaBalanceOtherTool extends Tool {
  name = "solana_balance_other";
  description = `Get the balance of a Solana wallet or token account which is different from the agent's wallet.

  If no tokenAddress is provided, the SOL balance of the wallet will be returned.

  Inputs ( input is a JSON string ):
  walletAddress: string, eg "GDEkQF7UMr7RLv1KQKMtm8E2w3iafxJLtyXu3HVQZnME" (required)
  tokenAddress: string, eg "SENDdRQtYMWaQrBroBrJ2Q53fgVuq95CV9UPGEvpCxa" (optional)`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const { walletAddress, tokenAddress } = JSON.parse(input);

      const tokenPubKey = tokenAddress
        ? new PublicKey(tokenAddress)
        : undefined;

      const balance = await this.solanaKit.getBalanceOther(
        new PublicKey(walletAddress),
        tokenPubKey,
      );

      return JSON.stringify({
        status: "success",
        balance,
        wallet: walletAddress,
        token: tokenAddress || "SOL",
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/solana/close_empty_accounts.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaCloseEmptyTokenAccounts extends Tool {
  name = "close_empty_token_accounts";
  description = `Close all empty spl-token accounts and reclaim the rent`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(): Promise<string> {
    try {
      const { signature, size } =
        await this.solanaKit.closeEmptyTokenAccounts();

      return JSON.stringify({
        status: "success",
        message: `${size} accounts closed successfully. ${size === 48 ? "48 accounts can be closed in a single transaction try again to close more accounts" : ""}`,
        signature,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/solana/get_tps.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaTPSCalculatorTool extends Tool {
  name = "solana_get_tps";
  description = "Get the current TPS of the Solana network";

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  async _call(_input: string): Promise<string> {
    try {
      const tps = await this.solanaKit.getTPS();
      return `Solana (mainnet-beta) current transactions per second: ${tps}`;
    } catch (error: any) {
      return `Error fetching TPS: ${error.message}`;
    }
  }
}


================================================
File: src/langchain/solana/index.ts
================================================
export * from "./get_tps";
export * from "./request_funds";
export * from "./balance";
export * from "./balance_other";
export * from "./close_empty_accounts";
export * from "./transfer";


================================================
File: src/langchain/solana/request_funds.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaRequestFundsTool extends Tool {
  name = "solana_request_funds";
  description = "Request SOL from Solana faucet (devnet/testnet only)";

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(_input: string): Promise<string> {
    try {
      await this.solanaKit.requestFaucetFunds();

      return JSON.stringify({
        status: "success",
        message: "Successfully requested faucet funds",
        network: this.solanaKit.connection.rpcEndpoint.split("/")[2],
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/solana/transfer.ts
================================================
import { PublicKey } from "@solana/web3.js";
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaTransferTool extends Tool {
  name = "solana_transfer";
  description = `Transfer tokens or SOL to another address ( also called as wallet address ).

  Inputs ( input is a JSON string ):
  to: string, eg "8x2dR8Mpzuz2YqyZyZjUbYWKSWesBo5jMx2Q9Y86udVk" (required)
  amount: number, eg 1 (required)
  mint?: string, eg "So11111111111111111111111111111111111111112" or "SENDdRQtYMWaQrBroBrJ2Q53fgVuq95CV9UPGEvpCxa" (optional)`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const parsedInput = JSON.parse(input);

      const recipient = new PublicKey(parsedInput.to);
      const mintAddress = parsedInput.mint
        ? new PublicKey(parsedInput.mint)
        : undefined;

      const tx = await this.solanaKit.transfer(
        recipient,
        parsedInput.amount,
        mintAddress,
      );

      return JSON.stringify({
        status: "success",
        message: "Transfer completed successfully",
        amount: parsedInput.amount,
        recipient: parsedInput.to,
        token: parsedInput.mint || "SOL",
        transaction: tx,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/solayer/index.ts
================================================
export * from "./restake";


================================================
File: src/langchain/solayer/restake.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaRestakeTool extends Tool {
  name = "solana_restake";
  description = `This tool can be used to restake your SOL on Solayer to receive Solayer SOL (sSOL) as a Liquid Staking Token (LST).

  Inputs:
  amount: number, eg 1 or 0.01 (required)`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const parsedInput = JSON.parse(input) || Number(input);

      const tx = await this.solanaKit.restake(parsedInput.amount);

      return JSON.stringify({
        status: "success",
        message: "Staked successfully",
        transaction: tx,
        amount: parsedInput.amount,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/squads/approve_proposal.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaApproveProposal2by2Multisig extends Tool {
  name = "approve_proposal_2by2_multisig";
  description = `Approve a proposal to transfer funds from a 2-of-2 multisig account on Solana with the user and the agent, where both approvals will be required to run the transactions.
  
  If proposalIndex is not provided, the latest index will automatically be fetched and used.

  Inputs (JSON string):
  - proposalIndex: number, the index of the proposal (optional).`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const inputFormat = JSON.parse(input);
      const proposalIndex = inputFormat.proposalIndex ?? undefined;

      const tx = await this.solanaKit.approveMultisigProposal(proposalIndex);

      return JSON.stringify({
        status: "success",
        message: "Proposal approved successfully",
        transaction: tx,
        proposalIndex: proposalIndex.toString(),
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "APPROVE_PROPOSAL_2BY2_MULTISIG_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/squads/create_multisig.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";
import { PublicKey } from "@solana/web3.js";

export class SolanaCreate2by2Multisig extends Tool {
  name = "create_2by2_multisig";
  description = `Create a 2-of-2 multisig account on Solana with the user and the agent, where both approvals will be required to run the transactions.
  
  Note: For one AI agent, only one 2-by-2 multisig can be created as it is pair-wise.

  Inputs (JSON string):
  - creator: string, the public key of the creator (required).`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const inputFormat = JSON.parse(input);
      const creator = new PublicKey(inputFormat.creator);

      const multisig = await this.solanaKit.createSquadsMultisig(creator);

      return JSON.stringify({
        status: "success",
        message: "2-by-2 multisig account created successfully",
        multisig,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "CREATE_2BY2_MULTISIG_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/squads/create_proposal.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaCreateProposal2by2Multisig extends Tool {
  name = "create_proposal_2by2_multisig";
  description = `Create a proposal to transfer funds from a 2-of-2 multisig account on Solana with the user and the agent, where both approvals will be required to run the transactions.
  
  If transactionIndex is not provided, the latest index will automatically be fetched and used.

  Inputs (JSON string):
  - transactionIndex: number, the index of the transaction (optional).`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const inputFormat = JSON.parse(input);
      const transactionIndex = inputFormat.transactionIndex ?? undefined;

      const tx = await this.solanaKit.createMultisigProposal(transactionIndex);

      return JSON.stringify({
        status: "success",
        message: "Proposal created successfully",
        transaction: tx,
        transactionIndex: transactionIndex?.toString(),
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "CREATE_PROPOSAL_2BY2_MULTISIG_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/squads/deposit_to_multisig.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";
import Decimal from "decimal.js";

export class SolanaDepositTo2by2Multisig extends Tool {
  name = "deposit_to_2by2_multisig";
  description = `Deposit funds to a 2-of-2 multisig account on Solana with the user and the agent, where both approvals will be required to run the transactions.

  Inputs (JSON string):
  - amount: number, the amount to deposit in SOL (required).`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const inputFormat = JSON.parse(input);
      const amount = new Decimal(inputFormat.amount);

      const tx = await this.solanaKit.depositToMultisig(amount.toNumber());

      return JSON.stringify({
        status: "success",
        message: "Funds deposited to 2-by-2 multisig account successfully",
        transaction: tx,
        amount: amount.toString(),
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "DEPOSIT_TO_2BY2_MULTISIG_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/squads/execute_proposal.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaExecuteProposal2by2Multisig extends Tool {
  name = "execute_proposal_2by2_multisig";
  description = `Execute a proposal/transaction to transfer funds from a 2-of-2 multisig account on Solana with the user and the agent, where both approvals will be required to run the transactions.
  
  If proposalIndex is not provided, the latest index will automatically be fetched and used.

  Inputs (JSON string):
  - proposalIndex: number, the index of the proposal (optional).`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const inputFormat = JSON.parse(input);
      const proposalIndex = inputFormat.proposalIndex ?? undefined;

      const tx = await this.solanaKit.executeMultisigTransaction(proposalIndex);

      return JSON.stringify({
        status: "success",
        message: "Proposal executed successfully",
        transaction: tx,
        proposalIndex: proposalIndex.toString(),
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "EXECUTE_PROPOSAL_2BY2_MULTISIG_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/squads/index.ts
================================================
export * from "./approve_proposal";
export * from "./create_multisig";
export * from "./create_proposal";
export * from "./deposit_to_multisig";
export * from "./execute_proposal";
export * from "./reject_proposal";
export * from "./transfer_from_multisig";


================================================
File: src/langchain/squads/reject_proposal.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaRejectProposal2by2Multisig extends Tool {
  name = "reject_proposal_2by2_multisig";
  description = `Reject a proposal to transfer funds from a 2-of-2 multisig account on Solana with the user and the agent, where both approvals will be required to run the transactions.
  
  If proposalIndex is not provided, the latest index will automatically be fetched and used.

  Inputs (JSON string):
  - proposalIndex: number, the index of the proposal (optional).`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const inputFormat = JSON.parse(input);
      const proposalIndex = inputFormat.proposalIndex ?? undefined;

      const tx = await this.solanaKit.rejectMultisigProposal(proposalIndex);

      return JSON.stringify({
        status: "success",
        message: "Proposal rejected successfully",
        transaction: tx,
        proposalIndex: proposalIndex.toString(),
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "REJECT_PROPOSAL_2BY2_MULTISIG_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/squads/transfer_from_multisig.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";
import { PublicKey } from "@solana/web3.js";
import Decimal from "decimal.js";

export class SolanaTransferFrom2by2Multisig extends Tool {
  name = "transfer_from_2by2_multisig";
  description = `Create a transaction to transfer funds from a 2-of-2 multisig account on Solana with the user and the agent, where both approvals will be required to run the transactions.

  Inputs (JSON string):
  - amount: number, the amount to transfer in SOL (required).
  - recipient: string, the public key of the recipient (required).`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const inputFormat = JSON.parse(input);
      const amount = new Decimal(inputFormat.amount);
      const recipient = new PublicKey(inputFormat.recipient);

      const tx = await this.solanaKit.transferFromMultisig(
        amount.toNumber(),
        recipient,
      );

      return JSON.stringify({
        status: "success",
        message: "Transaction added to 2-by-2 multisig account successfully",
        transaction: tx,
        amount: amount.toString(),
        recipient: recipient.toString(),
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "TRANSFER_FROM_2BY2_MULTISIG_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/tensor/cancel_listing.ts
================================================
import { PublicKey } from "@solana/web3.js";
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaCancelNFTListingTool extends Tool {
  name = "solana_cancel_nft_listing";
  description = `Cancel an NFT listing on Tensor Trade.

  Inputs (input is a JSON string):
  nftMint: string, the mint address of the NFT (required)`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const parsedInput = JSON.parse(input);

      const tx = await this.solanaKit.tensorCancelListing(
        new PublicKey(parsedInput.nftMint),
      );

      return JSON.stringify({
        status: "success",
        message: "NFT listing cancelled successfully",
        transaction: tx,
        nftMint: parsedInput.nftMint,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/tensor/index.ts
================================================
export * from "./list_nft";
export * from "./cancel_listing";


================================================
File: src/langchain/tensor/list_nft.ts
================================================
import { PublicKey } from "@solana/web3.js";
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaListNFTForSaleTool extends Tool {
  name = "solana_list_nft_for_sale";
  description = `List an NFT for sale on Tensor Trade.

  Inputs (input is a JSON string):
  nftMint: string, the mint address of the NFT (required)
  price: number, price in SOL (required)`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const parsedInput = JSON.parse(input);

      // Validate NFT ownership first
      const nftAccount =
        await this.solanaKit.connection.getTokenAccountsByOwner(
          this.solanaKit.wallet_address,
          { mint: new PublicKey(parsedInput.nftMint) },
        );

      if (nftAccount.value.length === 0) {
        return JSON.stringify({
          status: "error",
          message:
            "NFT not found in wallet. Please make sure you own this NFT.",
          code: "NFT_NOT_FOUND",
        });
      }

      const tx = await this.solanaKit.tensorListNFT(
        new PublicKey(parsedInput.nftMint),
        parsedInput.price,
      );

      return JSON.stringify({
        status: "success",
        message: "NFT listed for sale successfully",
        transaction: tx,
        price: parsedInput.price,
        nftMint: parsedInput.nftMint,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/tiplink/index.ts
================================================
export * from "./tiplink";


================================================
File: src/langchain/tiplink/tiplink.ts
================================================
import { PublicKey } from "@solana/web3.js";
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";

export class SolanaTipLinkTool extends Tool {
  name = "solana_tiplink";
  description = `Create a TipLink for transferring SOL or SPL tokens.
  Input is a JSON string with:
  - amount: number (required) - Amount to transfer
  - splmintAddress: string (optional) - SPL token mint address`;

  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }

  protected async _call(input: string): Promise<string> {
    try {
      const parsedInput = JSON.parse(input);

      if (!parsedInput.amount) {
        throw new Error("Amount is required");
      }

      const amount = parseFloat(parsedInput.amount);
      const splmintAddress = parsedInput.splmintAddress
        ? new PublicKey(parsedInput.splmintAddress)
        : undefined;

      const { url, signature } = await this.solanaKit.createTiplink(
        amount,
        splmintAddress,
      );

      return JSON.stringify({
        status: "success",
        url,
        signature,
        amount,
        tokenType: splmintAddress ? "SPL" : "SOL",
        message: `TipLink created successfully`,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/voltr/deposit_strategy.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";
import { PublicKey } from "@solana/web3.js";
import { BN } from "bn.js";

export class SolanaVoltrDepositStrategy extends Tool {
  name = "solana_voltr_deposit_strategy";
  description = `Deposit amount into a strategy for Voltr's vaults
    
    Inputs (input is a json string):
    depositAmount: number (required)
    vault: string (required)
    strategy: string (required)
    `;
  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }
  async _call(input: string): Promise<string> {
    try {
      const inputFormat = JSON.parse(input);
      const tx = await this.solanaKit.voltrDepositStrategy(
        new BN(inputFormat.depositAmount),
        new PublicKey(inputFormat.vault),
        new PublicKey(inputFormat.strategy),
      );
      return JSON.stringify({
        status: "success",
        message: `Deposited ${inputFormat.depositAmount} into strategy ${inputFormat.strategy} of vault ${inputFormat.vault} successfully`,
        transaction: tx,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/langchain/voltr/get_position_values.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";
import { PublicKey } from "@solana/web3.js";

export class SolanaVoltrGetPositionValues extends Tool {
  name = "solana_voltr_get_position_values";
  description = `Get the total asset value and current value for each strategy of a given Voltr vault
    
    Inputs:
    vault: string (required)
    `;
  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }
  async _call(input: string): Promise<string> {
    return this.solanaKit.voltrGetPositionValues(new PublicKey(input));
  }
}


================================================
File: src/langchain/voltr/index.ts
================================================
export * from "./deposit_strategy";
export * from "./withdraw_strategy";
export * from "./get_position_values";


================================================
File: src/langchain/voltr/withdraw_strategy.ts
================================================
import { Tool } from "langchain/tools";
import { SolanaAgentKit } from "../../agent";
import { PublicKey } from "@solana/web3.js";
import { BN } from "bn.js";

export class SolanaVoltrWithdrawStrategy extends Tool {
  name = "solana_voltr_withdraw_strategy";
  description = `Withdraw amount from a strategy for Voltr's vaults
    
    Inputs (input is a json string):
    withdrawAmount: number (required)
    vault: string (required)
    strategy: string (required)
    `;
  constructor(private solanaKit: SolanaAgentKit) {
    super();
  }
  async _call(input: string): Promise<string> {
    try {
      const inputFormat = JSON.parse(input);
      const tx = await this.solanaKit.voltrWithdrawStrategy(
        new BN(inputFormat.withdrawAmount),
        new PublicKey(inputFormat.vault),
        new PublicKey(inputFormat.strategy),
      );
      return JSON.stringify({
        status: "success",
        message: `Withdrew ${inputFormat.withdrawAmount} from strategy ${inputFormat.strategy} of vault ${inputFormat.vault} successfully`,
        transaction: tx,
      });
    } catch (error: any) {
      return JSON.stringify({
        status: "error",
        message: error.message,
        code: error.code || "UNKNOWN_ERROR",
      });
    }
  }
}


================================================
File: src/tools/index.ts
================================================
export * from "./adrena";
export * from "./sns";
export * from "./dexscreener";
export * from "./alldomains";
export * from "./flash";
export * from "./gibwork";
export * from "./jupiter";
export * from "./lulo";
export * from "./manifest";
export * from "./solana";
export * from "./agent";
export * from "./metaplex";
export * from "./openbook";
export * from "./orca";
export * from "./pumpfun";
export * from "./pyth";
export * from "./raydium";
export * from "./rugcheck";
export * from "./drift";
export * from "./sendarcade";
export * from "./solayer";
export * from "./tensor";
export * from "./3land";
export * from "./tiplink";
export * from "./lightprotocol";
export * from "./squads";
export * from "./meteora";
export * from "./helius";
export * from "./voltr";
export * from "./allora";


================================================
File: src/tools/3land/create_3land_collectible.ts
================================================
import { createCollectionImp, createSingleImp } from "@3land/listings-sdk";
import {
  StoreInitOptions,
  CreateCollectionOptions,
  CreateSingleOptions,
} from "@3land/listings-sdk/dist/types/implementation/implementationTypes";

/**
 * Create a collection on 3Land
 * @param optionsWithBase58 represents the privateKey of the wallet - can be an array of numbers, Uint8Array or base58 string
 * @param collectionOpts represents the options for the collection creation
 * @returns
 */
export async function createCollection(
  optionsWithBase58: StoreInitOptions,
  collectionOpts: CreateCollectionOptions,
  priorityFeeParam?: number,
) {
  try {
    const collection = await createCollectionImp(
      optionsWithBase58,
      collectionOpts,
      priorityFeeParam,
    );
    return collection;
  } catch (error: any) {
    throw new Error(`Collection creation failed: ${error.message}`);
  }
}

/**
 * Create a single edition on 3Land
 * @param optionsWithBase58 represents the privateKey of the wallet - can be an array of numbers, Uint8Array or base58 string
 * @param collectionAccount represents the account for the nft collection
 * @param createItemOptions the options for the creation of the single NFT listing
 * @returns
 */
export async function createSingle(
  optionsWithBase58: StoreInitOptions,
  collectionAccount: string,
  createItemOptions: CreateSingleOptions,
  isMainnet: boolean = false,
  withPool: boolean = false,
  priorityFeeParam?: number,
) {
  try {
    const landStore = isMainnet
      ? "AmQNs2kgw4LvS9sm6yE9JJ4Hs3JpVu65eyx9pxMG2xA"
      : "GyPCu89S63P9NcCQAtuSJesiefhhgpGWrNVJs4bF2cSK";

    const singleEditionTx = await createSingleImp(
      optionsWithBase58,
      landStore,
      collectionAccount,
      createItemOptions,
      true, //isAI
      withPool,
      priorityFeeParam,
    );
    return singleEditionTx;
  } catch (error: any) {
    throw new Error(`Single edition creation failed: ${error.message}`);
  }
}


================================================
File: src/tools/3land/index.ts
================================================
export * from "./create_3land_collectible";


================================================
File: src/tools/adrena/adrena_perp_trading.ts
================================================
import {
  PublicKey,
  SystemProgram,
  TransactionInstruction,
} from "@solana/web3.js";
import { SolanaAgentKit } from "../../index";
import { TOKENS, DEFAULT_OPTIONS } from "../../constants";
import { TOKEN_PROGRAM_ID } from "@solana/spl-token";
import { BN } from "@coral-xyz/anchor";

import AdrenaClient from "../../utils/AdrenaClient";
import { sendTx } from "../../utils/send_tx";

const PRICE_DECIMALS = 10;
const ADRENA_PROGRAM_ID = new PublicKey(
  "13gDzEXCdocbj8iAiqrScGo47NiSuYENGsRqi3SEAwet",
);

// i.e percentage = -2 (for -2%)
// i.e percentage = 5 (for 5%)
function applySlippage(nb: BN, percentage: number): BN {
  const negative = percentage < 0 ? true : false;

  // Do x10_000 so percentage can be up to 4 decimals
  const percentageBN = new BN(
    (negative ? percentage * -1 : percentage) * 10_000,
  );

  const delta = nb.mul(percentageBN).divRound(new BN(10_000 * 100));

  return negative ? nb.sub(delta) : nb.add(delta);
}

/**
 * Close short trade on Adrena
 * @returns Transaction signature
 */
export async function closePerpTradeShort({
  agent,
  price,
  tradeMint,
}: {
  agent: SolanaAgentKit;
  price: number;
  tradeMint: PublicKey;
}) {
  const client = await AdrenaClient.load(agent);

  const owner = agent.wallet.publicKey;

  const custody = client.getCustodyByMint(tradeMint);
  const collateralCustody = client.getCustodyByMint(TOKENS.USDC);

  const stakingRewardTokenCustodyAccount = client.getCustodyByMint(
    AdrenaClient.stakingRewardTokenMint,
  );

  const stakingRewardTokenCustodyTokenAccount =
    AdrenaClient.findCustodyTokenAccountAddress(
      AdrenaClient.stakingRewardTokenMint,
    );

  const position = AdrenaClient.findPositionAddress(
    owner,
    custody.pubkey,
    "long",
  );

  const userProfilePda = AdrenaClient.getUserProfilePda(owner);

  const userProfile =
    await client.program.account.userProfile.fetchNullable(userProfilePda);

  const receivingAccount = AdrenaClient.findATAAddressSync(
    owner,
    collateralCustody.mint,
  );

  const preInstructions: TransactionInstruction[] = [];

  const collateralCustodyOracle = collateralCustody.oracle;
  const collateralCustodyTokenAccount =
    AdrenaClient.findCustodyTokenAccountAddress(collateralCustody.mint);

  if (
    !(await AdrenaClient.isAccountInitialized(
      agent.connection,
      receivingAccount,
    ))
  ) {
    preInstructions.push(
      AdrenaClient.createATAInstruction({
        ataAddress: receivingAccount,
        mint: collateralCustody.mint,
        owner,
      }),
    );
  }

  const instruction = await client.program.methods
    .closePositionShort({
      price: new BN(price * 10 ** PRICE_DECIMALS),
    })
    .accountsStrict({
      owner,
      receivingAccount,
      transferAuthority: AdrenaClient.transferAuthority,
      pool: AdrenaClient.mainPool,
      position: position,
      custody: custody.pubkey,
      custodyTradeOracle: custody.tradeOracle,
      tokenProgram: TOKEN_PROGRAM_ID,
      lmStaking: AdrenaClient.lmStaking,
      lpStaking: AdrenaClient.lpStaking,
      cortex: AdrenaClient.cortex,
      stakingRewardTokenCustody: stakingRewardTokenCustodyAccount.pubkey,
      stakingRewardTokenCustodyOracle: stakingRewardTokenCustodyAccount.oracle,
      stakingRewardTokenCustodyTokenAccount,
      lmStakingRewardTokenVault: AdrenaClient.lmStakingRewardTokenVault,
      lpStakingRewardTokenVault: AdrenaClient.lpStakingRewardTokenVault,
      lpTokenMint: AdrenaClient.lpTokenMint,
      protocolFeeRecipient: client.cortex.protocolFeeRecipient,
      adrenaProgram: AdrenaClient.programId,
      userProfile: userProfile ? userProfilePda : null,
      caller: owner,
      collateralCustody: collateralCustody.pubkey,
      collateralCustodyOracle,
      collateralCustodyTokenAccount,
    })
    .instruction();

  return sendTx(agent, [...preInstructions, instruction]);
}

/**
 * Close long trade on Adrena
 * @returns Transaction signature
 */
export async function closePerpTradeLong({
  agent,
  price,
  tradeMint,
}: {
  agent: SolanaAgentKit;
  price: number;
  tradeMint: PublicKey;
}) {
  const client = await AdrenaClient.load(agent);

  const owner = agent.wallet.publicKey;

  const custody = client.getCustodyByMint(tradeMint);

  const custodyTokenAccount =
    AdrenaClient.findCustodyTokenAccountAddress(tradeMint);

  const stakingRewardTokenCustodyAccount = client.getCustodyByMint(
    AdrenaClient.stakingRewardTokenMint,
  );

  const stakingRewardTokenCustodyTokenAccount =
    AdrenaClient.findCustodyTokenAccountAddress(
      AdrenaClient.stakingRewardTokenMint,
    );

  const position = AdrenaClient.findPositionAddress(
    owner,
    custody.pubkey,
    "long",
  );

  const userProfilePda = AdrenaClient.getUserProfilePda(owner);

  const userProfile =
    await client.program.account.userProfile.fetchNullable(userProfilePda);

  const receivingAccount = AdrenaClient.findATAAddressSync(owner, custody.mint);

  const preInstructions: TransactionInstruction[] = [];

  if (
    !(await AdrenaClient.isAccountInitialized(
      agent.connection,
      receivingAccount,
    ))
  ) {
    preInstructions.push(
      AdrenaClient.createATAInstruction({
        ataAddress: receivingAccount,
        mint: custody.mint,
        owner,
      }),
    );
  }

  const instruction = await client.program.methods
    .closePositionLong({
      price: new BN(price * 10 ** PRICE_DECIMALS),
    })
    .accountsStrict({
      owner,
      receivingAccount,
      transferAuthority: AdrenaClient.transferAuthority,
      pool: AdrenaClient.mainPool,
      position: position,
      custody: custody.pubkey,
      custodyTokenAccount,
      custodyOracle: custody.oracle,
      custodyTradeOracle: custody.tradeOracle,
      tokenProgram: TOKEN_PROGRAM_ID,
      lmStaking: AdrenaClient.lmStaking,
      lpStaking: AdrenaClient.lpStaking,
      cortex: AdrenaClient.cortex,
      stakingRewardTokenCustody: stakingRewardTokenCustodyAccount.pubkey,
      stakingRewardTokenCustodyOracle: stakingRewardTokenCustodyAccount.oracle,
      stakingRewardTokenCustodyTokenAccount,
      lmStakingRewardTokenVault: AdrenaClient.lmStakingRewardTokenVault,
      lpStakingRewardTokenVault: AdrenaClient.lpStakingRewardTokenVault,
      lpTokenMint: AdrenaClient.lpTokenMint,
      protocolFeeRecipient: client.cortex.protocolFeeRecipient,
      adrenaProgram: AdrenaClient.programId,
      userProfile: userProfile ? userProfilePda : null,
      caller: owner,
    })
    .instruction();

  return sendTx(agent, [...preInstructions, instruction]);
}

/**
 * Open long trade on Adrena
 *
 * Note: provide the same token as collateralMint and as tradeMint to avoid swap
 * @returns Transaction signature
 */
export async function openPerpTradeLong({
  agent,
  price,
  collateralAmount,
  collateralMint = TOKENS.jitoSOL,
  leverage = DEFAULT_OPTIONS.LEVERAGE_BPS,
  tradeMint = TOKENS.jitoSOL,
  slippage = 0.3,
}: {
  agent: SolanaAgentKit;
  price: number;
  collateralAmount: number;
  collateralMint?: PublicKey;
  leverage?: number;
  tradeMint?: PublicKey;
  slippage?: number;
}): Promise<string> {
  const client = await AdrenaClient.load(agent);

  const owner = agent.wallet.publicKey;

  const collateralAccount = AdrenaClient.findATAAddressSync(owner, tradeMint);
  const fundingAccount = AdrenaClient.findATAAddressSync(owner, collateralMint);

  const receivingCustody = AdrenaClient.findCustodyAddress(collateralMint);
  const receivingCustodyOracle = client.getCustodyByMint(collateralMint).oracle;
  const receivingCustodyTokenAccount =
    AdrenaClient.findCustodyTokenAccountAddress(collateralMint);

  // Principal custody is the custody of the targeted token
  // i.e open a 1 ETH long position, principal custody is ETH
  const principalCustody = AdrenaClient.findCustodyAddress(tradeMint);
  const principalCustodyAccount = client.getCustodyByMint(tradeMint);
  const principalCustodyOracle = principalCustodyAccount.oracle;
  const principalCustodyTradeOracle = principalCustodyAccount.tradeOracle;
  const principalCustodyTokenAccount =
    AdrenaClient.findCustodyTokenAccountAddress(tradeMint);

  const stakingRewardTokenCustodyAccount = client.getCustodyByMint(
    AdrenaClient.stakingRewardTokenMint,
  );

  const stakingRewardTokenCustodyTokenAccount =
    AdrenaClient.findCustodyTokenAccountAddress(
      AdrenaClient.stakingRewardTokenMint,
    );

  const position = AdrenaClient.findPositionAddress(
    owner,
    principalCustody,
    "long",
  );

  const userProfilePda = AdrenaClient.getUserProfilePda(owner);

  const userProfile =
    await client.program.account.userProfile.fetchNullable(userProfilePda);

  const priceWithSlippage = applySlippage(
    new BN(price * 10 ** PRICE_DECIMALS),
    slippage,
  );

  const scaledCollateralAmount = new BN(
    collateralAmount *
      Math.pow(10, client.getCustodyByMint(collateralMint).decimals),
  );

  const preInstructions: TransactionInstruction[] = [];

  if (
    !(await AdrenaClient.isAccountInitialized(
      agent.connection,
      collateralAccount,
    ))
  ) {
    preInstructions.push(
      AdrenaClient.createATAInstruction({
        ataAddress: collateralAccount,
        mint: tradeMint,
        owner,
      }),
    );
  }

  const instruction = await client.program.methods
    .openOrIncreasePositionWithSwapLong({
      price: priceWithSlippage,
      collateral: scaledCollateralAmount,
      leverage,
      referrer: null,
    })
    .accountsStrict({
      owner,
      payer: owner,
      fundingAccount,
      collateralAccount,
      receivingCustody,
      receivingCustodyOracle,
      receivingCustodyTokenAccount,
      principalCustody,
      principalCustodyOracle,
      principalCustodyTradeOracle,
      principalCustodyTokenAccount,
      transferAuthority: AdrenaClient.transferAuthority,
      cortex: AdrenaClient.cortex,
      lmStaking: AdrenaClient.lmStaking,
      lpStaking: AdrenaClient.lpStaking,
      pool: AdrenaClient.mainPool,
      position,
      stakingRewardTokenCustody: stakingRewardTokenCustodyAccount.pubkey,
      stakingRewardTokenCustodyOracle: stakingRewardTokenCustodyAccount.oracle,
      stakingRewardTokenCustodyTokenAccount,
      lmStakingRewardTokenVault: AdrenaClient.lmStakingRewardTokenVault,
      lpStakingRewardTokenVault: AdrenaClient.lpStakingRewardTokenVault,
      lpTokenMint: AdrenaClient.lpTokenMint,
      userProfile: userProfile ? userProfilePda : null,
      protocolFeeRecipient: client.cortex.protocolFeeRecipient,
      systemProgram: SystemProgram.programId,
      tokenProgram: TOKEN_PROGRAM_ID,
      adrenaProgram: ADRENA_PROGRAM_ID,
    })
    .instruction();

  return sendTx(agent, [...preInstructions, instruction]);
}

/**
 * Open short trade on Adrena
 *
 * Note: provide USDC as collateralMint to avoid swap
 * @returns Transaction signature
 */
export async function openPerpTradeShort({
  agent,
  price,
  collateralAmount,
  collateralMint = TOKENS.USDC,
  leverage = DEFAULT_OPTIONS.LEVERAGE_BPS,
  tradeMint = TOKENS.jitoSOL,
  slippage = 0.3,
}: {
  agent: SolanaAgentKit;
  price: number;
  collateralAmount: number;
  collateralMint?: PublicKey;
  leverage?: number;
  tradeMint?: PublicKey;
  slippage?: number;
}): Promise<string> {
  const client = await AdrenaClient.load(agent);

  const owner = agent.wallet.publicKey;

  const collateralAccount = AdrenaClient.findATAAddressSync(owner, tradeMint);
  const fundingAccount = AdrenaClient.findATAAddressSync(owner, collateralMint);

  const receivingCustody = AdrenaClient.findCustodyAddress(collateralMint);
  const receivingCustodyOracle = client.getCustodyByMint(collateralMint).oracle;
  const receivingCustodyTokenAccount =
    AdrenaClient.findCustodyTokenAccountAddress(collateralMint);

  // Principal custody is the custody of the targeted token
  // i.e open a 1 BTC short position, principal custody is BTC
  const principalCustody = AdrenaClient.findCustodyAddress(tradeMint);
  const principalCustodyAccount = client.getCustodyByMint(tradeMint);
  const principalCustodyTradeOracle = principalCustodyAccount.tradeOracle;
  const principalCustodyTokenAccount =
    AdrenaClient.findCustodyTokenAccountAddress(tradeMint);

  const usdcAta = AdrenaClient.findATAAddressSync(owner, TOKENS.USDC);

  const preInstructions: TransactionInstruction[] = [];

  if (!(await AdrenaClient.isAccountInitialized(agent.connection, usdcAta))) {
    preInstructions.push(
      AdrenaClient.createATAInstruction({
        ataAddress: usdcAta,
        mint: TOKENS.USDC,
        owner,
      }),
    );
  }

  // Custody used to provide collateral when opening the position
  // Should be a stable token, by default, use USDC
  const instructionCollateralMint = TOKENS.USDC;

  const collateralCustody = AdrenaClient.findCustodyAddress(
    instructionCollateralMint,
  );
  const collateralCustodyOracle = client.getCustodyByMint(
    instructionCollateralMint,
  ).oracle;

  const collateralCustodyTokenAccount =
    AdrenaClient.findCustodyTokenAccountAddress(instructionCollateralMint);

  const stakingRewardTokenCustodyAccount = client.getCustodyByMint(
    AdrenaClient.stakingRewardTokenMint,
  );

  const stakingRewardTokenCustodyTokenAccount =
    AdrenaClient.findCustodyTokenAccountAddress(
      AdrenaClient.stakingRewardTokenMint,
    );

  const position = AdrenaClient.findPositionAddress(
    owner,
    principalCustody,
    "long",
  );

  const userProfilePda = AdrenaClient.getUserProfilePda(owner);

  const userProfile =
    await client.program.account.userProfile.fetchNullable(userProfilePda);

  const priceWithSlippage = applySlippage(
    new BN(price * 10 ** PRICE_DECIMALS),
    slippage,
  );

  const scaledCollateralAmount = new BN(
    collateralAmount *
      Math.pow(10, client.getCustodyByMint(collateralMint).decimals),
  );

  const instruction = await client.program.methods
    .openOrIncreasePositionWithSwapShort({
      price: priceWithSlippage,
      collateral: scaledCollateralAmount,
      leverage,
      referrer: null,
    })
    .accountsStrict({
      owner,
      payer: owner,
      fundingAccount,
      collateralAccount,
      receivingCustody,
      receivingCustodyOracle,
      receivingCustodyTokenAccount,
      principalCustody,
      principalCustodyTradeOracle,
      principalCustodyTokenAccount,
      collateralCustody,
      collateralCustodyOracle,
      collateralCustodyTokenAccount,
      transferAuthority: AdrenaClient.transferAuthority,
      cortex: AdrenaClient.cortex,
      lmStaking: AdrenaClient.lmStaking,
      lpStaking: AdrenaClient.lpStaking,
      pool: AdrenaClient.mainPool,
      position,
      stakingRewardTokenCustody: stakingRewardTokenCustodyAccount.pubkey,
      stakingRewardTokenCustodyOracle: stakingRewardTokenCustodyAccount.oracle,
      stakingRewardTokenCustodyTokenAccount,
      lmStakingRewardTokenVault: AdrenaClient.lmStakingRewardTokenVault,
      lpStakingRewardTokenVault: AdrenaClient.lpStakingRewardTokenVault,
      lpTokenMint: AdrenaClient.lpTokenMint,
      userProfile: userProfile ? userProfilePda : null,
      protocolFeeRecipient: client.cortex.protocolFeeRecipient,
      systemProgram: SystemProgram.programId,
      tokenProgram: TOKEN_PROGRAM_ID,
      adrenaProgram: ADRENA_PROGRAM_ID,
    })
    .instruction();

  return sendTx(agent, [...preInstructions, instruction]);
}


================================================
File: src/tools/adrena/index.ts
================================================
export * from "./adrena_perp_trading";


================================================
File: src/tools/agent/create_image.ts
================================================
import { SolanaAgentKit } from "../../index";
import OpenAI from "openai";

/**
 * Generate an image using OpenAI's DALL-E
 * @param agent SolanaAgentKit instance
 * @param prompt Text description of the image to generate
 * @param size Image size ('256x256', '512x512', or '1024x1024') (default: '1024x1024')
 * @param n Number of images to generate (default: 1)
 * @returns Object containing the generated image URLs
 */
export async function create_image(
  agent: SolanaAgentKit,
  prompt: string,
  size: "256x256" | "512x512" | "1024x1024" = "1024x1024",
  n: number = 1,
) {
  try {
    if (!agent.config.OPENAI_API_KEY) {
      throw new Error("OpenAI API key not found in agent configuration");
    }

    const openai = new OpenAI({
      apiKey: agent.config.OPENAI_API_KEY,
    });

    const response = await openai.images.generate({
      prompt,
      n,
      size,
    });

    return {
      images: response.data.map((img: any) => img.url),
    };
  } catch (error: any) {
    throw new Error(`Image generation failed: ${error.message}`);
  }
}


================================================
File: src/tools/agent/get_info.ts
================================================
import { SolanaAgentKit } from "../../index";
import OpenAI from "openai";
import { ChatCompletionMessageParam } from "openai/resources";

/**
 * Get detailed and latest information about any topic using Perplexity AI.
 * @param agent SolanaAgentKit instance
 * @param prompt Text description of the topic to get information about
 * @returns Object containing the generated information
 */
export async function get_info(agent: SolanaAgentKit, prompt: string) {
  try {
    if (!agent.config.PERPLEXITY_API_KEY) {
      throw new Error("Perplexity API key not found in agent configuration");
    }

    const perplexity = new OpenAI({
      apiKey: agent.config.PERPLEXITY_API_KEY,
      baseURL: "https://api.perplexity.ai",
    });

    const messages: ChatCompletionMessageParam[] = [
      {
        role: "system",
        content:
          "You are an artificial intelligence assistant and you need to " +
          "engage in a helpful, detailed, polite conversation with a user.",
      },
      {
        role: "user",
        content: prompt,
      },
    ];

    const response = await perplexity.chat.completions.create({
      model: "llama-3.1-sonar-large-128k-online",
      messages,
    });

    return response.choices[0].message.content;
  } catch (error: any) {
    console.error(error);
    throw new Error(`Perplexity failed: ${error.message}`);
  }
}


================================================
File: src/tools/agent/get_wallet_address.ts
================================================
import { SolanaAgentKit } from "../../agent";

/**
 * Get the agents wallet address
 * @param agent - SolanaAgentKit instance
 * @returns string
 */
export function get_wallet_address(agent: SolanaAgentKit) {
  return agent.wallet_address.toBase58();
}


================================================
File: src/tools/agent/index.ts
================================================
export * from "./create_image";
export * from "./get_wallet_address";
export * from "./get_info";


================================================
File: src/tools/alldomains/get_all_domains_tlds.ts
================================================
import { SolanaAgentKit } from "../../index";
import { getAllTld } from "@onsol/tldparser";

/**
 * Get all active top-level domains (TLDs) in the AllDomains Name Service
 * @param agent SolanaAgentKit instance
 * @returns Array of active TLD strings
 */
export async function getAllDomainsTLDs(
  agent: SolanaAgentKit,
): Promise<string[]> {
  try {
    const tlds = await getAllTld(agent.connection);
    return tlds.map((tld) => String(tld.tld));
  } catch (error: any) {
    throw new Error(`Failed to fetch TLDs: ${error.message}`);
  }
}


================================================
File: src/tools/alldomains/get_owned_all_domains.ts
================================================
import { SolanaAgentKit } from "../../agent";
import { PublicKey } from "@solana/web3.js";
import { TldParser } from "@onsol/tldparser";

/**
 * Get all domains owned domains for a specific TLD for the agent's wallet
 * @param agent SolanaAgentKit instance
 * @param owner - PublicKey of the owner
 * @returns Promise resolving to an array of owned domains or an empty array if none are found
 */
export async function getOwnedAllDomains(
  agent: SolanaAgentKit,
  owner: PublicKey,
): Promise<string[]> {
  try {
    const domains = await new TldParser(
      agent.connection,
    ).getParsedAllUserDomains(owner);
    return domains.map((domain) => domain.domain);
  } catch (error: any) {
    throw new Error(`Failed to fetch owned domains: ${error.message}`);
  }
}


================================================
File: src/tools/alldomains/get_owned_domains_for_tld.ts
================================================
import { TldParser } from "@onsol/tldparser";
import { SolanaAgentKit } from "../../agent";
/**
 * Get all domains owned by an address for a specific TLD
 * @param agent SolanaAgentKit instance
 * @param tld Top-level domain (e.g., "sol")
 * @returns Promise resolving to an array of owned domain names for the specified TLD or an empty array if none are found
 */
export async function getOwnedDomainsForTLD(
  agent: SolanaAgentKit,
  tld: string,
): Promise<string[]> {
  try {
    const domains = await new TldParser(
      agent.connection,
    ).getParsedAllUserDomainsFromTld(agent.wallet_address, tld);
    return domains.map((domain) => domain.domain);
  } catch (error: any) {
    throw new Error(`Failed to fetch domains for TLD: ${error.message}`);
  }
}


================================================
File: src/tools/alldomains/index.ts
================================================
export * from "./get_all_domains_tlds";
export * from "./get_owned_all_domains";
export * from "./get_owned_domains_for_tld";
export * from "./resolve_domain";


================================================
File: src/tools/alldomains/resolve_domain.ts
================================================
import { TldParser } from "@onsol/tldparser";
import { SolanaAgentKit } from "../../agent";
import { PublicKey } from "@solana/web3.js";

/**
 * Resolve all domains for a given agent and domain
 * @param agent SolanaAgentKit instance
 * @param domain Domain name to resolve
 * @returns Promise resolving to the domain or undefined if not found
 */
export async function resolveAllDomains(
  agent: SolanaAgentKit,
  domain: string,
): Promise<PublicKey | undefined> {
  try {
    const tld = await new TldParser(agent.connection).getOwnerFromDomainTld(
      domain,
    );
    return tld;
  } catch (error: any) {
    if (
      error.message.includes(
        "Cannot read properties of undefined (reading 'owner')",
      )
    ) {
      return undefined;
    }
    throw new Error(`Domain resolution failed: ${error.message}`);
  }
}


================================================
File: src/tools/allora/get_all_topics.ts
================================================
import {
  AlloraAPIClient,
  AlloraAPIClientConfig,
  AlloraTopic,
  ChainSlug,
} from "@alloralabs/allora-sdk";
import { SolanaAgentKit } from "../../agent";

export async function getAllTopics(
  agent: SolanaAgentKit,
): Promise<AlloraTopic[]> {
  try {
    const chainSlug =
      agent.config.ALLORA_NETWORK === "mainnet"
        ? ChainSlug.MAINNET
        : ChainSlug.TESTNET;
    const apiKey = agent.config.ALLORA_API_KEY || "UP-d33e797de5134909854be2b7";
    const apiUrl = agent.config.ALLORA_API_URL || "";

    const config: AlloraAPIClientConfig = {
      apiKey: apiKey,
      chainSlug: chainSlug,
      baseAPIUrl: apiUrl,
    };
    const client = new AlloraAPIClient(config);

    const topics = await client.getAllTopics();

    return topics;
  } catch (error: any) {
    throw new Error(`Error fetching topics from Allora: ${error.message}`);
  }
}


================================================
File: src/tools/allora/get_inference_by_topic_id.ts
================================================
import {
  AlloraAPIClient,
  AlloraAPIClientConfig,
  AlloraInference,
  ChainSlug,
} from "@alloralabs/allora-sdk";
import { SolanaAgentKit } from "../../agent";

export async function getInferenceByTopicId(
  agent: SolanaAgentKit,
  topicId: number,
): Promise<AlloraInference> {
  try {
    const chainSlug =
      agent.config.ALLORA_NETWORK === "mainnet"
        ? ChainSlug.MAINNET
        : ChainSlug.TESTNET;
    const apiKey = agent.config.ALLORA_API_KEY || "UP-d33e797de5134909854be2b7";
    const apiUrl = agent.config.ALLORA_API_URL || "";

    const config: AlloraAPIClientConfig = {
      apiKey: apiKey,
      chainSlug: chainSlug,
      baseAPIUrl: apiUrl,
    };
    const client = new AlloraAPIClient(config);
    const inference = await client.getInferenceByTopicID(topicId);

    return inference;
  } catch (error: any) {
    throw new Error(`Error fetching inference from Allora: ${error.message}`);
  }
}


================================================
File: src/tools/allora/get_price_inference.ts
================================================
import {
  AlloraAPIClient,
  PriceInferenceTimeframe,
  PriceInferenceToken,
  AlloraAPIClientConfig,
  ChainSlug,
} from "@alloralabs/allora-sdk";
import { SolanaAgentKit } from "../../agent";

export async function getPriceInference(
  agent: SolanaAgentKit,
  tokenSymbol: string,
  timeframe: string,
): Promise<string> {
  try {
    const chainSlug =
      agent.config.ALLORA_NETWORK === "mainnet"
        ? ChainSlug.MAINNET
        : ChainSlug.TESTNET;
    const apiKey = agent.config.ALLORA_API_KEY || "UP-d33e797de5134909854be2b7";
    const apiUrl = agent.config.ALLORA_API_URL || "";

    const config: AlloraAPIClientConfig = {
      apiKey: apiKey,
      chainSlug: chainSlug,
      baseAPIUrl: apiUrl,
    };
    const client = new AlloraAPIClient(config);
    const inference = await client.getPriceInference(
      tokenSymbol as PriceInferenceToken,
      timeframe as PriceInferenceTimeframe,
    );

    return inference.inference_data.network_inference_normalized;
  } catch (error: any) {
    throw new Error(
      `Error fetching price inference from Allora: ${error.message}`,
    );
  }
}


================================================
File: src/tools/allora/index.ts
================================================
export * from "./get_price_inference";
export * from "./get_inference_by_topic_id";
export * from "./get_all_topics";


================================================
File: src/tools/dexscreener/get_token_data.ts
================================================
import { PublicKey } from "@solana/web3.js";
import { JupiterTokenData } from "../../types";

export async function getTokenDataByAddress(
  mint: PublicKey,
): Promise<JupiterTokenData | undefined> {
  try {
    if (!mint) {
      throw new Error("Mint address is required");
    }

    const response = await fetch(`https://tokens.jup.ag/token/${mint}`, {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
      },
    });

    const token = (await response.json()) as JupiterTokenData;
    return token;
  } catch (error: any) {
    throw new Error(`Error fetching token data: ${error.message}`);
  }
}

export async function getTokenAddressFromTicker(
  ticker: string,
): Promise<string | null> {
  try {
    const response = await fetch(
      `https://api.dexscreener.com/latest/dex/search?q=${ticker}`,
    );
    const data = await response.json();

    if (!data.pairs || data.pairs.length === 0) {
      return null;
    }

    // Filter for Solana pairs only and sort by FDV
    let solanaPairs = data.pairs
      .filter((pair: any) => pair.chainId === "solana")
      .sort((a: any, b: any) => (b.fdv || 0) - (a.fdv || 0));

    solanaPairs = solanaPairs.filter(
      (pair: any) =>
        pair.baseToken.symbol.toLowerCase() === ticker.toLowerCase(),
    );

    // Return the address of the highest FDV Solana pair
    return solanaPairs[0].baseToken.address;
  } catch (error) {
    console.error("Error fetching token address from DexScreener:", error);
    return null;
  }
}

export async function getTokenDataByTicker(
  ticker: string,
): Promise<JupiterTokenData | undefined> {
  const address = await getTokenAddressFromTicker(ticker);
  if (!address) {
    throw new Error(`Token address not found for ticker: ${ticker}`);
  }
  return getTokenDataByAddress(new PublicKey(address));
}


================================================
File: src/tools/dexscreener/index.ts
================================================
export * from "./get_token_data";


================================================
File: src/tools/drift/drift.ts
================================================
import {
  BASE_PRECISION,
  BigNum,
  BulkAccountLoader,
  calculateDepositRate,
  calculateEstimatedEntryPriceWithL2,
  calculateInterestRate,
  calculateLongShortFundingRateAndLiveTwaps,
  convertToNumber,
  DRIFT_PROGRAM_ID,
  DriftClient,
  FastSingleTxSender,
  FUNDING_RATE_BUFFER_PRECISION,
  FUNDING_RATE_PRECISION_EXP,
  getInsuranceFundStakeAccountPublicKey,
  getLimitOrderParams,
  getMarketOrderParams,
  getTokenAmount,
  getUserAccountPublicKeySync,
  isVariant,
  JupiterClient,
  MainnetPerpMarkets,
  MainnetSpotMarkets,
  numberToSafeBN,
  PERCENTAGE_PRECISION,
  PositionDirection,
  PostOnlyParams,
  PRICE_PRECISION,
  QUOTE_PRECISION,
  User,
  type IWallet,
} from "@drift-labs/sdk";
import type { SolanaAgentKit } from "../../agent";
import * as anchor from "@coral-xyz/anchor";
import { IDL, VAULT_PROGRAM_ID, VaultClient } from "@drift-labs/vaults-sdk";
import { getAssociatedTokenAddressSync } from "@solana/spl-token";
import { PublicKey } from "@solana/web3.js";
import { Transaction } from "@solana/web3.js";
import { ComputeBudgetProgram } from "@solana/web3.js";
import type { RawL2Output } from "./types";
import { MINIMUM_COMPUTE_PRICE_FOR_COMPLEX_ACTIONS } from "../../constants";

export async function initClients(
  agent: SolanaAgentKit,
  params?: {
    authority: PublicKey;
    activeSubAccountId: number;
    subAccountIds: number[];
  },
) {
  const wallet: IWallet = {
    publicKey: agent.wallet.publicKey,
    payer: agent.wallet,
    signAllTransactions: async (txs) => {
      for (const tx of txs) {
        tx.sign(agent.wallet);
      }
      return txs;
    },
    signTransaction: async (tx) => {
      tx.sign(agent.wallet);
      return tx;
    },
  };

  // @ts-expect-error - false undefined type conflict
  const driftClient = new DriftClient({
    connection: agent.connection,
    wallet,
    env: "mainnet-beta",
    authority: params?.authority,
    activeSubAccountId: params?.activeSubAccountId,
    subAccountIds: params?.subAccountIds,
    txParams: {
      computeUnitsPrice: MINIMUM_COMPUTE_PRICE_FOR_COMPLEX_ACTIONS,
    },
    accountSubscription: {
      type: "polling",
      accountLoader: new BulkAccountLoader(agent.connection, "processed", 10),
    },
    txSender: new FastSingleTxSender({
      connection: agent.connection,
      wallet,
      timeout: 30000,
      blockhashRefreshInterval: 1000,
      opts: {
        commitment: agent.connection.commitment ?? "confirmed",
        skipPreflight: false,
        preflightCommitment: agent.connection.commitment ?? "confirmed",
      },
    }),
  });
  const vaultProgram = new anchor.Program(
    IDL,
    VAULT_PROGRAM_ID,
    driftClient.provider,
  );
  const vaultClient = new VaultClient({
    driftClient,
    // @ts-expect-error - type mismatch due to different dep versions
    program: vaultProgram,
    cliMode: false,
  });
  await driftClient.subscribe();

  async function cleanUp() {
    await driftClient.unsubscribe();
  }

  return { driftClient, vaultClient, cleanUp };
}

/**
 * Create a drift user account provided an amount
 * @param amount amount of the token to deposit
 * @param symbol symbol of the token to deposit
 */
export async function createDriftUserAccount(
  agent: SolanaAgentKit,
  amount: number,
  symbol: string,
) {
  try {
    const { driftClient, cleanUp } = await initClients(agent);
    const user = new User({
      driftClient,
      userAccountPublicKey: getUserAccountPublicKeySync(
        new PublicKey(DRIFT_PROGRAM_ID),
        agent.wallet.publicKey,
      ),
    });
    const userAccountExists = await user.exists();
    const token = MainnetSpotMarkets.find(
      (v) => v.symbol === symbol.toUpperCase(),
    );

    if (!token) {
      throw new Error(`Token with symbol ${symbol} not found. Here's a list of available spot markets: ${MainnetSpotMarkets.map(
        (v) => v.symbol,
      ).join(", ")}
      `);
    }

    if (!userAccountExists) {
      const depositAmount = numberToSafeBN(amount, token.precision);
      const [txSignature, account] =
        await driftClient.initializeUserAccountAndDepositCollateral(
          depositAmount,
          getAssociatedTokenAddressSync(token.mint, agent.wallet.publicKey),
        );

      await cleanUp();
      return { txSignature, account };
    }

    await cleanUp();
    return {
      message: "User account already exists",
      account: user.userAccountPublicKey,
    };
  } catch (e) {
    // @ts-expect-error - error message is a string
    throw new Error(`Failed to create user account: ${e.message}`);
  }
}

/**
 * Deposit to your drift user account
 * @param agent
 * @param amount
 * @param symbol
 * @param isRepay
 * @returns
 */
export async function depositToDriftUserAccount(
  agent: SolanaAgentKit,
  amount: number,
  symbol: string,
  isRepay = false,
) {
  try {
    const { driftClient, cleanUp } = await initClients(agent);
    const publicKey = agent.wallet.publicKey;
    const user = new User({
      driftClient,
      userAccountPublicKey: getUserAccountPublicKeySync(
        new PublicKey(DRIFT_PROGRAM_ID),
        publicKey,
      ),
    });
    const userAccountExists = await user.exists();
    const token = MainnetSpotMarkets.find(
      (v) => v.symbol === symbol.toUpperCase(),
    );

    if (!token) {
      throw new Error(
        `Token with symbol ${symbol} not found. Here's a list of available spot markets: ${MainnetSpotMarkets.map(
          (v) => v.symbol,
        ).join(", ")}`,
      );
    }

    if (!userAccountExists) {
      throw new Error("You need to create a Drift user account first.");
    }

    const depositAmount = numberToSafeBN(amount, token.precision);

    const [depInstruction, latestBlockhash] = await Promise.all([
      driftClient.getDepositTxnIx(
        depositAmount,
        token.marketIndex,
        getAssociatedTokenAddressSync(token.mint, publicKey),
        undefined,
        isRepay,
      ),
      driftClient.connection.getLatestBlockhash(),
    ]);

    const tx = new Transaction().add(...depInstruction).add(
      ComputeBudgetProgram.setComputeUnitPrice({
        microLamports: MINIMUM_COMPUTE_PRICE_FOR_COMPLEX_ACTIONS,
      }),
    );
    tx.recentBlockhash = latestBlockhash.blockhash;
    tx.sign(agent.wallet);
    const txSignature = await driftClient.txSender.sendRawTransaction(
      tx.serialize(),
      { ...driftClient.opts },
    );

    await cleanUp();
    return txSignature;
  } catch (e) {
    // @ts-expect-error - error message is a string
    throw new Error(`Failed to deposit to user account: ${e.message}`);
  }
}

export async function withdrawFromDriftUserAccount(
  agent: SolanaAgentKit,
  amount: number,
  symbol: string,
  isBorrow = false,
) {
  try {
    const { driftClient, cleanUp } = await initClients(agent);
    const user = new User({
      driftClient,
      userAccountPublicKey: getUserAccountPublicKeySync(
        new PublicKey(DRIFT_PROGRAM_ID),
        agent.wallet.publicKey,
      ),
    });
    const userAccountExists = await user.exists();

    if (!userAccountExists) {
      throw new Error("You need to create a Drift user account first.");
    }

    const token = MainnetSpotMarkets.find(
      (v) => v.symbol === symbol.toUpperCase(),
    );

    if (!token) {
      throw new Error(
        `Token with symbol ${symbol} not found. Here's a list of available spot markets: ${MainnetSpotMarkets.map(
          (v) => v.symbol,
        ).join(", ")}`,
      );
    }

    const withdrawAmount = numberToSafeBN(amount, token.precision);

    const [withdrawInstruction, latestBlockhash] = await Promise.all([
      driftClient.getWithdrawalIxs(
        withdrawAmount,
        token.marketIndex,
        getAssociatedTokenAddressSync(token.mint, agent.wallet.publicKey),
        !isBorrow,
      ),
      driftClient.connection.getLatestBlockhash(),
    ]);

    const tx = new Transaction().add(...withdrawInstruction).add(
      ComputeBudgetProgram.setComputeUnitPrice({
        microLamports: MINIMUM_COMPUTE_PRICE_FOR_COMPLEX_ACTIONS,
      }),
    );
    tx.recentBlockhash = latestBlockhash.blockhash;
    tx.sign(agent.wallet);

    const txSignature = await driftClient.txSender.sendRawTransaction(
      tx.serialize(),
      { ...driftClient.opts },
    );

    await cleanUp();
    return txSignature;
  } catch (e) {
    // @ts-expect-error - error message is a string
    throw new Error(`Failed to withdraw from user account: ${e.message}`);
  }
}

/**
 * Open a perpetual trade on drift
 * @param agent
 * @param params.amount
 * @param params.symbol
 * @param params.action
 * @param params.type
 * @param params.price this should only be supplied if type is limit
 * @param params.reduceOnly
 */
export async function driftPerpTrade(
  agent: SolanaAgentKit,
  params: {
    amount: number;
    symbol: string;
    action: "long" | "short";
    type: "market" | "limit";
    price?: number | undefined;
  },
) {
  try {
    const { driftClient, cleanUp } = await initClients(agent);
    const user = new User({
      driftClient,
      userAccountPublicKey: getUserAccountPublicKeySync(
        new PublicKey(DRIFT_PROGRAM_ID),
        agent.wallet.publicKey,
      ),
    });
    const userAccountExists = await user.exists();

    if (!userAccountExists) {
      throw new Error("You need to create a Drift user account first.");
    }

    const market = driftClient.getMarketIndexAndType(
      `${params.symbol.toUpperCase()}-PERP`,
    );

    if (!market) {
      throw new Error(
        `Token with symbol ${params.symbol} not found. Here's a list of available perp markets: ${MainnetPerpMarkets.map(
          (v) => v.symbol,
        ).join(", ")}`,
      );
    }

    const baseAssetPrice = driftClient.getOracleDataForPerpMarket(
      market.marketIndex,
    );
    const convertedAmount =
      params.amount / convertToNumber(baseAssetPrice.price, PRICE_PRECISION);

    let signature: anchor.web3.TransactionSignature;

    if (params.type === "limit") {
      if (!params.price) {
        throw new Error("Price is required for limit orders");
      }

      signature = await driftClient.placePerpOrder(
        getLimitOrderParams({
          baseAssetAmount: numberToSafeBN(convertedAmount, BASE_PRECISION),
          reduceOnly: false,
          direction:
            params.action === "long"
              ? PositionDirection.LONG
              : PositionDirection.SHORT,
          marketIndex: market.marketIndex,
          price: numberToSafeBN(params.price, PRICE_PRECISION),
          postOnly: PostOnlyParams.SLIDE,
        }),
        {
          computeUnitsPrice: 0.000001 * 1000000 * 1000000,
        },
      );
    } else {
      signature = await driftClient.placePerpOrder(
        getMarketOrderParams({
          baseAssetAmount: numberToSafeBN(convertedAmount, BASE_PRECISION),
          reduceOnly: false,
          direction:
            params.action === "long"
              ? PositionDirection.LONG
              : PositionDirection.SHORT,
          marketIndex: market.marketIndex,
        }),
        {
          computeUnitsPrice: MINIMUM_COMPUTE_PRICE_FOR_COMPLEX_ACTIONS,
        },
      );
    }

    if (!signature) {
      throw new Error("Failed to place order. Please make sure ");
    }

    await cleanUp();
    return signature;
  } catch (e) {
    // @ts-expect-error - error message is a string
    throw new Error(`Failed to place order: ${e.message}`);
  }
}

/**
 * Check if a user has a drift account
 * @param agent
 */
export async function doesUserHaveDriftAccount(agent: SolanaAgentKit) {
  try {
    const { driftClient, cleanUp } = await initClients(agent);
    const user = new User({
      driftClient,
      userAccountPublicKey: getUserAccountPublicKeySync(
        new PublicKey(DRIFT_PROGRAM_ID),
        agent.wallet.publicKey,
      ),
    });
    await user.subscribe();
    user.getActivePerpPositions();
    const userAccountExists = await user.exists();
    await cleanUp();
    await user.unsubscribe();
    return {
      hasAccount: userAccountExists,
      account: user.userAccountPublicKey,
    };
  } catch (e) {
    // @ts-expect-error - error message is a string
    throw new Error(`Failed to check user account: ${e.message}`);
  }
}

/**
 * Get account info for a drift User
 * @param agent
 * @returns
 */
export async function driftUserAccountInfo(agent: SolanaAgentKit) {
  try {
    const { driftClient, cleanUp } = await initClients(agent);
    const userPublicKey = getUserAccountPublicKeySync(
      new PublicKey(DRIFT_PROGRAM_ID),
      agent.wallet.publicKey,
    );

    const user = new User({
      driftClient,
      userAccountPublicKey: userPublicKey,
    });
    const userAccountExists = await user.exists();

    if (!userAccountExists) {
      throw new Error("User account does not exist");
    }
    await user.subscribe();
    const account = user.getUserAccount();

    const perpPositions = account.perpPositions.map((pos) => ({
      market: MainnetPerpMarkets[pos.marketIndex].symbol,
      baseAssetAmount: convertToNumber(pos.baseAssetAmount, BASE_PRECISION),
      quoteAssetAmount: convertToNumber(
        pos.quoteAssetAmount.abs(),
        QUOTE_PRECISION,
      ),
      quoteEntryAmount: convertToNumber(
        pos.quoteEntryAmount.abs(),
        QUOTE_PRECISION,
      ),
      quoteBreakEvenAmount: convertToNumber(
        pos.quoteBreakEvenAmount.abs(),
        QUOTE_PRECISION,
      ),
      settledPnl: convertToNumber(pos.settledPnl, QUOTE_PRECISION),
      openAsks: pos.openAsks.toNumber(),
      openBids: pos.openBids.toNumber(),
      openOrders: pos.openOrders,
      positionType:
        convertToNumber(pos.baseAssetAmount, BASE_PRECISION) > 0
          ? "long"
          : "short",
    }));
    const spotPositions = account.spotPositions.map((pos) => {
      const spotMarketAccount = driftClient.getSpotMarketAccount(
        pos.marketIndex,
      );

      if (!spotMarketAccount) {
        return;
      }

      const tokenBalance = getTokenAmount(
        pos.scaledBalance,
        spotMarketAccount,
        pos.balanceType,
      );

      return {
        availableBalance:
          (isVariant(pos.balanceType, "borrow") ? -1 : 1) *
          convertToNumber(
            tokenBalance,
            MainnetSpotMarkets[pos.marketIndex].precision,
          ),
        symbol: MainnetSpotMarkets[pos.marketIndex].symbol,
        openAsks: pos.openAsks.toNumber(),
        openBids: pos.openBids.toNumber(),
        openOrders: pos.openOrders,
        type: isVariant(pos.balanceType, "borrow") ? "borrow" : "deposit",
      };
    });

    const overallUserBalance = user.getNetSpotMarketValue();
    const unrealizedPnl = user.getUnrealizedPNL(true);
    const netUSDValue = convertToNumber(
      overallUserBalance.add(unrealizedPnl),
      QUOTE_PRECISION,
    );

    await cleanUp();
    await user.unsubscribe();

    return {
      name: account.name,
      accountAddress: userPublicKey.toBase58(),
      authority: account.authority,
      overallBalance: netUSDValue,
      settledPerpPnl: `$${convertToNumber(account.settledPerpPnl, QUOTE_PRECISION)}`,
      lastActiveSlot: account.lastActiveSlot.toNumber(),
      perpPositions: perpPositions.filter((pos) => pos.baseAssetAmount !== 0),
      spotPositions: spotPositions.filter((pos) => pos?.availableBalance !== 0),
    };
  } catch (e) {
    // @ts-expect-error - error message is a string
    throw new Error(`Failed to check user account: ${e.message}`);
  }
}

/**
 * Get available spot markets on drift protocol
 */
export function getAvailableDriftSpotMarkets() {
  return MainnetSpotMarkets;
}

/**
 * Get available perp markets on drift protocol
 */
export function getAvailableDriftPerpMarkets() {
  return MainnetPerpMarkets;
}

/**
 * Stake a token to the drift insurance fund
 * @param agent
 * @param amount
 * @param symbol
 */
export async function stakeToDriftInsuranceFund(
  agent: SolanaAgentKit,
  amount: number,
  symbol: string,
) {
  try {
    const { cleanUp, driftClient } = await initClients(agent);
    const token = MainnetSpotMarkets.find(
      (v) => v.symbol === symbol.toUpperCase(),
    );

    if (!token) {
      throw new Error(
        `Token with symbol ${symbol} not found. Here's a list of available spot markets: ${MainnetSpotMarkets.map(
          (v) => v.symbol,
        ).join(", ")}`,
      );
    }

    const deriveInsuranceFundStakeAccount =
      getInsuranceFundStakeAccountPublicKey(
        driftClient.program.programId,
        agent.wallet.publicKey,
        token.marketIndex,
      );
    let shouldCreateAccount = false;

    try {
      await driftClient.connection.getAccountInfo(
        deriveInsuranceFundStakeAccount,
      );
    } catch (e) {
      // @ts-expect-error - error message is a string
      if (e.message.includes("Account not found")) {
        shouldCreateAccount = true;
      }
    }

    const signature = await driftClient.addInsuranceFundStake({
      amount: numberToSafeBN(amount, token.precision),
      marketIndex: token.marketIndex,
      collateralAccountPublicKey: getAssociatedTokenAddressSync(
        token.mint,
        agent.wallet.publicKey,
      ),
      initializeStakeAccount: shouldCreateAccount,
      txParams: {
        computeUnitsPrice: MINIMUM_COMPUTE_PRICE_FOR_COMPLEX_ACTIONS,
      },
    });

    await cleanUp();
    return signature;
  } catch (e) {
    // @ts-expect-error - error message is a string
    throw new Error(`Failed to get APYs: ${e.message}`);
  }
}

/**
 * Request an unstake from the drift insurance fund
 * @param agent
 * @param amount
 * @param symbol
 */
export async function requestUnstakeFromDriftInsuranceFund(
  agent: SolanaAgentKit,
  amount: number,
  symbol: string,
) {
  try {
    const { driftClient, cleanUp } = await initClients(agent);
    const token = MainnetSpotMarkets.find(
      (v) => v.symbol === symbol.toUpperCase(),
    );

    if (!token) {
      throw new Error(
        `Token with symbol ${symbol} not found. Here's a list of available spot markets: ${MainnetSpotMarkets.map(
          (v) => v.symbol,
        ).join(", ")}`,
      );
    }

    const signature = await driftClient.requestRemoveInsuranceFundStake(
      token.marketIndex,
      numberToSafeBN(amount, token.precision),
      { computeUnitsPrice: MINIMUM_COMPUTE_PRICE_FOR_COMPLEX_ACTIONS },
    );

    await cleanUp();
    return signature;
  } catch (e) {
    // @ts-expect-error error message is a string
    throw new Error(`Failed to unstake from insurance fund: ${e.message}`);
  }
}

/**
 * Unstake requested funds from the drift insurance fund once cool down period is elapsed
 * @param agent
 * @param symbol
 */
export async function unstakeFromDriftInsuranceFund(
  agent: SolanaAgentKit,
  symbol: string,
) {
  try {
    const { driftClient, cleanUp } = await initClients(agent);
    const token = MainnetSpotMarkets.find(
      (v) => v.symbol === symbol.toUpperCase(),
    );

    if (!token) {
      throw new Error(
        `Token with symbol ${symbol} not found. Here's a list of available spot markets: ${MainnetSpotMarkets.map(
          (v) => v.symbol,
        ).join(", ")}`,
      );
    }

    const signature = await driftClient.removeInsuranceFundStake(
      token.marketIndex,
      getAssociatedTokenAddressSync(token.mint, agent.wallet.publicKey),
      {
        computeUnitsPrice: MINIMUM_COMPUTE_PRICE_FOR_COMPLEX_ACTIONS,
      },
    );

    await cleanUp();
    return signature;
  } catch (e) {
    // @ts-expect-error error message is a string
    throw new Error(`Failed to unstake from insurance fund: ${e.message}`);
  }
}

/**
 * Swap a spot token for another on drift
 * @param agent
 * @param params
 * @param params.fromSymbol symbol of the token to deposit
 * @param params.toSymbol symbol of the token to receive
 * @param params.fromAmount amount of the token to deposit
 * @param params.toAmount amount of the token to receive
 * @param params.slippage slippage tolerance in percentage
 */
export async function swapSpotToken(
  agent: SolanaAgentKit,
  params: {
    fromSymbol: string;
    toSymbol: string;
    slippage?: number | undefined;
  } & (
    | {
        fromAmount: number;
      }
    | {
        toAmount: number;
      }
  ),
) {
  try {
    const { driftClient, cleanUp } = await initClients(agent);
    const fromToken = MainnetSpotMarkets.find(
      (v) => v.symbol === params.fromSymbol.toUpperCase(),
    );
    const toToken = MainnetSpotMarkets.find(
      (v) => v.symbol === params.toSymbol.toUpperCase(),
    );

    if (!fromToken) {
      throw new Error(
        `Token with symbol ${params.fromSymbol} not found. Here's a list of available spot markets: ${MainnetSpotMarkets.map(
          (v) => v.symbol,
        ).join(", ")}`,
      );
    }

    if (!toToken) {
      throw new Error(
        `Token with symbol ${params.toSymbol} not found. Here's a list of available spot markets: ${MainnetSpotMarkets.map(
          (v) => v.symbol,
        ).join(", ")}`,
      );
    }

    let txSig: string;

    // @ts-expect-error - false undefined type conflict
    if (params.fromAmount) {
      const jupiterClient = new JupiterClient({ connection: agent.connection });
      // @ts-expect-error - false undefined type conflict
      const fromAmount = numberToSafeBN(params.fromAmount, fromToken.precision);
      const res = await (
        await fetch(
          `https://quote-api.jup.ag/v6/quote?inputMint=${fromToken.mint}&outputMint=${toToken.mint}&amount=${fromAmount.toNumber()}&slippageBps=${(params.slippage ?? 0.5) * 100}&swapMode=ExactIn`,
        )
      ).json();
      const signature = await driftClient.swap({
        amount: fromAmount,
        inMarketIndex: fromToken.marketIndex,
        outMarketIndex: toToken.marketIndex,
        jupiterClient: jupiterClient,
        v6: {
          quote: res,
        },
        slippageBps: (params.slippage ?? 0.5) * 100,
        swapMode: "ExactIn",
      });

      txSig = signature;
    }

    // @ts-expect-error - false undefined type conflict
    if (params.toAmount) {
      const jupiterClient = new JupiterClient({ connection: agent.connection });
      // @ts-expect-error - false undefined type conflict
      const toAmount = numberToSafeBN(params.toAmount, toToken.precision);
      const res = await (
        await fetch(
          `https://quote-api.jup.ag/v6/quote?inputMint=${fromToken.mint}&outputMint=${toToken.mint}&amount=${toAmount.toNumber()}&slippageBps=${(params.slippage ?? 0.5) * 100}&swapMode=ExactOut`,
        )
      ).json();
      const signature = await driftClient.swap({
        amount: toAmount,
        inMarketIndex: toToken.marketIndex,
        outMarketIndex: fromToken.marketIndex,
        jupiterClient: jupiterClient,
        v6: {
          quote: res,
        },
        slippageBps: (params.slippage ?? 0.5) * 100,
        swapMode: "ExactOut",
      });

      txSig = signature;
    }

    await cleanUp();

    // @ts-expect-error - false use before assignment
    if (txSig) {
      return txSig;
    }

    throw new Error("Either fromAmount or toAmount must be provided");
  } catch (e) {
    // @ts-expect-error error message is a string
    throw new Error(`Failed to swap token: ${e.message}`);
  }
}

/**
 * To get funding rate as a percentage, you need to multiply by the funding rate buffer precision
 * @param rawFundingRate
 */
export function getFundingRateAsPercentage(rawFundingRate: anchor.BN) {
  return BigNum.from(
    rawFundingRate.mul(FUNDING_RATE_BUFFER_PRECISION),
    FUNDING_RATE_PRECISION_EXP,
  ).toNum();
}

/**
 * Calculate the funding rate for a perpetual market
 * @param agent
 * @param marketSymbol
 */
export async function calculatePerpMarketFundingRate(
  agent: SolanaAgentKit,
  marketSymbol: `${string}-PERP`,
  period: "year" | "hour",
) {
  try {
    const { driftClient, cleanUp } = await initClients(agent);
    const market = driftClient.getMarketIndexAndType(
      `${marketSymbol.toUpperCase()}`,
    );

    if (!market) {
      throw new Error(
        `This market isn't available on the Drift Protocol. Here's a list of markets that are: ${MainnetPerpMarkets.map(
          (v) => v.symbol,
        ).join(", ")}`,
      );
    }

    const marketAccount = driftClient.getPerpMarketAccount(market.marketIndex);

    if (!marketAccount) {
      throw new Error("Market account not found");
    }

    const [, , longFundingRate, shortFundingRate] =
      await calculateLongShortFundingRateAndLiveTwaps(
        marketAccount,
        driftClient.getOracleDataForPerpMarket(market.marketIndex),
        undefined,
        new anchor.BN(Date.now()),
      );

    await cleanUp();

    let longFundingRateNum = getFundingRateAsPercentage(longFundingRate);
    let shortFundingRateNum = getFundingRateAsPercentage(shortFundingRate);

    if (period === "year") {
      const paymentsPerYear = 24 * 365.25;

      longFundingRateNum *= paymentsPerYear;
      shortFundingRateNum *= paymentsPerYear;
    }

    const longsArePaying = longFundingRateNum > 0;
    const shortsArePaying = !(shortFundingRateNum > 0);

    const longsAreString = longsArePaying ? "pay" : "receive";
    const shortsAreString = !shortsArePaying ? "receive" : "pay";

    const absoluteLongFundingRateNum = Math.abs(longFundingRateNum);
    const absoluteShortFundingRateNum = Math.abs(shortFundingRateNum);

    const formattedLongRatePct = absoluteLongFundingRateNum.toFixed(
      period === "hour" ? 5 : 2,
    );
    const formattedShortRatePct = absoluteShortFundingRateNum.toFixed(
      period === "hour" ? 5 : 2,
    );

    const paymentUnit = period === "year" ? "% APR" : "%";

    const friendlyString = `At this rate, longs would ${longsAreString} ${formattedLongRatePct} ${paymentUnit} and shorts would ${shortsAreString} ${formattedShortRatePct} ${paymentUnit} at the end of the hour.`;

    return {
      longRate: longsArePaying
        ? -absoluteLongFundingRateNum
        : absoluteLongFundingRateNum,
      shortRate: shortsArePaying
        ? -absoluteShortFundingRateNum
        : absoluteShortFundingRateNum,
      friendlyString,
    };
  } catch (e) {
    throw new Error(
      // @ts-expect-error e.message is a string
      `Something went wrong while trying to get the market's funding rate. Here's some more context: ${e.message}`,
    );
  }
}

export async function getL2OrderBook(marketSymbol: `${string}-PERP`) {
  try {
    const serializedOrderbook: RawL2Output = await (
      await fetch(
        `https://dlob.drift.trade/l2?marketName=${marketSymbol.toUpperCase()}&includeOracle=true`,
      )
    ).json();

    return {
      asks: serializedOrderbook.asks.map((ask) => ({
        price: new anchor.BN(ask.price),
        size: new anchor.BN(ask.size),
        sources: Object.entries(ask.sources).reduce((previous, [key, val]) => {
          return {
            ...(previous ?? {}),
            [key]: new anchor.BN(val),
          };
        }, {}),
      })),
      bids: serializedOrderbook.bids.map((bid) => ({
        price: new anchor.BN(bid.price),
        size: new anchor.BN(bid.size),
        sources: Object.entries(bid.sources).reduce((previous, [key, val]) => {
          return {
            ...(previous ?? {}),
            [key]: new anchor.BN(val),
          };
        }, {}),
      })),
      oracleData: {
        price: serializedOrderbook.oracleData.price
          ? new anchor.BN(serializedOrderbook.oracleData.price)
          : undefined,
        slot: serializedOrderbook.oracleData.slot
          ? new anchor.BN(serializedOrderbook.oracleData.slot)
          : undefined,
        confidence: serializedOrderbook.oracleData.confidence
          ? new anchor.BN(serializedOrderbook.oracleData.confidence)
          : undefined,
        hasSufficientNumberOfDataPoints:
          serializedOrderbook.oracleData.hasSufficientNumberOfDataPoints,
        twap: serializedOrderbook.oracleData.twap
          ? new anchor.BN(serializedOrderbook.oracleData.twap)
          : undefined,
        twapConfidence: serializedOrderbook.oracleData.twapConfidence
          ? new anchor.BN(serializedOrderbook.oracleData.twapConfidence)
          : undefined,
        maxPrice: serializedOrderbook.oracleData.maxPrice
          ? new anchor.BN(serializedOrderbook.oracleData.maxPrice)
          : undefined,
      },
      slot: serializedOrderbook.slot,
    };
  } catch (e) {
    throw new Error(`Failed to get ${marketSymbol} order book: ${e}`);
  }
}

/**
 * Get the estimated entry quote of a perp trade
 * @param agent
 * @param marketSymbol
 * @param amount
 * @param type
 */
export async function getEntryQuoteOfPerpTrade(
  marketSymbol: `${string}-PERP`,
  amount: number,
  type: "long" | "short",
) {
  try {
    const l2OrderBookData = await getL2OrderBook(marketSymbol);
    const estimatedEntryPriceData = calculateEstimatedEntryPriceWithL2(
      "quote",
      numberToSafeBN(amount, BASE_PRECISION),
      type === "long" ? PositionDirection.LONG : PositionDirection.SHORT,
      BASE_PRECISION,
      // @ts-expect-error - false type conflict
      l2OrderBookData,
    );

    return {
      entryPrice: convertToNumber(
        estimatedEntryPriceData.entryPrice,
        QUOTE_PRECISION,
      ),
      priceImpact: convertToNumber(
        estimatedEntryPriceData.priceImpact,
        QUOTE_PRECISION,
      ),
      bestPrice: convertToNumber(
        estimatedEntryPriceData.bestPrice,
        QUOTE_PRECISION,
      ),
      worstPrice: convertToNumber(
        estimatedEntryPriceData.worstPrice,
        QUOTE_PRECISION,
      ),
    };
  } catch (e) {
    // @ts-expect-error - error message is a string
    throw new Error(`Failed to get entry quote: ${e.message}`);
  }
}

/**
 * Get the APY for lending and borrowing a specific token on drift protocol
 * @param agent
 * @param symbol
 */
export async function getLendingAndBorrowAPY(
  agent: SolanaAgentKit,
  symbol: string,
) {
  try {
    const { driftClient, cleanUp } = await initClients(agent);
    const token = MainnetSpotMarkets.find(
      (v) => v.symbol === symbol.toUpperCase(),
    );

    if (!token) {
      throw new Error(
        `Token with symbol ${symbol} not found. Here's a list of available spot markets: ${MainnetSpotMarkets.map(
          (v) => v.symbol,
        ).join(", ")}`,
      );
    }

    const marketAccount = driftClient.getSpotMarketAccount(token.marketIndex);

    if (!marketAccount) {
      throw new Error("Market account not found");
    }

    const lendAPY = calculateDepositRate(marketAccount);
    const borrowAPY = calculateInterestRate(marketAccount);

    await cleanUp();

    return {
      lendingAPY: convertToNumber(lendAPY, PERCENTAGE_PRECISION) * 100, // convert to percentage
      borrowAPY: convertToNumber(borrowAPY, PERCENTAGE_PRECISION) * 100, // convert to percentage
    };
  } catch (e) {
    // @ts-expect-error - error message is a string
    throw new Error(`Failed to get APYs: ${e.message}`);
  }
}


================================================
File: src/tools/drift/drift_vault.ts
================================================
import {
  BASE_PRECISION,
  convertToNumber,
  getLimitOrderParams,
  getMarketOrderParams,
  getOrderParams,
  MainnetPerpMarkets,
  MainnetSpotMarkets,
  MarketType,
  numberToSafeBN,
  PERCENTAGE_PRECISION,
  PositionDirection,
  PostOnlyParams,
  PRICE_PRECISION,
  QUOTE_PRECISION,
  TEN,
} from "@drift-labs/sdk";
import {
  WithdrawUnit,
  decodeName,
  encodeName,
  getVaultAddressSync,
  getVaultDepositorAddressSync,
} from "@drift-labs/vaults-sdk";
import {
  ComputeBudgetProgram,
  PublicKey,
  type TransactionInstruction,
} from "@solana/web3.js";
import type { SolanaAgentKit } from "../../agent";
import { BN } from "bn.js";
import { initClients } from "./drift";

export function getMarketIndexAndType(name: `${string}-${string}`) {
  const [symbol, type] = name.toUpperCase().split("-");

  if (type === "PERP") {
    const token = MainnetPerpMarkets.find((v) => v.baseAssetSymbol === symbol);
    if (!token) {
      throw new Error(
        `Drift doesn't have that market. Here's a list of available perp markets: ${MainnetPerpMarkets.map((v) => v.baseAssetSymbol).join(", ")}`,
      );
    }
    return { marketIndex: token.marketIndex, marketType: MarketType.PERP };
  }

  const token = MainnetSpotMarkets.find((v) => v.symbol === symbol);
  if (!token) {
    throw new Error(
      `Drift doesn't have that market. Here's a list of available spot markets: ${MainnetSpotMarkets.map((v) => v.symbol).join(", ")}`,
    );
  }
  return { marketIndex: token.marketIndex, marketType: MarketType.SPOT };
}

async function getOrCreateVaultDepositor(agent: SolanaAgentKit, vault: string) {
  const { vaultClient, cleanUp } = await initClients(agent);
  const vaultPublicKey = new PublicKey(vault);
  const vaultDepositor = getVaultDepositorAddressSync(
    vaultClient.program.programId,
    vaultPublicKey,
    agent.wallet.publicKey,
  );

  try {
    await vaultClient.getVaultDepositor(vaultDepositor);
    await cleanUp();
    return vaultDepositor;
  } catch (e) {
    // @ts-expect-error - error message is a string
    if (e.message.includes("Account does not exist")) {
      await vaultClient.initializeVaultDepositor(
        vaultPublicKey,
        agent.wallet.publicKey,
      );
    }
    await new Promise((resolve) => setTimeout(resolve, 2000));
    await cleanUp();
    return vaultDepositor;
  }
}

async function getVaultAvailableBalance(agent: SolanaAgentKit, vault: string) {
  try {
    const { cleanUp, vaultClient } = await initClients(agent);
    const vaultDetails = await vaultClient.getVault(new PublicKey(vault));

    const currentVaultBalance = convertToNumber(
      vaultDetails.netDeposits,
      QUOTE_PRECISION,
    );
    const vaultWithdrawalsRequested = convertToNumber(
      vaultDetails.totalWithdrawRequested,
      QUOTE_PRECISION,
    );
    const availableBalanceInUSD =
      currentVaultBalance - vaultWithdrawalsRequested;

    await cleanUp();

    return availableBalanceInUSD;
  } catch (e) {
    // @ts-expect-error - error message is a string
    throw new Error(`Failed to get vault available balance: ${e.message}`);
  }
}

/**
  Create a vault
  @param agent SolanaAgentKit instance
  @param params Vault creation parameters
  @param params.name Name of the vault (must be unique)
  @param params.marketName Market name of the vault (e.g. "USDC-SPOT")
  @param params.redeemPeriod Redeem period in seconds
  @param params.maxTokens Maximum amount that can be deposited into the vault (in tokens)
  @param params.minDepositAmount Minimum amount that can be deposited into the vault (in tokens)
  @param params.managementFee Management fee percentage (e.g 2 == 2%)
  @param params.profitShare Profit share percentage (e.g 20 == 20%)
  @param params.hurdleRate Hurdle rate percentage
  @param params.permissioned Whether the vault uses a whitelist
  @returns Promise<anchor.Web3.TransactionSignature> - The transaction signature of the vault creation
*/
export async function createVault(
  agent: SolanaAgentKit,
  params: {
    name: string;
    marketName: `${string}-${string}`;
    redeemPeriod: number;
    maxTokens: number;
    minDepositAmount: number;
    managementFee: number;
    profitShare: number;
    hurdleRate?: number;
    permissioned?: boolean;
  },
) {
  try {
    const { vaultClient, driftClient, cleanUp } = await initClients(agent);
    const marketIndexAndType = getMarketIndexAndType(params.marketName);

    const spotMarket = driftClient.getSpotMarketAccount(
      marketIndexAndType.marketIndex,
    );

    if (!spotMarket) {
      throw new Error(
        `Market not found. Here's a list of available spot markets: ${MainnetSpotMarkets.map((v) => `${v.symbol}-SPOT`).join(", ")}`,
      );
    }

    const spotPrecision = TEN.pow(new BN(spotMarket.decimals));

    if (marketIndexAndType.marketType === MarketType.PERP) {
      throw new Error(
        `Only SPOT market names are supported. Such as ${MainnetSpotMarkets.map((v) => `${v.symbol}-SPOT`).join(", ")}`,
      );
    }

    const tx = await vaultClient.initializeVault({
      name: encodeName(params.name),
      spotMarketIndex: marketIndexAndType.marketIndex,
      hurdleRate: new BN(params.hurdleRate ?? 0)
        .mul(PERCENTAGE_PRECISION)
        .div(new BN(100))
        .toNumber(),
      profitShare: new BN(params.profitShare)
        .mul(PERCENTAGE_PRECISION)
        .div(new BN(100))
        .toNumber(),
      minDepositAmount: numberToSafeBN(params.minDepositAmount, spotPrecision),
      redeemPeriod: new BN(params.redeemPeriod * 86400),
      maxTokens: numberToSafeBN(params.maxTokens, spotPrecision),
      managementFee: new BN(params.managementFee)
        .mul(PERCENTAGE_PRECISION)
        .div(new BN(100)),
      permissioned: params.permissioned ?? false,
    });

    await cleanUp();

    return tx;
  } catch (e) {
    // @ts-expect-error - error message is a string
    throw new Error(`Failed to create Drift vault: ${e.message}`);
  }
}

export async function updateVaultDelegate(
  agent: SolanaAgentKit,
  vault: string,
  delegateAddress: string,
) {
  try {
    const { vaultClient, cleanUp } = await initClients(agent);
    const signature = await vaultClient.updateDelegate(
      new PublicKey(vault),
      new PublicKey(delegateAddress),
    );
    await cleanUp();
    return signature;
  } catch (e) {
    throw new Error(
      // @ts-expect-error - error message is a string
      `Failed to update vault delegate: ${e.message}`,
    );
  }
}

/**
  Update the vault's info
  @param agent SolanaAgentKit instance
  @param vault Vault address
  @param params Vault update parameters
  @param params.redeemPeriod Redeem period in seconds
  @param params.maxTokens Maximum amount that can be deposited into the vault (in tokens)
  @param params.minDepositAmount Minimum amount that can be deposited into the vault (in tokens)
  @param params.managementFee Management fee percentage (e.g 2 == 2%)
  @param params.profitShare Profit share percentage (e.g 20 == 20%)
  @param params.hurdleRate Hurdle rate percentage
  @param params.permissioned Whether the vault uses a whitelist
  @returns Promise<anchor.Web3.TransactionSignature> - The transaction signature of the vault update
*/
export async function updateVault(
  agent: SolanaAgentKit,
  vault: string,
  params: {
    redeemPeriod?: number;
    maxTokens?: number;
    minDepositAmount?: number;
    managementFee?: number;
    profitShare?: number;
    hurdleRate?: number;
    permissioned?: boolean;
  },
) {
  try {
    const { vaultClient, cleanUp, driftClient } = await initClients(agent);
    const vaultPublicKey = new PublicKey(vault);
    const vaultDetails = await vaultClient.getVault(vaultPublicKey);

    const spotMarket = driftClient.getSpotMarketAccount(
      vaultDetails.spotMarketIndex,
    );

    if (!spotMarket) {
      throw new Error(
        "Market not found. This vault's market is no longer supported",
      );
    }

    const spotPrecision = TEN.pow(new BN(spotMarket.decimals));

    const tx = await vaultClient.managerUpdateVault(vaultPublicKey, {
      redeemPeriod: params.redeemPeriod
        ? new BN(params.redeemPeriod * 86400)
        : null,
      maxTokens: params.maxTokens
        ? numberToSafeBN(params.maxTokens, spotPrecision)
        : null,
      minDepositAmount: params.minDepositAmount
        ? numberToSafeBN(params.minDepositAmount, spotPrecision)
        : null,
      managementFee: params.managementFee
        ? new BN(params.managementFee)
            .mul(PERCENTAGE_PRECISION)
            .div(new BN(100))
        : null,
      profitShare: params.profitShare
        ? new BN(params.profitShare)
            .mul(PERCENTAGE_PRECISION)
            .div(new BN(100))
            .toNumber()
        : null,
      hurdleRate: params.hurdleRate
        ? new BN(params.hurdleRate)
            .mul(PERCENTAGE_PRECISION)
            .div(new BN(100))
            .toNumber()
        : null,
      permissioned: params.permissioned ?? vaultDetails.permissioned,
    });

    await cleanUp();

    return tx;
  } catch (e) {
    // @ts-expect-error - error message is a string
    throw new Error(`Failed to update Drift vault: ${e.message}`);
  }
}

export const validateAndEncodeAddress = (input: string, programId: string) => {
  try {
    return new PublicKey(input);
  } catch {
    return getVaultAddressSync(new PublicKey(programId), encodeName(input));
  }
};

/**
 * Get information on a particular vault given its name
 * @param agent
 * @param vaultNameOrAddress
 * @returns
 */
export async function getVaultInfo(
  agent: SolanaAgentKit,
  vaultNameOrAddress: string,
) {
  try {
    const { vaultClient, cleanUp } = await initClients(agent);
    const vaultPublicKey = validateAndEncodeAddress(
      vaultNameOrAddress,
      vaultClient.program.programId.toBase58(),
    );
    const [vaultDetails, vaultBalance] = await Promise.all([
      vaultClient.getVault(vaultPublicKey),
      getVaultAvailableBalance(agent, vaultPublicKey.toBase58()),
    ]);

    await cleanUp();

    const spotToken = MainnetSpotMarkets[vaultDetails.spotMarketIndex];
    const data = {
      name: decodeName(vaultDetails.name),
      delegate: vaultDetails.delegate.toBase58(),
      address: vaultPublicKey.toBase58(),
      marketName: `${spotToken.symbol}-SPOT`,
      balance: `${vaultBalance} ${spotToken.symbol}`,
      redeemPeriod: vaultDetails.redeemPeriod.toNumber(),
      maxTokens: vaultDetails.maxTokens.div(spotToken.precision).toNumber(),
      minDepositAmount: vaultDetails.minDepositAmount
        .div(spotToken.precision)
        .toNumber(),
      managementFee:
        (vaultDetails.managementFee.toNumber() /
          PERCENTAGE_PRECISION.toNumber()) *
        100,
      profitShare:
        (vaultDetails.profitShare / PERCENTAGE_PRECISION.toNumber()) * 100,
      hurdleRate:
        (vaultDetails.hurdleRate / PERCENTAGE_PRECISION.toNumber()) * 100,
      permissioned: vaultDetails.permissioned,
    };

    return data;
  } catch (e) {
    // @ts-expect-error - error message is a string
    throw new Error(`Failed to get vault info: ${e.message}`);
  }
}

/**
  Deposit tokens into a vault
  @param agent SolanaAgentKit instance
  @param amount Amount to deposit into the vault (in tokens)
  @param vault Vault address
  @returns Promise<anchor.Web3.TransactionSignature> - The transaction signature of the deposit
*/
export async function depositIntoVault(
  agent: SolanaAgentKit,
  amount: number,
  vault: string,
) {
  const { vaultClient, driftClient, cleanUp } = await initClients(agent);

  try {
    const vaultPublicKey = new PublicKey(vault);
    const [isOwned, vaultDetails, vaultDepositor] = await Promise.all([
      getIsOwned(agent, vault),
      vaultClient.getVault(vaultPublicKey),
      getOrCreateVaultDepositor(agent, vault),
    ]);
    const spotMarket = driftClient.getSpotMarketAccount(
      vaultDetails.spotMarketIndex,
    );

    if (!spotMarket) {
      throw new Error(
        "Market not found. This vaults market is no longer supported",
      );
    }

    const spotPrecision = TEN.pow(new BN(spotMarket.decimals));
    const amountBN = numberToSafeBN(amount, spotPrecision);

    if (isOwned) {
      return await vaultClient.managerDeposit(vaultPublicKey, amountBN);
    }

    const tx = await vaultClient.deposit(vaultDepositor, amountBN);

    await cleanUp();

    return tx;
  } catch (e) {
    // @ts-expect-error - error message is a string
    throw new Error(`Failed to deposit into Drift vault: ${e.message}`);
  }
}

/**
  Request a withdrawal from a vault. If successful redemption period starts and the user can redeem the tokens after the period ends
  @param agent SolanaAgentKit instance
  @param amount Amount to withdraw from the vault (in shares)
  @param vault Vault address
*/
export async function requestWithdrawalFromVault(
  agent: SolanaAgentKit,
  amount: number,
  vault: string,
) {
  try {
    const { vaultClient, cleanUp } = await initClients(agent);
    const vaultPublicKey = new PublicKey(vault);
    const isOwned = await getIsOwned(agent, vault);

    if (isOwned) {
      return await vaultClient.managerRequestWithdraw(
        vaultPublicKey,
        numberToSafeBN(amount, QUOTE_PRECISION),
        WithdrawUnit.TOKEN,
      );
    }

    const vaultDepositor = await getOrCreateVaultDepositor(agent, vault);

    const tx = await vaultClient.requestWithdraw(
      vaultDepositor,
      numberToSafeBN(amount, QUOTE_PRECISION),
      WithdrawUnit.TOKEN,
    );

    await cleanUp();

    return tx;
  } catch (e) {
    throw new Error(
      // @ts-expect-error - error message is a string
      `Failed to request withdrawal from Drift vault: ${e.message}`,
    );
  }
}

/**
  Withdraw tokens once the redemption period has elapsed.
  @param agent SolanaAgentKit instance
  @param vault Vault address
  @returns Promise<anchor.Web3.TransactionSignature> - The transaction signature of the redemption
*/
export async function withdrawFromDriftVault(
  agent: SolanaAgentKit,
  vault: string,
) {
  try {
    const { vaultClient, cleanUp } = await initClients(agent);
    const vaultPublicKey = new PublicKey(vault);
    const isOwned = await getIsOwned(agent, vault);

    if (isOwned) {
      return await vaultClient.managerWithdraw(vaultPublicKey);
    }

    const vaultDepositor = await getOrCreateVaultDepositor(agent, vault);

    const tx = await vaultClient.withdraw(vaultDepositor);

    await cleanUp();

    return tx;
  } catch (e) {
    // @ts-expect-error - error message is a string
    throw new Error(`Failed to redeem tokens from Drift vault: ${e.message}`);
  }
}

/**
  Get if vault is owned by the user
  @param agent SolanaAgentKit instance
  @param vault Vault address
  @returns Promise<boolean> - Whether the vault is owned by the user
*/
async function getIsOwned(agent: SolanaAgentKit, vault: string) {
  try {
    const { vaultClient, cleanUp } = await initClients(agent);
    const vaultPublicKey = new PublicKey(vault);
    const vaultDetails = await vaultClient.getVault(vaultPublicKey);
    const isOwned = vaultDetails.manager.equals(agent.wallet.publicKey);

    await cleanUp();

    return isOwned;
  } catch (e) {
    // @ts-expect-error - error message is a string
    throw new Error(`Failed to check if vault is owned: ${e.message}`);
  }
}

/**
 * Get a vaults address using the vault's name
 * @param agent
 * @param name
 */
export async function getVaultAddress(agent: SolanaAgentKit, name: string) {
  const encodedName = encodeName(name);

  try {
    const { vaultClient, cleanUp } = await initClients(agent);
    const vaultAddress = getVaultAddressSync(
      vaultClient.program.programId,
      encodedName,
    );

    await cleanUp();
    return vaultAddress;
  } catch (e) {
    throw new Error(
      // @ts-expect-error - error message is a string
      `Failed to get vault address: ${e.message}`,
    );
  }
}

/**
  Carry out a trade with a delegated vault
  @param agent SolanaAgentKit instance
  @param amount Amount to trade (in tokens)
  @param symbol Symbol of the token to trade
  @param action Action to take (e.g. "buy" or "sell")
  @param type Type of trade (e.g. "market" or "limit")
  @param vault Vault address
*/
export async function tradeDriftVault(
  agent: SolanaAgentKit,
  vault: string,
  amount: number,
  symbol: string,
  action: "long" | "short",
  type: "market" | "limit",
  price?: number,
) {
  try {
    const { driftClient, cleanUp } = await initClients(agent, {
      authority: new PublicKey(vault),
      activeSubAccountId: 0,
      subAccountIds: [0],
    });
    const [isOwned, driftLookupTableAccount] = await Promise.all([
      getIsOwned(agent, vault),
      driftClient.fetchMarketLookupTableAccount(),
    ]);

    if (!isOwned) {
      throw new Error(
        "This vault is owned/delegated to someone else, you can't trade with it",
      );
    }

    const usdcSpotMarket = driftClient.getSpotMarketAccount(0);
    if (!usdcSpotMarket) {
      throw new Error("USDC-SPOT market not found");
    }

    const perpMarketIndexAndType = getMarketIndexAndType(
      `${symbol.toUpperCase()}-PERP`,
    );
    const perpMarketAccount = driftClient.getPerpMarketAccount(
      perpMarketIndexAndType.marketIndex,
    );

    if (!perpMarketIndexAndType || !perpMarketAccount) {
      throw new Error(
        "Invalid symbol: Drift doesn't have a market for this token",
      );
    }

    const perpOracle = driftClient.getOracleDataForPerpMarket(
      perpMarketAccount.marketIndex,
    );
    const oraclePriceNumber = convertToNumber(
      perpOracle.price,
      PRICE_PRECISION,
    );
    const baseAmount = amount / oraclePriceNumber;
    const instructions: TransactionInstruction[] = [];

    instructions.push(
      ComputeBudgetProgram.setComputeUnitLimit({ units: 1400000 }),
    );

    if (type === "limit" || price) {
      if (!price) {
        throw new Error("Price is required for limit orders");
      }

      const instruction = await driftClient.getPlaceOrdersIx([
        getOrderParams(
          getLimitOrderParams({
            price: numberToSafeBN(price, PRICE_PRECISION),
            marketType: MarketType.PERP,
            baseAssetAmount: numberToSafeBN(baseAmount, BASE_PRECISION),
            direction:
              action === "long"
                ? PositionDirection.LONG
                : PositionDirection.SHORT,
            marketIndex: perpMarketAccount.marketIndex,
            postOnly: PostOnlyParams.SLIDE,
          }),
        ),
      ]);

      instructions.push(instruction);
    } else {
      // defaults to market order if type is not limit and price is not provided
      const instruction = await driftClient.getPlaceOrdersIx([
        getOrderParams(
          getMarketOrderParams({
            marketType: MarketType.PERP,
            baseAssetAmount: numberToSafeBN(baseAmount, BASE_PRECISION),
            direction:
              action === "long"
                ? PositionDirection.LONG
                : PositionDirection.SHORT,
            marketIndex: perpMarketAccount.marketIndex,
          }),
        ),
      ]);
      instructions.push(instruction);
    }

    const latestBlockhash = await driftClient.connection.getLatestBlockhash();
    const tx = await driftClient.txSender.sendVersionedTransaction(
      await driftClient.txSender.getVersionedTransaction(
        instructions,
        [driftLookupTableAccount],
        [],
        driftClient.opts,
        latestBlockhash,
      ),
    );

    await cleanUp();

    return tx;
  } catch (e) {
    // @ts-expect-error - error message is a string
    throw new Error(`Failed to trade with Drift vault: ${e.message}`);
  }
}


================================================
File: src/tools/drift/index.ts
================================================
export * from "./drift";
export * from "./drift_vault";


================================================
File: src/tools/drift/types.ts
================================================
import type { L2OrderBook, MarketType, OraclePriceData } from "@drift-labs/sdk";

export type L2WithOracle = L2OrderBook & { oracleData: OraclePriceData };

export type RawL2Output = {
  marketIndex: number;
  marketType: MarketType;
  marketName: string;
  asks: {
    price: string;
    size: string;
    sources: {
      [key: string]: string;
    };
  }[];
  bids: {
    price: string;
    size: string;
    sources: {
      [key: string]: string;
    };
  }[];
  oracleData: {
    price: string;
    slot: string;
    confidence: string;
    hasSufficientNumberOfDataPoints: boolean;
    twap?: string;
    twapConfidence?: string;
    maxPrice?: string;
  };
  slot?: number;
};


================================================
File: src/tools/flash/flash_close_trade.ts
================================================
import { ComputeBudgetProgram } from "@solana/web3.js";
import { PoolConfig, Side } from "flash-sdk";
import { BN } from "@coral-xyz/anchor";
import { SolanaAgentKit } from "../../index";
import {
  CLOSE_POSITION_CU,
  marketSdkInfo,
  marketTokenMap,
  getNftTradingAccountInfo,
  fetchOraclePrice,
  createPerpClient,
  get_flash_privilege,
} from "../../utils/flashUtils";
import { FlashCloseTradeParams } from "../../types";

/**
 * Closes an existing position on Flash.Trade
 * @param agent SolanaAgentKit instance
 * @param params Trade parameters
 * @returns Transaction signature
 */
export async function flashCloseTrade(
  agent: SolanaAgentKit,
  params: FlashCloseTradeParams,
): Promise<string> {
  try {
    const { token, side } = params;

    // Get market ID from token and side using marketTokenMap
    const tokenMarkets = marketTokenMap[token];
    if (!tokenMarkets) {
      throw new Error(`Token ${token} not supported for trading`);
    }

    const sideEntry = tokenMarkets[side];
    if (!sideEntry) {
      throw new Error(`${side} side not available for ${token}`);
    }

    const market = sideEntry.marketID;

    // Validate market data using marketSdkInfo
    const marketData = marketSdkInfo[market];
    if (!marketData) {
      throw new Error(`Invalid market configuration for ${token}/${side}`);
    }

    // Get token information
    const [targetSymbol, collateralSymbol] = marketData.tokenPair.split("/");

    // Fetch oracle prices
    const [targetPrice] = await Promise.all([
      fetchOraclePrice(targetSymbol),
      fetchOraclePrice(collateralSymbol),
    ]);

    // Initialize pool configuration and perpClient
    const poolConfig = PoolConfig.fromIdsByName(
      marketData.pool,
      "mainnet-beta",
    );
    const perpClient = createPerpClient(agent.connection, agent.wallet);

    // Calculate price after slippage
    const slippageBpsBN = new BN(100); // 1% slippage
    const sideEnum = side === "long" ? Side.Long : Side.Short;
    const priceWithSlippage = perpClient.getPriceAfterSlippage(
      false, // isEntry = false for closing position
      slippageBpsBN,
      targetPrice.price,
      sideEnum,
    );

    // Get NFT trading account info
    const tradingAccounts = await getNftTradingAccountInfo(
      agent.wallet_address,
      perpClient,
      poolConfig,
      collateralSymbol,
    );

    if (
      !tradingAccounts.nftTradingAccountPk ||
      !tradingAccounts.nftReferralAccountPK ||
      !tradingAccounts.nftOwnerRebateTokenAccountPk
    ) {
      throw new Error("Required NFT trading accounts not found");
    }

    // Build and send transaction
    const { instructions, additionalSigners } = await perpClient.closePosition(
      targetSymbol,
      collateralSymbol,
      priceWithSlippage,
      sideEnum,
      poolConfig,
      get_flash_privilege(agent),
      tradingAccounts.nftTradingAccountPk,
      tradingAccounts.nftReferralAccountPK,
      tradingAccounts.nftOwnerRebateTokenAccountPk,
    );

    const computeBudgetIx = ComputeBudgetProgram.setComputeUnitLimit({
      units: CLOSE_POSITION_CU,
    });

    return await perpClient.sendTransaction(
      [computeBudgetIx, ...instructions],
      {
        additionalSigners: additionalSigners,
        alts: perpClient.addressLookupTables,
        prioritizationFee: 5000000,
      },
    );
  } catch (error) {
    throw new Error(`Flash trade close failed: ${error}`);
  }
}


================================================
File: src/tools/flash/flash_open_trade.ts
================================================
import { ComputeBudgetProgram } from "@solana/web3.js";
import {
  PerpetualsClient,
  OraclePrice,
  PoolConfig,
  Side,
  CustodyAccount,
  Custody,
} from "flash-sdk";
import { BN } from "@coral-xyz/anchor";
import { SolanaAgentKit } from "../../index";
import {
  ALL_TOKENS,
  marketSdkInfo,
  marketTokenMap,
  getNftTradingAccountInfo,
  OPEN_POSITION_CU,
  fetchOraclePrice,
  createPerpClient,
  get_flash_privilege,
} from "../../utils/flashUtils";
import { FlashTradeParams } from "../../types";

/**
 * Opens a new position on Flash.Trade
 * @param agent SolanaAgentKit instance
 * @param params Trade parameters
 * @returns Transaction signature
 */
export async function flashOpenTrade(
  agent: SolanaAgentKit,
  params: FlashTradeParams,
): Promise<string> {
  try {
    const { token, side, collateralUsd, leverage } = params;

    // Get market ID from token and side using marketTokenMap
    const tokenMarkets = marketTokenMap[token];
    if (!tokenMarkets) {
      throw new Error(`Token ${token} not supported for trading`);
    }

    const sideEntry = tokenMarkets[side];
    if (!sideEntry) {
      throw new Error(`${side} side not available for ${token}`);
    }

    const market = sideEntry.marketID;

    // Validate market data using marketSdkInfo
    const marketData = marketSdkInfo[market];
    if (!marketData) {
      throw new Error(`Invalid market configuration for ${token}/${side}`);
    }

    // Get token information
    const [targetSymbol, collateralSymbol] = marketData.tokenPair.split("/");
    const targetToken = ALL_TOKENS.find((t) => t.symbol === targetSymbol);
    const collateralToken = ALL_TOKENS.find(
      (t) => t.symbol === collateralSymbol,
    );

    if (!targetToken || !collateralToken) {
      throw new Error(`Token not found for pair ${marketData.tokenPair}`);
    }

    // Fetch oracle prices
    const [targetPrice, collateralPrice] = await Promise.all([
      fetchOraclePrice(targetSymbol),
      fetchOraclePrice(collateralSymbol),
    ]);

    // Initialize pool configuration and perpClient
    const poolConfig = PoolConfig.fromIdsByName(
      marketData.pool,
      "mainnet-beta",
    );
    const perpClient = createPerpClient(agent.connection, agent.wallet);

    // Calculate position parameters
    const leverageBN = new BN(leverage);
    const collateralTokenPrice = convertPriceToNumber(collateralPrice.price);
    const collateralAmount = calculateCollateralAmount(
      collateralUsd,
      collateralTokenPrice,
      collateralToken.decimals,
    );

    // Get custody accounts
    const { targetCustody, collateralCustody } = await fetchCustodyAccounts(
      perpClient,
      poolConfig,
      targetSymbol,
      collateralSymbol,
    );

    // Calculate position size
    const positionSize = calculatePositionSize(
      perpClient,
      collateralAmount,
      leverageBN,
      targetToken,
      collateralToken,
      side,
      targetPrice.price,
      collateralPrice.price,
      targetCustody,
      collateralCustody,
    );

    // Get NFT trading account info
    const tradingAccounts = await getNftTradingAccountInfo(
      agent.wallet_address,
      perpClient,
      poolConfig,
      collateralSymbol,
    );

    if (
      !tradingAccounts.nftTradingAccountPk ||
      !tradingAccounts.nftReferralAccountPK
    ) {
      throw new Error("Required NFT trading accounts not found");
    }

    // Prepare transaction
    const slippageBps = new BN(1000);
    const priceWithSlippage = perpClient.getPriceAfterSlippage(
      true,
      slippageBps,
      targetPrice.price,
      side === "long" ? Side.Long : Side.Short,
    );

    // Build and send transaction
    const { instructions, additionalSigners } = await perpClient.openPosition(
      targetSymbol,
      collateralSymbol,
      priceWithSlippage,
      collateralAmount,
      positionSize,
      side === "long" ? Side.Long : Side.Short,
      poolConfig,
      get_flash_privilege(agent),
      tradingAccounts.nftTradingAccountPk,
      tradingAccounts.nftReferralAccountPK,
      tradingAccounts.nftOwnerRebateTokenAccountPk!,
      false,
    );

    const computeBudgetIx = ComputeBudgetProgram.setComputeUnitLimit({
      units: OPEN_POSITION_CU,
    });

    return await perpClient.sendTransaction(
      [computeBudgetIx, ...instructions],
      {
        additionalSigners: additionalSigners,
        alts: perpClient.addressLookupTables,
        prioritizationFee: 5000000,
      },
    );
  } catch (error) {
    throw new Error(`Flash trade failed: ${error}`);
  }
}

// Helper functions
function convertPriceToNumber(oraclePrice: OraclePrice): number {
  const price = parseInt(oraclePrice.price.toString("hex"), 16);
  const exponent = parseInt(oraclePrice.exponent.toString("hex"), 16);
  return price * Math.pow(10, exponent);
}

function calculateCollateralAmount(
  usdAmount: number,
  tokenPrice: number,
  decimals: number,
): BN {
  return new BN((usdAmount / tokenPrice) * Math.pow(10, decimals));
}

async function fetchCustodyAccounts(
  perpClient: PerpetualsClient,
  poolConfig: PoolConfig,
  targetSymbol: string,
  collateralSymbol: string,
) {
  const targetConfig = poolConfig.custodies.find(
    (c) => c.symbol === targetSymbol,
  );
  const collateralConfig = poolConfig.custodies.find(
    (c) => c.symbol === collateralSymbol,
  );

  if (!targetConfig || !collateralConfig) {
    throw new Error("Custody configuration not found");
  }

  const accounts = await perpClient.provider.connection.getMultipleAccountsInfo(
    [targetConfig.custodyAccount, collateralConfig.custodyAccount],
  );

  if (!accounts[0] || !accounts[1]) {
    throw new Error("Failed to fetch custody accounts");
  }

  return {
    targetCustody: CustodyAccount.from(
      targetConfig.custodyAccount,
      perpClient.program.coder.accounts.decode<Custody>(
        "custody",
        accounts[0].data,
      ),
    ),
    collateralCustody: CustodyAccount.from(
      collateralConfig.custodyAccount,
      perpClient.program.coder.accounts.decode<Custody>(
        "custody",
        accounts[1].data,
      ),
    ),
  };
}

function calculatePositionSize(
  perpClient: PerpetualsClient,
  collateralAmount: BN,
  leverage: BN,
  targetToken: any,
  collateralToken: any,
  side: "long" | "short",
  targetPrice: OraclePrice,
  collateralPrice: OraclePrice,
  targetCustody: CustodyAccount,
  collateralCustody: CustodyAccount,
): BN {
  return perpClient.getSizeAmountFromLeverageAndCollateral(
    collateralAmount,
    leverage.toString(),
    targetToken,
    collateralToken,
    side === "long" ? Side.Long : Side.Short,
    targetPrice,
    targetPrice,
    targetCustody,
    collateralPrice,
    collateralPrice,
    collateralCustody,
  );
}


================================================
File: src/tools/flash/index.ts
================================================
export * from "./flash_open_trade";
export * from "./flash_close_trade";


================================================
File: src/tools/gibwork/create_gibwork_task.ts
================================================
import { VersionedTransaction } from "@solana/web3.js";
import { PublicKey } from "@solana/web3.js";
import { GibworkCreateTaskReponse, SolanaAgentKit } from "../../index";

/**
 * Create an new task on Gibwork
 * @param agent SolanaAgentKit instance
 * @param title Title of the task
 * @param content Description of the task
 * @param requirements Requirements to complete the task
 * @param tags List of tags associated with the task
 * @param payer Payer address for the task (default: agent wallet address)
 * @param tokenMintAddress Token mint address for payment
 * @param tokenAmount Payment amount for the task
 * @returns Object containing task creation transaction and generated taskId
 */
export async function create_gibwork_task(
  agent: SolanaAgentKit,
  title: string,
  content: string,
  requirements: string,
  tags: string[],
  tokenMintAddress: PublicKey,
  tokenAmount: number,
  payer?: PublicKey,
): Promise<GibworkCreateTaskReponse> {
  try {
    const apiResponse = await fetch(
      "https://api2.gib.work/tasks/public/transaction",
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          title: title,
          content: content,
          requirements: requirements,
          tags: tags,
          payer: payer?.toBase58() || agent.wallet.publicKey.toBase58(),
          token: {
            mintAddress: tokenMintAddress.toBase58(),
            amount: tokenAmount,
          },
        }),
      },
    );

    const responseData = await apiResponse.json();
    if (!responseData.taskId && !responseData.serializedTransaction) {
      throw new Error(`${responseData.message}`);
    }

    const serializedTransaction = Buffer.from(
      responseData.serializedTransaction,
      "base64",
    );
    const tx = VersionedTransaction.deserialize(serializedTransaction);

    tx.sign([agent.wallet]);
    const signature = await agent.connection.sendTransaction(tx, {
      preflightCommitment: "confirmed",
      maxRetries: 3,
    });

    const latestBlockhash = await agent.connection.getLatestBlockhash();
    await agent.connection.confirmTransaction({
      signature,
      blockhash: latestBlockhash.blockhash,
      lastValidBlockHeight: latestBlockhash.lastValidBlockHeight,
    });

    return {
      status: "success",
      taskId: responseData.taskId,
      signature: signature,
    };
  } catch (err: any) {
    throw new Error(`${err.message}`);
  }
}


================================================
File: src/tools/gibwork/index.ts
================================================
export * from "./create_gibwork_task";


================================================
File: src/tools/helius/get_assets_by_owner.ts
================================================
import { SolanaAgentKit } from "../../index";
import { PublicKey } from "@solana/web3.js";

/**
 * Fetch assets by owner using the Helius Digital Asset Standard (DAS) API
 * @param agent SolanaAgentKit instance
 * @param ownerPublicKey Owner's Solana wallet PublicKey
 * @param limit Number of assets to retrieve per request
 * @returns Assets owned by the specified address
 */
export async function getAssetsByOwner(
  agent: SolanaAgentKit,
  ownerPublicKey: PublicKey,
  limit: number,
): Promise<any> {
  try {
    const apiKey = agent.config.HELIUS_API_KEY;
    if (!apiKey) {
      throw new Error("HELIUS_API_KEY not found in environment variables");
    }

    const url = `https://mainnet.helius-rpc.com/?api-key=${apiKey}`;

    const response = await fetch(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        jsonrpc: "2.0",
        id: "get-assets",
        method: "getAssetsByOwner",
        params: {
          ownerAddress: ownerPublicKey.toString(),
          page: 3,
          limit: limit,
          displayOptions: {
            showFungible: true,
          },
        },
      }),
    });

    if (!response.ok) {
      throw new Error(
        `Failed to fetch: ${response.status} - ${response.statusText}`,
      );
    }

    const data = await response.json();

    return data.result.items;
  } catch (error: any) {
    console.error("Error retrieving assets: ", error.message);
    throw new Error(`Assets retrieval failed: ${error.message}`);
  }
}


================================================
File: src/tools/helius/helius_transaction_parsing.ts
================================================
import { SolanaAgentKit } from "../../index";

/**
 * Parse a Solana transaction using the Helius Enhanced Transactions API
 * @param agent SolanaAgentKit instance
 * @param transactionId The transaction ID to parse
 * @returns Parsed transaction data
 */
export async function parseTransaction(
  agent: SolanaAgentKit,
  transactionId: string,
): Promise<any> {
  try {
    const apiKey = agent.config.HELIUS_API_KEY;
    if (!apiKey) {
      throw new Error("HELIUS_API_KEY not found in environment variables");
    }

    const url = `https://api.helius.xyz/v0/transactions/?api-key=${apiKey}`;

    const response = await fetch(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        transactions: [transactionId],
      }),
    });

    if (!response.ok) {
      throw new Error(
        `Failed to fetch: ${response.status} - ${response.statusText}`,
      );
    }

    const data = await response.json();

    return data;
  } catch (error: any) {
    console.error("Error parsing transaction: ", error.message);
    throw new Error(`Transaction parsing failed: ${error.message}`);
  }
}


================================================
File: src/tools/helius/helius_webhooks.ts
================================================
import { SolanaAgentKit } from "../../index";
import { HeliusWebhookResponse, HeliusWebhookIdResponse } from "../../index";

export async function create_HeliusWebhook(
  agent: SolanaAgentKit,
  accountAddresses: string[],
  webhookURL: string,
): Promise<HeliusWebhookResponse> {
  try {
    const response = await fetch(
      `https://api.helius.xyz/v0/webhooks?api-key=${agent.config.HELIUS_API_KEY}`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          webhookURL,
          transactionTypes: ["Any"],
          accountAddresses,
          webhookType: "enhanced",
          txnStatus: "all",
        }),
      },
    );

    const data = await response.json();
    return {
      webhookURL: data.webhookURL,
      webhookID: data.webhookID,
    };
  } catch (error: any) {
    throw new Error(`Failed to create Webhook: ${error.message}`);
  }
}

/**
 * Retrieves a Helius Webhook by ID, returning only the specified fields.
 *
 * @param agent     - An instance of SolanaAgentKit (with .config.HELIUS_API_KEY)
 * @param webhookID - The unique ID of the webhook to retrieve
 *
 * @returns A HeliusWebhook object containing { wallet, webhookURL, transactionTypes, accountAddresses, webhookType }
 */
export async function getHeliusWebhook(
  agent: SolanaAgentKit,
  webhookID: string,
): Promise<HeliusWebhookIdResponse> {
  try {
    const apiKey = agent.config.HELIUS_API_KEY;
    if (!apiKey) {
      throw new Error("HELIUS_API_KEY is missing in agent.config");
    }

    const response = await fetch(
      `https://api.helius.xyz/v0/webhooks/${webhookID}?api-key=${apiKey}`,
      {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      },
    );

    if (!response.ok) {
      throw new Error(
        `Failed to fetch webhook with ID ${webhookID}. ` +
          `Status Code: ${response.status}`,
      );
    }

    const data = await response.json();

    return {
      wallet: data.wallet,
      webhookURL: data.webhookURL,
      transactionTypes: data.transactionTypes,
      accountAddresses: data.accountAddresses,
      webhookType: data.webhookType,
    };
  } catch (error: any) {
    throw new Error(`Failed to get webhook by ID: ${error.message}`);
  }
}

/**
 * Deletes a Helius Webhook by its ID.
 *
 * @param agent     - An instance of SolanaAgentKit (with .config.HELIUS_API_KEY)
 * @param webhookID - The unique ID of the webhook to delete
 *
 * @returns The response body from the Helius API (which may contain status or other info)
 */
export async function deleteHeliusWebhook(
  agent: SolanaAgentKit,
  webhookID: string,
): Promise<any> {
  try {
    const apiKey = agent.config.HELIUS_API_KEY;
    if (!apiKey) {
      throw new Error("Missing Helius API key in agent.config.HELIUS_API_KEY");
    }

    const url = `https://api.helius.xyz/v0/webhooks/${webhookID}?api-key=${apiKey}`;
    const response = await fetch(url, {
      method: "DELETE",
      headers: {
        "Content-Type": "application/json",
      },
    });

    if (!response.ok) {
      throw new Error(
        `Failed to delete webhook: ${response.status} ${response.statusText}`,
      );
    }
    if (response.status === 204) {
      return { message: "Webhook deleted successfully (no content returned)" };
    }
    const contentLength = response.headers.get("Content-Length");
    if (contentLength === "0" || !contentLength) {
      return { message: "Webhook deleted successfully (empty body)" };
    }

    // Otherwise, parse as JSON
    const data = await response.json();
    return data;
  } catch (error: any) {
    console.error("Error deleting Helius Webhook:", error.message);
    throw new Error(`Failed to delete Helius Webhook: ${error.message}`);
  }
}


================================================
File: src/tools/helius/index.ts
================================================
export * from "./get_assets_by_owner";
export * from "./helius_transaction_parsing";
export * from "./helius_webhooks";
export * from "./send_transaction_with_priority";


================================================
File: src/tools/helius/send_transaction_with_priority.ts
================================================
import { SolanaAgentKit, PriorityFeeResponse } from "../../index";
import {
  SystemProgram,
  Transaction,
  sendAndConfirmTransaction,
  ComputeBudgetProgram,
  PublicKey,
  LAMPORTS_PER_SOL,
} from "@solana/web3.js";
import {
  getAssociatedTokenAddress,
  createTransferInstruction,
  getMint,
  createAssociatedTokenAccountInstruction,
} from "@solana/spl-token";
import bs58 from "bs58";

/**
 * Sends a transaction with an estimated priority fee using the provided SolanaAgentKit.
 *
 * @param agent         An instance of SolanaAgentKit containing connection, wallet, etc.
 * @param priorityLevel The priority level (e.g., "Min", "Low", "Medium", "High", "VeryHigh", or "UnsafeMax").
 * @param amount        The amount of SOL to send (in SOL, not lamports).
 * @param to            The recipient's PublicKey.
 * @returns             The transaction signature (string) once confirmed along with the fee used.
 */
export async function sendTransactionWithPriorityFee(
  agent: SolanaAgentKit,
  priorityLevel: string,
  amount: number,
  to: PublicKey,
  splmintAddress?: PublicKey,
): Promise<{ transactionId: string; fee: number }> {
  try {
    if (!splmintAddress) {
      const transaction = new Transaction();
      const { blockhash, lastValidBlockHeight } =
        await agent.connection.getLatestBlockhash();
      transaction.recentBlockhash = blockhash;
      transaction.lastValidBlockHeight = lastValidBlockHeight;
      transaction.feePayer = agent.wallet_address;

      const transferIx = SystemProgram.transfer({
        fromPubkey: agent.wallet_address,
        toPubkey: to,
        lamports: amount * LAMPORTS_PER_SOL,
      });

      transaction.add(transferIx);
      transaction.sign(agent.wallet);

      const response = await fetch(
        `https://mainnet.helius-rpc.com/?api-key=${agent.config.HELIUS_API_KEY}`,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            jsonrpc: "2.0",
            id: "1",
            method: "getPriorityFeeEstimate",
            params: [
              {
                transaction: bs58.encode(transaction.serialize()),
                options: { priorityLevel: priorityLevel },
              },
            ],
          } as PriorityFeeResponse),
        },
      );

      const data = await response.json();
      if (data.error) {
        throw new Error("Error fetching priority fee:");
      }
      const feeEstimate: number = data.result.priorityFeeEstimate;

      // Set the priority fee if applicable
      const computePriceIx = ComputeBudgetProgram.setComputeUnitPrice({
        microLamports: feeEstimate,
      });
      transaction.add(computePriceIx);

      // Send the transaction and confirm
      const txSignature = await sendAndConfirmTransaction(
        agent.connection,
        transaction,
        [agent.wallet],
      );

      return {
        transactionId: txSignature,
        fee: feeEstimate,
      };
    } else {
      const fromAta = await getAssociatedTokenAddress(
        splmintAddress,
        agent.wallet_address,
      );
      const toAta = await getAssociatedTokenAddress(splmintAddress, to);

      const mintInfo = await getMint(agent.connection, splmintAddress);
      const adjustedAmount = amount * Math.pow(10, mintInfo.decimals);

      const transaction = new Transaction();
      const { blockhash, lastValidBlockHeight } =
        await agent.connection.getLatestBlockhash();
      transaction.recentBlockhash = blockhash;
      transaction.lastValidBlockHeight = lastValidBlockHeight;
      transaction.feePayer = agent.wallet_address;

      const response = await fetch(
        `https://mainnet.helius-rpc.com/?api-key=${agent.config.HELIUS_API_KEY}`,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            jsonrpc: "2.0",
            id: "1",
            method: "getPriorityFeeEstimate",
            params: [
              {
                transaction: bs58.encode(transaction.serialize()),
                options: { priorityLevel: priorityLevel },
              },
            ],
          } as PriorityFeeResponse),
        },
      );

      const data = await response.json();
      if (data.error) {
        throw new Error("Error fetching priority fee:");
      }
      const feeEstimate: number = data.result.priorityFeeEstimate;

      transaction.add(
        ComputeBudgetProgram.setComputeUnitPrice({
          microLamports: feeEstimate,
        }),
      );

      transaction.add(
        createAssociatedTokenAccountInstruction(
          agent.wallet_address,
          toAta,
          to,
          splmintAddress,
        ),
      );

      transaction.add(
        createTransferInstruction(
          fromAta,
          toAta,
          agent.wallet_address,
          adjustedAmount,
        ),
      );

      const txSignature = await sendAndConfirmTransaction(
        agent.connection,
        transaction,
        [agent.wallet],
      );

      return {
        transactionId: txSignature,
        fee: feeEstimate,
      };
    }
  } catch (error: any) {
    throw new Error(`Failed to process transaction: ${error.message}`);
  }
}


================================================
File: src/tools/jupiter/fetch_price.ts
================================================
import { PublicKey } from "@solana/web3.js";

/**
 * Fetch the price of a given token quoted in USDC using Jupiter API
 * @param tokenId The token mint address
 * @returns The price of the token quoted in USDC
 */
export async function fetchPrice(tokenId: PublicKey): Promise<string> {
  try {
    const response = await fetch(`https://api.jup.ag/price/v2?ids=${tokenId}`);

    if (!response.ok) {
      throw new Error(`Failed to fetch price: ${response.statusText}`);
    }

    const data = await response.json();

    const price = data.data[tokenId.toBase58()]?.price;

    if (!price) {
      throw new Error("Price data not available for the given token.");
    }

    return price;
  } catch (error: any) {
    throw new Error(`Price fetch failed: ${error.message}`);
  }
}


================================================
File: src/tools/jupiter/index.ts
================================================
export * from "./fetch_price";
export * from "./stake_with_jup";
export * from "./trade";


================================================
File: src/tools/jupiter/stake_with_jup.ts
================================================
import { VersionedTransaction } from "@solana/web3.js";
import { SolanaAgentKit } from "../../index";

/**
 * Stake SOL with Jup validator
 * @param agent SolanaAgentKit instance
 * @param amount Amount of SOL to stake
 * @returns Transaction signature
 */
export async function stakeWithJup(
  agent: SolanaAgentKit,
  amount: number,
): Promise<string> {
  try {
    const res = await fetch(
      `https://worker.jup.ag/blinks/swap/So11111111111111111111111111111111111111112/jupSoLaHXQiZZTSfEWMTRRgpnyFm8f6sZdosWBjx93v/${amount}`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          account: agent.wallet.publicKey.toBase58(),
        }),
      },
    );

    const data = await res.json();

    const txn = VersionedTransaction.deserialize(
      Buffer.from(data.transaction, "base64"),
    );

    const { blockhash } = await agent.connection.getLatestBlockhash();
    txn.message.recentBlockhash = blockhash;

    // Sign and send transaction
    txn.sign([agent.wallet]);
    const signature = await agent.connection.sendTransaction(txn, {
      preflightCommitment: "confirmed",
      maxRetries: 3,
    });

    const latestBlockhash = await agent.connection.getLatestBlockhash();
    await agent.connection.confirmTransaction({
      signature,
      blockhash: latestBlockhash.blockhash,
      lastValidBlockHeight: latestBlockhash.lastValidBlockHeight,
    });

    return signature;
  } catch (error: any) {
    console.error(error);
    throw new Error(`jupSOL staking failed: ${error.message}`);
  }
}


================================================
File: src/tools/jupiter/trade.ts
================================================
import { VersionedTransaction, PublicKey } from "@solana/web3.js";
import { SolanaAgentKit } from "../../index";
import {
  TOKENS,
  DEFAULT_OPTIONS,
  JUP_API,
  JUP_REFERRAL_ADDRESS,
} from "../../constants";
import { getMint } from "@solana/spl-token";
/**
 * Swap tokens using Jupiter Exchange
 * @param agent SolanaAgentKit instance
 * @param outputMint Target token mint address
 * @param inputAmount Amount to swap (in token decimals)
 * @param inputMint Source token mint address (defaults to USDC)
 * @param slippageBps Slippage tolerance in basis points (default: 300 = 3%)
 * @returns Transaction signature
 */

export async function trade(
  agent: SolanaAgentKit,
  outputMint: PublicKey,
  inputAmount: number,
  inputMint: PublicKey = TOKENS.USDC,
  // @deprecated use dynamicSlippage instead
  slippageBps: number = DEFAULT_OPTIONS.SLIPPAGE_BPS,
): Promise<string> {
  try {
    // Check if input token is native SOL
    const isNativeSol = inputMint.equals(TOKENS.SOL);

    // For native SOL, we use LAMPORTS_PER_SOL, otherwise fetch mint info
    const inputDecimals = isNativeSol
      ? 9 // SOL always has 9 decimals
      : (await getMint(agent.connection, inputMint)).decimals;

    // Calculate the correct amount based on actual decimals
    const scaledAmount = inputAmount * Math.pow(10, inputDecimals);

    const quoteResponse = await (
      await fetch(
        `${JUP_API}/quote?` +
          `inputMint=${isNativeSol ? TOKENS.SOL.toString() : inputMint.toString()}` +
          `&outputMint=${outputMint.toString()}` +
          `&amount=${scaledAmount}` +
          `&dynamicSlippage=true` +
          `&minimizeSlippage=false` +
          `&onlyDirectRoutes=false` +
          `&maxAccounts=64` +
          `&swapMode=ExactIn` +
          `${agent.config.JUPITER_FEE_BPS ? `&platformFeeBps=${agent.config.JUPITER_FEE_BPS}` : ""}`,
      )
    ).json();

    // Get serialized transaction
    let feeAccount;
    if (agent.config.JUPITER_REFERRAL_ACCOUNT) {
      [feeAccount] = PublicKey.findProgramAddressSync(
        [
          Buffer.from("referral_ata"),
          new PublicKey(agent.config.JUPITER_REFERRAL_ACCOUNT).toBuffer(),
          TOKENS.SOL.toBuffer(),
        ],
        new PublicKey(JUP_REFERRAL_ADDRESS),
      );
    }

    const { swapTransaction } = await (
      await fetch("https://quote-api.jup.ag/v6/swap", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          quoteResponse,
          userPublicKey: agent.wallet_address.toString(),
          wrapAndUnwrapSol: true,
          dynamicComputeUnitLimit: true,
          dynamicSlippage: true,
          prioritizationFeeLamports: {
            priorityLevelWithMaxLamports: {
              maxLamports: 10000000,
              global: false,
              priorityLevel: agent.config.PRIORITY_LEVEL || "medium",
            },
          },
          feeAccount: feeAccount ? feeAccount.toString() : null,
        }),
      })
    ).json();
    // Deserialize transaction
    const swapTransactionBuf = Buffer.from(swapTransaction, "base64");

    const transaction = VersionedTransaction.deserialize(swapTransactionBuf);
    // Sign and send transaction
    transaction.sign([agent.wallet]);
    const signature = await agent.connection.sendTransaction(transaction);

    return signature;
  } catch (error: any) {
    throw new Error(`Swap failed: ${error.message}`);
  }
}


================================================
File: src/tools/lightprotocol/index.ts
================================================
export * from "./send_compressed_airdrop";


================================================
File: src/tools/lightprotocol/send_compressed_airdrop.ts
================================================
import {
  AddressLookupTableAccount,
  ComputeBudgetProgram,
  Keypair,
  PublicKey,
  TransactionInstruction,
} from "@solana/web3.js";
import { SolanaAgentKit } from "../../index";
import {
  buildAndSignTx,
  calculateComputeUnitPrice,
  createRpc,
  Rpc,
  sendAndConfirmTx,
  sleep,
} from "@lightprotocol/stateless.js";
import {
  CompressedTokenProgram,
  createTokenPool,
} from "@lightprotocol/compressed-token";
import { getOrCreateAssociatedTokenAccount } from "@solana/spl-token";

// arbitrary
const MAX_AIRDROP_RECIPIENTS = 1000;
const MAX_CONCURRENT_TXS = 30;

/**
 * Estimate the cost of an airdrop in lamports.
 * @param numberOfRecipients      Number of recipients
 * @param priorityFeeInLamports   Priority fee in lamports
 * @returns                       Estimated cost in lamports
 */
export const getAirdropCostEstimate = (
  numberOfRecipients: number,
  priorityFeeInLamports: number,
) => {
  const baseFee = 5000;
  const perRecipientCompressedStateFee = 300;

  const txsNeeded = Math.ceil(numberOfRecipients / 15);
  const totalPriorityFees = txsNeeded * (baseFee + priorityFeeInLamports);

  return (
    perRecipientCompressedStateFee * numberOfRecipients + totalPriorityFees
  );
};

/**
 * Send airdrop with ZK Compressed Tokens.
 * @param agent             Agent
 * @param mintAddress       SPL Mint address
 * @param amount            Amount to send per recipient
 * @param decimals          Decimals of the token
 * @param recipients        Recipient wallet addresses (no ATAs)
 * @param priorityFeeInLamports   Priority fee in lamports
 * @param shouldLog         Whether to log progress to stdout. Defaults to false.
 */
export async function sendCompressedAirdrop(
  agent: SolanaAgentKit,
  mintAddress: PublicKey,
  amount: number,
  decimals: number,
  recipients: PublicKey[],
  priorityFeeInLamports: number,
  shouldLog: boolean = false,
): Promise<string[]> {
  if (recipients.length > MAX_AIRDROP_RECIPIENTS) {
    throw new Error(
      `Max airdrop can be ${MAX_AIRDROP_RECIPIENTS} recipients at a time. For more scale, use open source ZK Compression airdrop tools such as https://github.com/helius-labs/airship.`,
    );
  }

  const url = agent.connection.rpcEndpoint;
  if (url.includes("devnet")) {
    throw new Error("Devnet is not supported for airdrop. Please use mainnet.");
  }
  if (!url.includes("helius")) {
    console.warn(
      "Warning: Must use RPC with ZK Compression support. Double check with your RPC provider if in doubt.",
    );
  }

  try {
    await getOrCreateAssociatedTokenAccount(
      agent.connection,
      agent.wallet,
      mintAddress,
      agent.wallet.publicKey,
    );
  } catch (error) {
    console.error(error);
    throw new Error(
      "Source token account not found and failed to create it. Please add funds to your wallet and try again.",
    );
  }

  try {
    await createTokenPool(
      agent.connection as unknown as Rpc,
      agent.wallet,
      mintAddress,
    );
  } catch (error: any) {
    if (error.message.includes("already in use")) {
      // skip
    } else {
      throw error;
    }
  }

  return await processAll(
    agent,
    amount * 10 ** decimals,
    mintAddress,
    recipients,
    priorityFeeInLamports,
    shouldLog,
  );
}

async function processAll(
  agent: SolanaAgentKit,
  amount: number,
  mint: PublicKey,
  recipients: PublicKey[],
  priorityFeeInLamports: number,
  shouldLog: boolean,
): Promise<string[]> {
  const mintAddress = mint;
  const payer = agent.wallet;

  const sourceTokenAccount = await getOrCreateAssociatedTokenAccount(
    agent.connection,
    agent.wallet,
    mintAddress,
    agent.wallet.publicKey,
  );

  const maxRecipientsPerInstruction = 5;
  const maxIxs = 3; // empirically determined (as of 12/15/2024)
  const lookupTableAddress = new PublicKey(
    "9NYFyEqPkyXUhkerbGHXUXkvb4qpzeEdHuGpgbgpH1NJ",
  );

  const lookupTableAccount = (
    await agent.connection.getAddressLookupTable(lookupTableAddress)
  ).value!;

  const batches: PublicKey[][] = [];
  for (
    let i = 0;
    i < recipients.length;
    i += maxRecipientsPerInstruction * maxIxs
  ) {
    batches.push(recipients.slice(i, i + maxRecipientsPerInstruction * maxIxs));
  }

  const instructionSets = await Promise.all(
    batches.map(async (recipientBatch) => {
      const instructions: TransactionInstruction[] = [
        ComputeBudgetProgram.setComputeUnitLimit({ units: 500_000 }),
        ComputeBudgetProgram.setComputeUnitPrice({
          microLamports: calculateComputeUnitPrice(
            priorityFeeInLamports,
            500_000,
          ),
        }),
      ];

      const compressIxPromises = [];
      for (
        let i = 0;
        i < recipientBatch.length;
        i += maxRecipientsPerInstruction
      ) {
        const batch = recipientBatch.slice(i, i + maxRecipientsPerInstruction);
        compressIxPromises.push(
          CompressedTokenProgram.compress({
            payer: payer.publicKey,
            owner: payer.publicKey,
            source: sourceTokenAccount.address,
            toAddress: batch,
            amount: batch.map(() => amount),
            mint: mintAddress,
          }),
        );
      }

      const compressIxs = await Promise.all(compressIxPromises);
      return [...instructions, ...compressIxs];
    }),
  );

  const url = agent.connection.rpcEndpoint;
  const rpc = createRpc(url, url, url);

  const results = [];
  let confirmedCount = 0;
  const totalBatches = instructionSets.length;

  const renderProgressBar = (current: number, total: number) => {
    const percentage = Math.floor((current / total) * 100);
    const filled = Math.floor((percentage / 100) * 20);
    const empty = 20 - filled;
    const bar = "█".repeat(filled) + "░".repeat(empty);
    return `Airdropped to ${Math.min(current * 15, recipients.length)}/${
      recipients.length
    } recipients [${bar}] ${percentage}%`;
  };

  const log = (message: string) => {
    if (shouldLog && typeof process !== "undefined" && process.stdout) {
      process.stdout.write(message);
    }
  };

  for (let i = 0; i < instructionSets.length; i += MAX_CONCURRENT_TXS) {
    const batchPromises = instructionSets
      .slice(i, i + MAX_CONCURRENT_TXS)
      .map((instructions, idx) =>
        sendTransactionWithRetry(
          rpc,
          instructions,
          payer,
          lookupTableAccount,
          i + idx,
        ).then((signature) => {
          confirmedCount++;
          log("\r" + renderProgressBar(confirmedCount, totalBatches));
          return signature;
        }),
      );

    const batchResults = await Promise.allSettled(batchPromises);
    results.push(...batchResults);
  }

  log("\n");

  const failures = results
    .filter((r) => r.status === "rejected")
    .map((r, idx) => ({
      index: idx,
      error: (r as PromiseRejectedResult).reason,
    }));

  if (failures.length > 0) {
    throw new Error(
      `Failed to process ${failures.length} batches: ${failures
        .map((f) => f.error)
        .join(", ")}`,
    );
  }

  return results.map((r) => (r as PromiseFulfilledResult<string>).value);
}

async function sendTransactionWithRetry(
  connection: Rpc,
  instructions: TransactionInstruction[],
  payer: Keypair,
  lookupTableAccount: AddressLookupTableAccount,
  batchIndex: number,
): Promise<string> {
  const MAX_RETRIES = 3;
  const INITIAL_BACKOFF = 500; // ms

  for (let attempt = 0; attempt < MAX_RETRIES; attempt++) {
    try {
      const { blockhash } = await connection.getLatestBlockhash();
      const tx = buildAndSignTx(
        instructions,
        payer,
        blockhash,
        [],
        [lookupTableAccount],
      );

      const signature = await sendAndConfirmTx(connection, tx);

      return signature;
    } catch (error: any) {
      const isRetryable =
        error.message?.includes("blockhash not found") ||
        error.message?.includes("timeout") ||
        error.message?.includes("rate limit") ||
        error.message?.includes("too many requests");

      if (!isRetryable || attempt === MAX_RETRIES - 1) {
        throw new Error(
          `Batch ${batchIndex} failed after ${attempt + 1} attempts: ${
            error.message
          }`,
        );
      }

      const backoff =
        INITIAL_BACKOFF * Math.pow(2, attempt) * (0.5 + Math.random());
      await sleep(backoff);
    }
  }

  throw new Error("Unreachable");
}


================================================
File: src/tools/lulo/index.ts
================================================
export * from "./lend";
export * from "./lulo_lend";
export * from "./lulo_withdraw";


================================================
File: src/tools/lulo/lend.ts
================================================
import { VersionedTransaction } from "@solana/web3.js";
import { SolanaAgentKit } from "../../index";

/**
 * Lend tokens for yields using Lulo
 * @param agent SolanaAgentKit instance
 * @param amount Amount of USDC to lend
 * @returns Transaction signature
 */
export async function lendAsset(
  agent: SolanaAgentKit,
  amount: number,
): Promise<string> {
  try {
    const response = await fetch(
      `https://blink.lulo.fi/actions?amount=${amount}&symbol=USDC`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          account: agent.wallet.publicKey.toBase58(),
        }),
      },
    );

    const data = await response.json();

    // Deserialize the transaction
    const luloTxn = VersionedTransaction.deserialize(
      Buffer.from(data.transaction, "base64"),
    );

    // Get a recent blockhash and set it
    const { blockhash } = await agent.connection.getLatestBlockhash();
    luloTxn.message.recentBlockhash = blockhash;

    // Sign and send transaction
    luloTxn.sign([agent.wallet]);

    const signature = await agent.connection.sendTransaction(luloTxn, {
      preflightCommitment: "confirmed",
      maxRetries: 3,
    });

    // Wait for confirmation using the latest strategy
    const latestBlockhash = await agent.connection.getLatestBlockhash();
    await agent.connection.confirmTransaction({
      signature,
      blockhash: latestBlockhash.blockhash,
      lastValidBlockHeight: latestBlockhash.lastValidBlockHeight,
    });

    return signature;
  } catch (error: any) {
    throw new Error(`Lending failed: ${error.message}`);
  }
}


================================================
File: src/tools/lulo/lulo_lend.ts
================================================
import { VersionedTransaction } from "@solana/web3.js";
import { SolanaAgentKit } from "../../index";

/**
 * Lend tokens for yields using Lulo
 * @param agent SolanaAgentKit instance
 * @param mintAddress SPL Mint address
 * @param amount Amount to lend
 * @returns Transaction signature
 */
export async function luloLend(
  agent: SolanaAgentKit,
  mintAddress: string,
  amount: number,
): Promise<string> {
  try {
    const response = await fetch(
      `https://api.flexlend.fi/generate/account/deposit?priorityFee=50000`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "x-wallet-pubkey": agent.wallet.publicKey.toBase58(),
          "x-api-key": process.env.FLEXLEND_API_KEY!,
        },
        body: JSON.stringify({
          owner: agent.wallet.publicKey.toBase58(),
          mintAddress: mintAddress,
          depositAmount: amount.toString(),
        }),
      },
    );
    const {
      data: { transactionMeta },
    } = await response.json();

    // Deserialize the transaction
    const luloTxn = VersionedTransaction.deserialize(
      Buffer.from(transactionMeta[0].transaction, "base64"),
    );

    // Get a recent blockhash and set it
    const { blockhash } = await agent.connection.getLatestBlockhash();
    luloTxn.message.recentBlockhash = blockhash;

    // Sign and send transaction
    luloTxn.sign([agent.wallet]);

    const signature = await agent.connection.sendTransaction(luloTxn, {
      preflightCommitment: "confirmed",
      maxRetries: 3,
    });

    // Wait for confirmation using the latest strategy
    const latestBlockhash = await agent.connection.getLatestBlockhash();
    await agent.connection.confirmTransaction({
      signature,
      blockhash: latestBlockhash.blockhash,
      lastValidBlockHeight: latestBlockhash.lastValidBlockHeight,
    });

    return signature;
  } catch (error: any) {
    throw new Error(`Lending failed: ${error.message}`);
  }
}


================================================
File: src/tools/lulo/lulo_withdraw.ts
================================================
import { VersionedTransaction } from "@solana/web3.js";
import { SolanaAgentKit } from "../../index";

/**
 * Withdraw tokens for yields using Lulo
 * @param agent SolanaAgentKit instance
 * @param mintAddress SPL Mint address
 * @param amount Amount to withdraw
 * @returns Transaction signature
 */
export async function luloWithdraw(
  agent: SolanaAgentKit,
  mintAddress: string,
  amount: number,
): Promise<string> {
  try {
    if (!agent.config.FLEXLEND_API_KEY) {
      throw new Error("Lulo API key not found in agent configuration");
    }

    const response = await fetch(
      `https://api.flexlend.fi/generate/account/withdraw?priorityFee=50000`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "x-wallet-pubkey": agent.wallet.publicKey.toBase58(),
          "x-api-key": agent.config.FLEXLEND_API_KEY,
        },
        body: JSON.stringify({
          owner: agent.wallet.publicKey.toBase58(),
          mintAddress: mintAddress,
          depositAmount: amount,
        }),
      },
    );

    const {
      data: { transactionMeta },
    } = await response.json();

    // Deserialize the transaction
    const luloTxn = VersionedTransaction.deserialize(
      Buffer.from(transactionMeta[0].transaction, "base64"),
    );

    // Get a recent blockhash and set it
    const { blockhash } = await agent.connection.getLatestBlockhash();
    luloTxn.message.recentBlockhash = blockhash;

    // Sign and send transaction
    luloTxn.sign([agent.wallet]);

    const signature = await agent.connection.sendTransaction(luloTxn, {
      preflightCommitment: "confirmed",
      maxRetries: 3,
    });

    // Wait for confirmation using the latest strategy
    const latestBlockhash = await agent.connection.getLatestBlockhash();
    await agent.connection.confirmTransaction({
      signature,
      blockhash: latestBlockhash.blockhash,
      lastValidBlockHeight: latestBlockhash.lastValidBlockHeight,
    });

    return signature;
  } catch (error: any) {
    throw new Error(`Lending failed: ${error.message}`);
  }
}


================================================
File: src/tools/manifest/index.ts
================================================
export * from "./manifest_trade";


================================================
File: src/tools/manifest/manifest_trade.ts
================================================
import {
  ManifestClient,
  OrderType,
  WrapperPlaceOrderParamsExternal,
} from "@cks-systems/manifest-sdk";
import {
  Keypair,
  PublicKey,
  sendAndConfirmTransaction,
  SystemProgram,
  Transaction,
  TransactionInstruction,
} from "@solana/web3.js";
import { BatchOrderPattern, OrderParams, SolanaAgentKit } from "../../index";

export async function manifestCreateMarket(
  agent: SolanaAgentKit,
  baseMint: PublicKey,
  quoteMint: PublicKey,
): Promise<string[]> {
  const marketKeypair: Keypair = Keypair.generate();
  const FIXED_MANIFEST_HEADER_SIZE: number = 256;
  const createAccountIx: TransactionInstruction = SystemProgram.createAccount({
    fromPubkey: agent.wallet.publicKey,
    newAccountPubkey: marketKeypair.publicKey,
    space: FIXED_MANIFEST_HEADER_SIZE,
    lamports: await agent.connection.getMinimumBalanceForRentExemption(
      FIXED_MANIFEST_HEADER_SIZE,
    ),
    programId: new PublicKey("MNFSTqtC93rEfYHB6hF82sKdZpUDFWkViLByLd1k1Ms"),
  });
  const createMarketIx = ManifestClient["createMarketIx"](
    agent.wallet.publicKey,
    baseMint,
    quoteMint,
    marketKeypair.publicKey,
  );

  const tx: Transaction = new Transaction();
  tx.add(createAccountIx);
  tx.add(createMarketIx);
  const signature = await sendAndConfirmTransaction(agent.connection, tx, [
    agent.wallet,
    marketKeypair,
  ]);
  return [signature, marketKeypair.publicKey.toBase58()];
}

/**
 * Place limit orders using Manifest
 * @param agent SolanaAgentKit instance
 * @param marketId Public key for the manifest market
 * @param quantity Amount to trade in tokens
 * @param side Buy or Sell
 * @param price Price in tokens ie. SOL/USDC
 * @returns Transaction signature
 */
export async function limitOrder(
  agent: SolanaAgentKit,
  marketId: PublicKey,
  quantity: number,
  side: string,
  price: number,
): Promise<string> {
  try {
    const mfxClient = await ManifestClient.getClientForMarket(
      agent.connection,
      marketId,
      agent.wallet,
    );

    const orderParams: WrapperPlaceOrderParamsExternal = {
      numBaseTokens: quantity,
      tokenPrice: price,
      isBid: side === "Buy",
      lastValidSlot: 0,
      orderType: OrderType.Limit,
      clientOrderId: Number(Math.random() * 1000),
    };

    const depositPlaceOrderIx: TransactionInstruction[] =
      await mfxClient.placeOrderWithRequiredDepositIx(
        agent.wallet.publicKey,
        orderParams,
      );
    const signature = await sendAndConfirmTransaction(
      agent.connection,
      new Transaction().add(...depositPlaceOrderIx),
      [agent.wallet],
    );

    return signature;
  } catch (error: any) {
    throw new Error(`Limit Order failed: ${error.message}`);
  }
}

/**
 * Cancels all orders from Manifest
 * @param agent SolanaAgentKit instance
 * @param marketId Public key for the manifest market
 * @returns Transaction signature
 */
export async function cancelAllOrders(
  agent: SolanaAgentKit,
  marketId: PublicKey,
): Promise<string> {
  try {
    const mfxClient = await ManifestClient.getClientForMarket(
      agent.connection,
      marketId,
      agent.wallet,
    );

    const cancelAllOrdersIx = await mfxClient.cancelAllIx();
    const signature = await sendAndConfirmTransaction(
      agent.connection,
      new Transaction().add(cancelAllOrdersIx),
      [agent.wallet],
    );

    return signature;
  } catch (error: any) {
    throw new Error(`Cancel all orders failed: ${error.message}`);
  }
}

/**
 * Withdraws all funds from Manifest
 * @param agent SolanaAgentKit instance
 * @param marketId Public key for the manifest market
 * @returns Transaction signature
 */
export async function withdrawAll(
  agent: SolanaAgentKit,
  marketId: PublicKey,
): Promise<string> {
  try {
    const mfxClient = await ManifestClient.getClientForMarket(
      agent.connection,
      marketId,
      agent.wallet,
    );

    const withdrawAllIx = await mfxClient.withdrawAllIx();
    const signature = await sendAndConfirmTransaction(
      agent.connection,
      new Transaction().add(...withdrawAllIx),
      [agent.wallet],
    );

    return signature;
  } catch (error: any) {
    throw new Error(`Withdraw all failed: ${error.message}`);
  }
}

/**
 * Generates an array of orders based on the specified pattern
 */
export function generateOrdersfromPattern(
  pattern: BatchOrderPattern,
): OrderParams[] {
  const orders: OrderParams[] = [];

  // Random number of orders if not specified, max of 8
  const numOrders = pattern.numberOfOrders || Math.ceil(Math.random() * 8);

  // Calculate price points
  const prices: number[] = [];
  if (pattern.priceRange) {
    const { min, max } = pattern.priceRange;
    if (min && max) {
      // Generate evenly spaced prices
      for (let i = 0; i < numOrders; i++) {
        if (pattern.spacing?.type === "percentage") {
          const factor = 1 + pattern.spacing.value / 100;
          prices.push(min * Math.pow(factor, i));
        } else {
          const step = (max - min) / (numOrders - 1);
          prices.push(min + step * i);
        }
      }
    } else if (min) {
      // Generate prices starting from min with specified spacing
      for (let i = 0; i < numOrders; i++) {
        if (pattern.spacing?.type === "percentage") {
          const factor = 1 + pattern.spacing.value / 100;
          prices.push(min * Math.pow(factor, i));
        } else {
          prices.push(min + (pattern.spacing?.value || 0.01) * i);
        }
      }
    }
  }

  // Calculate quantities
  let quantities: number[] = [];
  if (pattern.totalQuantity) {
    const individualQty = pattern.totalQuantity / numOrders;
    quantities = Array(numOrders).fill(individualQty);
  } else if (pattern.individualQuantity) {
    quantities = Array(numOrders).fill(pattern.individualQuantity);
  }

  // Generate orders
  for (let i = 0; i < numOrders; i++) {
    orders.push({
      side: pattern.side,
      price: prices[i],
      quantity: quantities[i],
    });
  }

  return orders;
}

/**
 * Validates that sell orders are not priced below buy orders
 * @param orders Array of order parameters to validate
 * @throws Error if orders are crossed
 */
function validateNoCrossedOrders(orders: OrderParams[]): void {
  // Find lowest sell and highest buy prices
  let lowestSell = Number.MAX_SAFE_INTEGER;
  let highestBuy = 0;

  orders.forEach((order) => {
    if (order.side === "Sell" && order.price < lowestSell) {
      lowestSell = order.price;
    }
    if (order.side === "Buy" && order.price > highestBuy) {
      highestBuy = order.price;
    }
  });

  // Check if orders cross
  if (lowestSell <= highestBuy) {
    throw new Error(
      `Invalid order prices: Sell order at ${lowestSell} is lower than or equal to Buy order at ${highestBuy}. Orders cannot cross.`,
    );
  }
}

/**
 * Place batch orders using Manifest
 * @param agent SolanaAgentKit instance
 * @param marketId Public key for the manifest market
 * @param quantity Amount to trade in tokens
 * @param side Buy or Sell
 * @param price Price in tokens ie. SOL/USDC
 * @returns Transaction signature
 */
export async function batchOrder(
  agent: SolanaAgentKit,
  marketId: PublicKey,
  orders: OrderParams[],
): Promise<string> {
  try {
    validateNoCrossedOrders(orders);

    const mfxClient = await ManifestClient.getClientForMarket(
      agent.connection,
      marketId,
      agent.wallet,
    );

    const placeParams: WrapperPlaceOrderParamsExternal[] = orders.map(
      (order) => ({
        numBaseTokens: order.quantity,
        tokenPrice: order.price,
        isBid: order.side === "Buy",
        lastValidSlot: 0,
        orderType: OrderType.Limit,
        clientOrderId: Number(Math.random() * 10000),
      }),
    );

    const batchOrderIx: TransactionInstruction = await mfxClient.batchUpdateIx(
      placeParams,
      [],
      true,
    );

    const signature = await sendAndConfirmTransaction(
      agent.connection,
      new Transaction().add(batchOrderIx),
      [agent.wallet],
    );

    return signature;
  } catch (error: any) {
    throw new Error(`Batch Order failed: ${error.message}`);
  }
}


================================================
File: src/tools/metaplex/deploy_collection.ts
================================================
import { SolanaAgentKit } from "../../index";
import {
  generateSigner,
  keypairIdentity,
  publicKey,
} from "@metaplex-foundation/umi";
import {
  createCollection,
  mplCore,
  ruleSet,
} from "@metaplex-foundation/mpl-core";
import { CollectionOptions, CollectionDeployment } from "../../types";
import {
  fromWeb3JsKeypair,
  toWeb3JsPublicKey,
} from "@metaplex-foundation/umi-web3js-adapters";
import { createUmi } from "@metaplex-foundation/umi-bundle-defaults";

/**
 * Deploy a new NFT collection
 * @param agent SolanaAgentKit instance
 * @param options Collection options including name, URI, royalties, and creators
 * @returns Object containing collection address and metadata
 */
export async function deploy_collection(
  agent: SolanaAgentKit,
  options: CollectionOptions,
): Promise<CollectionDeployment> {
  try {
    // Initialize Umi
    const umi = createUmi(agent.connection.rpcEndpoint).use(mplCore());
    umi.use(keypairIdentity(fromWeb3JsKeypair(agent.wallet)));

    // Generate collection signer
    const collectionSigner = generateSigner(umi);

    // Format creators if provided
    const formattedCreators = options.creators?.map((creator) => ({
      address: publicKey(creator.address),
      percentage: creator.percentage,
    })) || [
      {
        address: publicKey(agent.wallet_address.toString()),
        percentage: 100,
      },
    ];

    // Create collection
    const tx = await createCollection(umi, {
      collection: collectionSigner,
      name: options.name,
      uri: options.uri,
      plugins: [
        {
          type: "Royalties",
          basisPoints: options.royaltyBasisPoints || 500, // Default 5%
          creators: formattedCreators,
          ruleSet: ruleSet("None"), // Compatibility rule set
        },
      ],
    }).sendAndConfirm(umi);

    return {
      collectionAddress: toWeb3JsPublicKey(collectionSigner.publicKey),
      signature: tx.signature,
    };
  } catch (error: any) {
    throw new Error(`Collection deployment failed: ${error.message}`);
  }
}


================================================
File: src/tools/metaplex/deploy_token.ts
================================================
import { SolanaAgentKit } from "../../index";
import { PublicKey } from "@solana/web3.js";
import { createUmi } from "@metaplex-foundation/umi-bundle-defaults";
import { generateSigner, keypairIdentity } from "@metaplex-foundation/umi";
import {
  createFungible,
  mintV1,
  TokenStandard,
} from "@metaplex-foundation/mpl-token-metadata";
import {
  fromWeb3JsKeypair,
  fromWeb3JsPublicKey,
  toWeb3JsPublicKey,
} from "@metaplex-foundation/umi-web3js-adapters";
import { mplToolbox } from "@metaplex-foundation/mpl-toolbox";

/**
 * Deploy a new SPL token
 * @param agent SolanaAgentKit instance
 * @param name Name of the token
 * @param uri URI for the token metadata
 * @param symbol Symbol of the token
 * @param decimals Number of decimals for the token (default: 9)
 * @param initialSupply Initial supply to mint (optional)
 * @returns Object containing token mint address and initial account (if supply was minted)
 */
export async function deploy_token(
  agent: SolanaAgentKit,
  name: string,
  uri: string,
  symbol: string,
  decimals: number = 9,
  initialSupply?: number,
): Promise<{ mint: PublicKey }> {
  try {
    // Create UMI instance from agent
    const umi = createUmi(agent.connection.rpcEndpoint).use(mplToolbox());
    umi.use(keypairIdentity(fromWeb3JsKeypair(agent.wallet)));

    // Create new token mint
    const mint = generateSigner(umi);

    let builder = createFungible(umi, {
      name,
      uri,
      symbol,
      sellerFeeBasisPoints: {
        basisPoints: 0n,
        identifier: "%",
        decimals: 2,
      },
      decimals,
      mint,
    });

    if (initialSupply) {
      builder = builder.add(
        mintV1(umi, {
          mint: mint.publicKey,
          tokenStandard: TokenStandard.Fungible,
          tokenOwner: fromWeb3JsPublicKey(agent.wallet_address),
          amount: initialSupply * Math.pow(10, decimals),
        }),
      );
    }

    builder.sendAndConfirm(umi, { confirm: { commitment: "finalized" } });

    return {
      mint: toWeb3JsPublicKey(mint.publicKey),
    };
  } catch (error: any) {
    throw new Error(`Token deployment failed: ${error.message}`);
  }
}


================================================
File: src/tools/metaplex/get_asset.ts
================================================
import { SolanaAgentKit } from "../../index";
import { publicKey } from "@metaplex-foundation/umi";
import { createUmi } from "@metaplex-foundation/umi-bundle-defaults";
import {
  dasApi,
  DasApiAsset,
} from "@metaplex-foundation/digital-asset-standard-api";

/**
 * Fetch asset details using the Metaplex DAS API
 * @param agent SolanaAgentKit instance
 * @param assetId ID of the asset to fetch
 * @returns Asset details
 */
export async function get_asset(
  agent: SolanaAgentKit,
  assetId: string,
): Promise<DasApiAsset> {
  try {
    const endpoint = agent.connection.rpcEndpoint;
    const umi = createUmi(endpoint).use(dasApi());

    return await umi.rpc.getAsset(publicKey(assetId));
  } catch (error: any) {
    console.error("Error retrieving asset: ", error.message);
    throw new Error(`Asset retrieval failed: ${error.message}`);
  }
}


================================================
File: src/tools/metaplex/get_assets_by_authority.ts
================================================
import { SolanaAgentKit } from "../../agent";
import { createUmi } from "@metaplex-foundation/umi-bundle-defaults";
import {
  dasApi,
  GetAssetsByAuthorityRpcInput,
} from "@metaplex-foundation/digital-asset-standard-api";

/**
 * Fetch assets by authority using the Metaplex DAS API
 * @param agent SolanaAgentKit instance
 * @param params Parameters for fetching assets by authority
 * @returns List of assets associated with the given authority
 */
export async function get_assets_by_authority(
  agent: SolanaAgentKit,
  params: GetAssetsByAuthorityRpcInput,
) {
  const umi = createUmi(agent.connection.rpcEndpoint).use(dasApi());
  return await umi.rpc.getAssetsByAuthority(params);
}


================================================
File: src/tools/metaplex/get_assets_by_creator.ts
================================================
import { SolanaAgentKit } from "../../agent";
import { createUmi } from "@metaplex-foundation/umi-bundle-defaults";
import {
  dasApi,
  GetAssetsByCreatorRpcInput,
} from "@metaplex-foundation/digital-asset-standard-api";

/**
 * Fetch assets by creator using the Metaplex DAS API
 * @param agent SolanaAgentKit instance
 * @param params Parameters for fetching assets by creator
 * @returns List of assets created by the specified creator
 */
export async function get_assets_by_creator(
  agent: SolanaAgentKit,
  params: GetAssetsByCreatorRpcInput,
) {
  const umi = createUmi(agent.connection.rpcEndpoint).use(dasApi());
  return await umi.rpc.getAssetsByCreator(params);
}


================================================
File: src/tools/metaplex/index.ts
================================================
export * from "./deploy_collection";
export * from "./mint_nft";
export * from "./deploy_token";
export * from "./get_asset";
export * from "./get_assets_by_authority";
export * from "./get_assets_by_creator";


================================================
File: src/tools/metaplex/mint_nft.ts
================================================
import { SolanaAgentKit } from "../../index";
import { generateSigner, keypairIdentity } from "@metaplex-foundation/umi";
import { create, mplCore } from "@metaplex-foundation/mpl-core";
import { fetchCollection } from "@metaplex-foundation/mpl-core";
import { PublicKey } from "@solana/web3.js";
import {
  fromWeb3JsKeypair,
  fromWeb3JsPublicKey,
  toWeb3JsPublicKey,
} from "@metaplex-foundation/umi-web3js-adapters";
import { createUmi } from "@metaplex-foundation/umi-bundle-defaults";
import { MintCollectionNFTResponse } from "../../types";

/**
 * Mint a new NFT as part of an existing collection
 * @param agent SolanaAgentKit instance
 * @param collectionMint Address of the collection's master NFT
 * @param metadata NFT metadata object
 * @param recipient Optional recipient address (defaults to wallet address)
 * @returns Object containing NFT mint address and token account
 */
export async function mintCollectionNFT(
  agent: SolanaAgentKit,
  collectionMint: PublicKey,
  metadata: {
    name: string;
    uri: string;
    sellerFeeBasisPoints?: number;
    creators?: Array<{
      address: string;
      share: number;
    }>;
  },
  recipient?: PublicKey,
): Promise<MintCollectionNFTResponse> {
  try {
    // Create UMI instance from agent
    const umi = createUmi(agent.connection.rpcEndpoint).use(mplCore());
    umi.use(keypairIdentity(fromWeb3JsKeypair(agent.wallet)));

    // Convert collection mint to UMI format
    const umiCollectionMint = fromWeb3JsPublicKey(collectionMint);

    // Fetch the existing collection
    const collection = await fetchCollection(umi, umiCollectionMint);

    // Generate a new signer for the NFT
    const assetSigner = generateSigner(umi);

    // Create the NFT in the collection
    await create(umi, {
      asset: assetSigner,
      collection: collection,
      name: metadata.name,
      uri: metadata.uri,
      owner: fromWeb3JsPublicKey(recipient ?? agent.wallet.publicKey),
    }).sendAndConfirm(umi);

    return {
      mint: toWeb3JsPublicKey(assetSigner.publicKey),
      // Note: Token account is now handled automatically by the create instruction
      metadata: toWeb3JsPublicKey(assetSigner.publicKey),
    };
  } catch (error: any) {
    throw new Error(`Collection NFT minting failed: ${error.message}`);
  }
}


================================================
File: src/tools/meteora/create_meteora_dlmm_pool.ts
================================================
import { SolanaAgentKit } from "../../agent";
import BN from "bn.js";
import { PublicKey } from "@solana/web3.js";
import DLMM, { ActivationType } from "@meteora-ag/dlmm";
import { getMint } from "@solana/spl-token";
import { sendTx } from "../../utils/send_tx";

/**
 * Create Meteora DLMM pool
 * @param agent SolanaAgentKit instance
 * @param binStep DLMM pool bin step
 * @param tokenAMint Token A mint
 * @param tokenBMint Token B mint
 * @param initialPrice Initial pool price in ratio tokenA / tokenB
 * @param priceRoundingUp Whether to rounding up the initial pool price
 * @param feeBps Pool trading fee in BPS
 * @param activationType Pool activation type (ActivationType.Timestamp or ActivationType.Slot)
 * @param hasAlphaVault Whether the pool has Meteora alpha vault or not
 * @param activationPoint Activation point depending on activation type, or null if pool doesn't have an activation point
 * @returns Transaction signature
 */
export async function createMeteoraDlmmPool(
  agent: SolanaAgentKit,
  binStep: number,
  tokenAMint: PublicKey,
  tokenBMint: PublicKey,
  initialPrice: number,
  priceRoundingUp: boolean,
  feeBps: number,
  activationType: ActivationType,
  hasAlphaVault: boolean,
  activationPoint: BN | undefined,
): Promise<string> {
  const tokenAMintInfo = await getMint(agent.connection, tokenAMint);
  const tokenBMintInfo = await getMint(agent.connection, tokenBMint);

  const initPrice = DLMM.getPricePerLamport(
    tokenAMintInfo.decimals,
    tokenBMintInfo.decimals,
    initialPrice,
  );

  const activateBinId = DLMM.getBinIdFromPrice(
    initPrice,
    binStep,
    !priceRoundingUp,
  );

  const initPoolTx = await DLMM.createCustomizablePermissionlessLbPair(
    agent.connection,
    new BN(binStep),
    tokenAMint,
    tokenBMint,
    new BN(activateBinId.toString()),
    new BN(feeBps),
    activationType,
    hasAlphaVault,
    agent.wallet_address,
    activationPoint,
    {
      cluster: "mainnet-beta",
    },
  );

  const initPoolTxHash = await sendTx(agent, initPoolTx.instructions, [
    agent.wallet,
  ]);

  return initPoolTxHash;
}


================================================
File: src/tools/meteora/create_meteora_dynamic_amm_pool.ts
================================================
import AmmImpl from "@mercurial-finance/dynamic-amm-sdk";
import { SolanaAgentKit } from "../../agent";
import BN from "bn.js";
import { PublicKey } from "@solana/web3.js";
import { CustomizableParams } from "@mercurial-finance/dynamic-amm-sdk/dist/cjs/src/amm/types";
import { sendTx } from "../../utils/send_tx";

/**
 * Create Meteora Dynamic AMM pool
 * @param agent SolanaAgentKit instance
 * @param tokenAMint Token A mint
 * @param tokenBMint Token B mint
 * @param tokenAAmount Token A amount in lamport units
 * @param tokenBAmount Token B amount in lamport units
 * @param customizableParams Parameters to create Dynamic AMM pool
 *        tradeFeeNumerator (number): Trade fee numerator, with default denominator is 100000
 *        activationType (enum): Should be ActivationType.Timestamp or ActivationType.Slot
 *        activationPoint (BN | null): Activation point depending on activation type, or null if pool doesn't have an activation point
 *        hasAlphaVault (boolean): Whether the pool has Meteora alpha vault or not
 *        padding (Array<number>): Should be set to value Array(90).fill(0)
 * @returns Transaction signature
 */
export async function createMeteoraDynamicAMMPool(
  agent: SolanaAgentKit,
  tokenAMint: PublicKey,
  tokenBMint: PublicKey,
  tokenAAmount: BN,
  tokenBAmount: BN,
  customizableParams: CustomizableParams,
): Promise<string> {
  const initPoolTx =
    await AmmImpl.createCustomizablePermissionlessConstantProductPool(
      agent.connection,
      agent.wallet_address,
      tokenAMint,
      tokenBMint,
      tokenAAmount,
      tokenBAmount,
      customizableParams,
    );

  const initPoolTxHash = await sendTx(agent, initPoolTx.instructions, [
    agent.wallet,
  ]);

  return initPoolTxHash;
}


================================================
File: src/tools/meteora/index.ts
================================================
export * from "./create_meteora_dlmm_pool";
export * from "./create_meteora_dynamic_amm_pool";


================================================
File: src/tools/openbook/index.ts
================================================
export * from "./openbook_create_market";


================================================
File: src/tools/openbook/openbook_create_market.ts
================================================
import {
  OPEN_BOOK_PROGRAM,
  Raydium,
  TxVersion,
} from "@raydium-io/raydium-sdk-v2";
import { MintLayout, TOKEN_PROGRAM_ID } from "@solana/spl-token";
import { PublicKey } from "@solana/web3.js";
import { SolanaAgentKit } from "../../index";

export async function openbookCreateMarket(
  agent: SolanaAgentKit,
  baseMint: PublicKey,
  quoteMint: PublicKey,
  lotSize: number = 1,
  tickSize: number = 0.01,
): Promise<string[]> {
  const raydium = await Raydium.load({
    owner: agent.wallet,
    connection: agent.connection,
  });

  const baseMintInfo = await agent.connection.getAccountInfo(baseMint);
  const quoteMintInfo = await agent.connection.getAccountInfo(quoteMint);

  if (
    baseMintInfo?.owner.toString() !== TOKEN_PROGRAM_ID.toBase58() ||
    quoteMintInfo?.owner.toString() !== TOKEN_PROGRAM_ID.toBase58()
  ) {
    throw new Error(
      "openbook market only support TOKEN_PROGRAM_ID mints, if you want to create pool with token-2022, please create raydium cpmm pool instead",
    );
  }

  const { execute } = await raydium.marketV2.create({
    baseInfo: {
      mint: baseMint,
      decimals: MintLayout.decode(baseMintInfo.data).decimals,
    },
    quoteInfo: {
      mint: quoteMint,
      decimals: MintLayout.decode(quoteMintInfo.data).decimals,
    },
    lotSize,
    tickSize,
    dexProgramId: OPEN_BOOK_PROGRAM,

    txVersion: TxVersion.V0,
  });

  const { txIds } = await execute({ sequentially: true });

  return txIds;
}


================================================
File: src/tools/orca/index.ts
================================================
export * from "./orca_close_position";
export * from "./orca_create_clmm";
export * from "./orca_create_single_sided_liquidity_pool";
export * from "./orca_fetch_positions";
export * from "./orca_open_centered_position_with_liquidity";
export * from "./orca_open_single_sided_position";


================================================
File: src/tools/orca/orca_close_position.ts
================================================
import {
  Keypair,
  PublicKey,
  TransactionMessage,
  VersionedTransaction,
} from "@solana/web3.js";
import { SolanaAgentKit } from "../../agent";
import { Wallet } from "../../utils/keypair";
import {
  ORCA_WHIRLPOOL_PROGRAM_ID,
  WhirlpoolContext,
  buildWhirlpoolClient,
  PDAUtil,
} from "@orca-so/whirlpools-sdk";
import { sendTx } from "../../utils/send_tx";
import { Percentage } from "@orca-so/common-sdk";

/**
 * # Closes a Liquidity Position in an Orca Whirlpool
 *
 * This function closes an existing liquidity position in a specified Orca Whirlpool. The user provides
 * the position's mint address.
 *
 * ## Parameters
 * - `agent`: The `SolanaAgentKit` instance representing the wallet and connection details.
 * - `positionMintAddress`: The mint address of the liquidity position to close.
 *
 * ## Returns
 * A `Promise` that resolves to a `string` containing the transaction ID of the transaction
 *
 * ## Notes
 * - The function uses Orca’s SDK to interact with the specified Whirlpool and close the liquidity position.
 * - A maximum slippage of 1% is assumed for liquidity provision during the position closing.
 * - The function automatically fetches the associated Whirlpool address and position details using the provided mint address.
 *
 * ## Throws
 * An error will be thrown if:
 * - The specified position mint address is invalid or inaccessible.
 * - The transaction fails to send.
 * - Any required position or Whirlpool data cannot be fetched.
 *
 * @param agent - The `SolanaAgentKit` instance representing the wallet and connection.
 * @param positionMintAddress - The mint address of the liquidity position to close.
 * @returns A promise resolving to the transaction ID (`string`).
 */
export async function orcaClosePosition(
  agent: SolanaAgentKit,
  positionMintAddress: PublicKey,
): Promise<string> {
  try {
    const wallet = new Wallet(agent.wallet);
    const ctx = WhirlpoolContext.from(
      agent.connection,
      wallet,
      ORCA_WHIRLPOOL_PROGRAM_ID,
    );
    const client = buildWhirlpoolClient(ctx);

    const positionAddress = PDAUtil.getPosition(
      ORCA_WHIRLPOOL_PROGRAM_ID,
      positionMintAddress,
    );
    const position = await client.getPosition(positionAddress.publicKey);
    const whirlpoolAddress = position.getData().whirlpool;
    const whirlpool = await client.getPool(whirlpoolAddress);
    const txBuilder = await whirlpool.closePosition(
      positionAddress.publicKey,
      Percentage.fromFraction(1, 100),
    );
    const txPayload = await txBuilder[0].build();
    const txPayloadDecompiled = TransactionMessage.decompile(
      (txPayload.transaction as VersionedTransaction).message,
    );
    const instructions = txPayloadDecompiled.instructions;
    const signers = txPayload.signers as Keypair[];

    const txId = await sendTx(agent, instructions, signers);
    return txId;
  } catch (error) {
    throw new Error(`${error}`);
  }
}


================================================
File: src/tools/orca/orca_create_clmm.ts
================================================
import {
  Keypair,
  PublicKey,
  TransactionMessage,
  VersionedTransaction,
} from "@solana/web3.js";
import { SolanaAgentKit } from "../../agent";
import { Wallet } from "../../utils/keypair";
import { Decimal } from "decimal.js";
import {
  ORCA_WHIRLPOOL_PROGRAM_ID,
  WhirlpoolContext,
  PriceMath,
  PoolUtil,
  buildWhirlpoolClient,
} from "@orca-so/whirlpools-sdk";
import { sendTx } from "../../utils/send_tx";
import { FEE_TIERS } from "./orca_create_single_sided_liquidity_pool";

/**
 * # Creates a CLMM Pool (Concentrated Liquidity Market Maker Pool).
 *
 * This function initializes a new Whirlpool (CLMM Pool) on Orca. It only sets up the pool and does not seed it with liquidity.
 *
 * ## Example Usage:
 * Suppose you want to create a CLMM pool with two tokens, SHARK and USDC, and set the initial price of SHARK to 0.001 USDC.
 * You would call this function with `mintA` as SHARK's mint address and `mintB` as USDC's mint address. The pool is created
 * with the specified fee tier and tick spacing associated with that fee tier.
 *
 * ### Note for Experts:
 * The Whirlpool program determines the token mint order, which might not match your expectation. This function
 * adjusts the input order as needed and inverts the initial price accordingly.
 *
 * @param agent - The `SolanaAgentKit` instance representing the wallet and connection details.
 * @param mintDeploy - The mint of the token you want to deploy (e.g., SHARK).
 * @param mintPair - The mint of the token you want to pair the deployed mint with (e.g., USDC).
 * @param initialPrice - The initial price of `mintDeploy` in terms of `mintPair`.
 * @param feeTier - The fee tier bps for the pool, determining tick spacing and fee collection rates.
 *
 * @returns A promise that resolves to a transaction ID (`string`) of the transaction creating the pool.
 *
 * @throws Will throw an error if:
 * - Mint accounts for the tokens cannot be fetched.
 * - The network is unsupported.
 *
 * @remarks
 * This function only initializes the CLMM pool and does not add liquidity. For adding liquidity, you can use
 * a separate function after the pool is successfully created.
 * ```
 */
export async function orcaCreateCLMM(
  agent: SolanaAgentKit,
  mintDeploy: PublicKey,
  mintPair: PublicKey,
  initialPrice: Decimal,
  feeTier: keyof typeof FEE_TIERS,
): Promise<string> {
  try {
    let whirlpoolsConfigAddress: PublicKey;
    if (agent.connection.rpcEndpoint.includes("mainnet")) {
      whirlpoolsConfigAddress = new PublicKey(
        "2LecshUwdy9xi7meFgHtFJQNSKk4KdTrcpvaB56dP2NQ",
      );
    } else if (agent.connection.rpcEndpoint.includes("devnet")) {
      whirlpoolsConfigAddress = new PublicKey(
        "FcrweFY1G9HJAHG5inkGB6pKg1HZ6x9UC2WioAfWrGkR",
      );
    } else {
      throw new Error("Unsupported network");
    }
    const wallet = new Wallet(agent.wallet);
    const ctx = WhirlpoolContext.from(
      agent.connection,
      wallet,
      ORCA_WHIRLPOOL_PROGRAM_ID,
    );
    const fetcher = ctx.fetcher;
    const client = buildWhirlpoolClient(ctx);

    const correctTokenOrder = PoolUtil.orderMints(mintDeploy, mintPair).map(
      (addr) => addr.toString(),
    );
    const isCorrectMintOrder = correctTokenOrder[0] === mintDeploy.toString();
    let mintA;
    let mintB;
    if (!isCorrectMintOrder) {
      [mintA, mintB] = [mintPair, mintDeploy];
      initialPrice = new Decimal(1 / initialPrice.toNumber());
    } else {
      [mintA, mintB] = [mintDeploy, mintPair];
    }
    const mintAAccount = await fetcher.getMintInfo(mintA);
    const mintBAccount = await fetcher.getMintInfo(mintB);
    if (mintAAccount === null || mintBAccount === null) {
      throw Error("Mint account not found");
    }

    const tickSpacing = FEE_TIERS[feeTier];
    const initialTick = PriceMath.priceToInitializableTickIndex(
      initialPrice,
      mintAAccount.decimals,
      mintBAccount.decimals,
      tickSpacing,
    );
    const { poolKey, tx: txBuilder } = await client.createPool(
      whirlpoolsConfigAddress,
      mintA,
      mintB,
      tickSpacing,
      initialTick,
      wallet.publicKey,
    );

    const txPayload = await txBuilder.build();
    const txPayloadDecompiled = TransactionMessage.decompile(
      (txPayload.transaction as VersionedTransaction).message,
    );
    const instructions = txPayloadDecompiled.instructions;

    const txId = await sendTx(
      agent,
      instructions,
      txPayload.signers as Keypair[],
    );
    return JSON.stringify({
      transactionId: txId,
      whirlpoolAddress: poolKey.toString(),
    });
  } catch (error) {
    throw new Error(`${error}`);
  }
}


================================================
File: src/tools/orca/orca_create_single_sided_liquidity_pool.ts
================================================
import {
  Keypair,
  PublicKey,
  TransactionMessage,
  VersionedTransaction,
} from "@solana/web3.js";
import { SolanaAgentKit } from "../../agent";
import { BN } from "@coral-xyz/anchor";
import { Wallet } from "../../utils/keypair";
import { Decimal } from "decimal.js";
import {
  PDAUtil,
  ORCA_WHIRLPOOL_PROGRAM_ID,
  WhirlpoolContext,
  TickUtil,
  PriceMath,
  PoolUtil,
  TokenExtensionContextForPool,
  NO_TOKEN_EXTENSION_CONTEXT,
  TokenExtensionUtil,
  WhirlpoolIx,
  IncreaseLiquidityQuoteParam,
  increaseLiquidityQuoteByInputTokenWithParams,
} from "@orca-so/whirlpools-sdk";
import {
  Percentage,
  resolveOrCreateATAs,
  TransactionBuilder,
} from "@orca-so/common-sdk";
import {
  increaseLiquidityIx,
  increaseLiquidityV2Ix,
  initTickArrayIx,
  openPositionWithTokenExtensionsIx,
} from "@orca-so/whirlpools-sdk/dist/instructions";
import {
  getAssociatedTokenAddressSync,
  TOKEN_2022_PROGRAM_ID,
} from "@solana/spl-token";
import { sendTx } from "../../utils/send_tx";

/**
 * Maps fee tier bps to their corresponding tick spacing values in the Orca Whirlpool protocol.
 *
 * @remarks
 * Fee tiers determine the percentage of fees collected on swaps, while tick spacing affects
 * the granularity of price ranges for liquidity positions.
 *
 * For more details, refer to:
 * - [Whirlpool Fees](https://orca-so.github.io/whirlpools/Architecture%20Overview/Whirlpool%20Fees)
 * - [Whirlpool Parameters](https://orca-so.github.io/whirlpools/Architecture%20Overview/Whirlpool%20Parameters)
 *
 * @example
 * const tickSpacing = FEE_TIERS[1]; // returns 1
 */
export const FEE_TIERS = {
  1: 1,
  2: 2,
  4: 4,
  5: 8,
  16: 16,
  30: 64,
  65: 96,
  100: 128,
  200: 256,
} as const;

/**
 * # Creates a single-sided liquidity pool.
 *
 * This function initializes a new Whirlpool (liquidity pool) on Orca and seeds it with liquidity from a single token.
 *
 * ## Example Usage:
 * You created a new token called SHARK, and you want to set the initial price to 0.001 USDC.
 * You set `depositTokenMint` to SHARK's mint address and `otherTokenMint` to USDC's mint address.
 * You can minimize price impact for buyers in a few ways:
 * 1. Increase the amount of tokens you deposit
 * 2. Set the initial price very low
 * 3. Set the maximum price closer to the initial price
 *
 * ### Note for experts:
 * The Wrhirlpool program initializes the Whirlpool with the in a specific order. This might not be
 * the order you expect, so the function checks the order and adjusts the inverts the prices. This means that
 * on-chain the Whirlpool might be configured as USDC/SHARK instead of SHARK/USDC, and the on-chain price will
 * be 1/`initialPrice`. This will not affect the price of the token as you intended it to be.
 *
 * @param agent - The `SolanaAgentKit` instance representing the wallet and connection details.
 * @param depositTokenAmount - The amount of the deposit token to deposit in the pool.
 * @param depositTokenMint - The mint address of the token being deposited into the pool, eg. SHARK.
 * @param otherTokenMint - The mint address of the other token in the pool, eg. USDC.
 * @param initialPrice - The initial price of the deposit token in terms of the other token.
 * @param maxPrice - The maximum price at which liquidity is added.
 * @param feeTier - The fee tier bps for the pool, determining tick spacing and fee collection rates.
 *
 * @returns A promise that resolves to a transaction ID (`string`) of the transaction creating the pool.
 *
 * @throws Will throw an error if:
 * - Mint accounts for the tokens cannot be fetched.
 * - Prices are out of bounds.
 *
 * @remarks
 * This function is designed for single-sided deposits where users only contribute one type of token,
 * and the function manages mint order and necessary calculations.
 */
export async function orcaCreateSingleSidedLiquidityPool(
  agent: SolanaAgentKit,
  depositTokenAmount: number,
  depositTokenMint: PublicKey,
  otherTokenMint: PublicKey,
  initialPrice: Decimal,
  maxPrice: Decimal,
  feeTierBps: keyof typeof FEE_TIERS,
): Promise<string> {
  try {
    let whirlpoolsConfigAddress: PublicKey;
    if (agent.connection.rpcEndpoint.includes("mainnet")) {
      whirlpoolsConfigAddress = new PublicKey(
        "2LecshUwdy9xi7meFgHtFJQNSKk4KdTrcpvaB56dP2NQ",
      );
    } else if (agent.connection.rpcEndpoint.includes("devnet")) {
      whirlpoolsConfigAddress = new PublicKey(
        "FcrweFY1G9HJAHG5inkGB6pKg1HZ6x9UC2WioAfWrGkR",
      );
    } else {
      throw new Error("Unsupported network");
    }
    const wallet = new Wallet(agent.wallet);
    const ctx = WhirlpoolContext.from(
      agent.connection,
      wallet,
      ORCA_WHIRLPOOL_PROGRAM_ID,
    );
    const fetcher = ctx.fetcher;

    const correctTokenOrder = PoolUtil.orderMints(
      otherTokenMint,
      depositTokenMint,
    ).map((addr) => addr.toString());
    const isCorrectMintOrder =
      correctTokenOrder[0] === depositTokenMint.toString();
    let mintA, mintB;
    if (isCorrectMintOrder) {
      [mintA, mintB] = [depositTokenMint, otherTokenMint];
    } else {
      [mintA, mintB] = [otherTokenMint, depositTokenMint];
      initialPrice = new Decimal(1 / initialPrice.toNumber());
      maxPrice = new Decimal(1 / maxPrice.toNumber());
    }
    const mintAAccount = await fetcher.getMintInfo(mintA);
    const mintBAccount = await fetcher.getMintInfo(mintB);
    if (mintAAccount === null || mintBAccount === null) {
      throw Error("Mint account not found");
    }
    const tickSpacing = FEE_TIERS[feeTierBps];
    const tickIndex = PriceMath.priceToTickIndex(
      initialPrice,
      mintAAccount.decimals,
      mintBAccount.decimals,
    );
    const initialTick = TickUtil.getInitializableTickIndex(
      tickIndex,
      tickSpacing,
    );

    const tokenExtensionCtx: TokenExtensionContextForPool = {
      ...NO_TOKEN_EXTENSION_CONTEXT,
      tokenMintWithProgramA: mintAAccount,
      tokenMintWithProgramB: mintBAccount,
    };
    const feeTierKey = PDAUtil.getFeeTier(
      ORCA_WHIRLPOOL_PROGRAM_ID,
      whirlpoolsConfigAddress,
      tickSpacing,
    ).publicKey;
    const initSqrtPrice = PriceMath.tickIndexToSqrtPriceX64(initialTick);
    const tokenVaultAKeypair = Keypair.generate();
    const tokenVaultBKeypair = Keypair.generate();
    const whirlpoolPda = PDAUtil.getWhirlpool(
      ORCA_WHIRLPOOL_PROGRAM_ID,
      whirlpoolsConfigAddress,
      mintA,
      mintB,
      FEE_TIERS[feeTierBps],
    );
    const tokenBadgeA = PDAUtil.getTokenBadge(
      ORCA_WHIRLPOOL_PROGRAM_ID,
      whirlpoolsConfigAddress,
      mintA,
    ).publicKey;
    const tokenBadgeB = PDAUtil.getTokenBadge(
      ORCA_WHIRLPOOL_PROGRAM_ID,
      whirlpoolsConfigAddress,
      mintB,
    ).publicKey;
    const baseParamsPool = {
      initSqrtPrice,
      whirlpoolsConfig: whirlpoolsConfigAddress,
      whirlpoolPda,
      tokenMintA: mintA,
      tokenMintB: mintB,
      tokenVaultAKeypair,
      tokenVaultBKeypair,
      feeTierKey,
      tickSpacing: tickSpacing,
      funder: wallet.publicKey,
    };
    const initPoolIx = !TokenExtensionUtil.isV2IxRequiredPool(tokenExtensionCtx)
      ? WhirlpoolIx.initializePoolIx(ctx.program, baseParamsPool)
      : WhirlpoolIx.initializePoolV2Ix(ctx.program, {
          ...baseParamsPool,
          tokenProgramA: tokenExtensionCtx.tokenMintWithProgramA.tokenProgram,
          tokenProgramB: tokenExtensionCtx.tokenMintWithProgramB.tokenProgram,
          tokenBadgeA,
          tokenBadgeB,
        });
    const initialTickArrayStartTick = TickUtil.getStartTickIndex(
      initialTick,
      tickSpacing,
    );
    const initialTickArrayPda = PDAUtil.getTickArray(
      ctx.program.programId,
      whirlpoolPda.publicKey,
      initialTickArrayStartTick,
    );

    const txBuilder = new TransactionBuilder(
      ctx.provider.connection,
      ctx.provider.wallet,
      ctx.txBuilderOpts,
    );
    txBuilder.addInstruction(initPoolIx);
    txBuilder.addInstruction(
      initTickArrayIx(ctx.program, {
        startTick: initialTickArrayStartTick,
        tickArrayPda: initialTickArrayPda,
        whirlpool: whirlpoolPda.publicKey,
        funder: wallet.publicKey,
      }),
    );

    let tickLowerIndex, tickUpperIndex;
    if (isCorrectMintOrder) {
      tickLowerIndex = initialTick;
      tickUpperIndex = PriceMath.priceToTickIndex(
        maxPrice,
        mintAAccount.decimals,
        mintBAccount.decimals,
      );
    } else {
      tickLowerIndex = PriceMath.priceToTickIndex(
        maxPrice,
        mintAAccount.decimals,
        mintBAccount.decimals,
      );
      tickUpperIndex = initialTick;
    }
    const tickLowerInitializableIndex = TickUtil.getInitializableTickIndex(
      tickLowerIndex,
      tickSpacing,
    );
    const tickUpperInitializableIndex = TickUtil.getInitializableTickIndex(
      tickUpperIndex,
      tickSpacing,
    );
    if (
      !TickUtil.checkTickInBounds(tickLowerInitializableIndex) ||
      !TickUtil.checkTickInBounds(tickUpperInitializableIndex)
    ) {
      throw Error("Prices out of bounds");
    }
    depositTokenAmount = isCorrectMintOrder
      ? depositTokenAmount * Math.pow(10, mintAAccount.decimals)
      : depositTokenAmount * Math.pow(10, mintBAccount.decimals);
    const increasLiquidityQuoteParam: IncreaseLiquidityQuoteParam = {
      inputTokenAmount: new BN(depositTokenAmount),
      inputTokenMint: depositTokenMint,
      tokenMintA: mintA,
      tokenMintB: mintB,
      tickCurrentIndex: initialTick,
      sqrtPrice: initSqrtPrice,
      tickLowerIndex: tickLowerInitializableIndex,
      tickUpperIndex: tickUpperInitializableIndex,
      tokenExtensionCtx: tokenExtensionCtx,
      slippageTolerance: Percentage.fromFraction(0, 100),
    };
    const liquidityInput = increaseLiquidityQuoteByInputTokenWithParams(
      increasLiquidityQuoteParam,
    );
    const { liquidityAmount: liquidity, tokenMaxA, tokenMaxB } = liquidityInput;

    const positionMintKeypair = Keypair.generate();
    const positionMintPubkey = positionMintKeypair.publicKey;
    const positionPda = PDAUtil.getPosition(
      ORCA_WHIRLPOOL_PROGRAM_ID,
      positionMintPubkey,
    );
    const positionTokenAccountAddress = getAssociatedTokenAddressSync(
      positionMintPubkey,
      wallet.publicKey,
      ctx.accountResolverOpts.allowPDAOwnerAddress,
      TOKEN_2022_PROGRAM_ID,
    );
    const params = {
      funder: wallet.publicKey,
      owner: wallet.publicKey,
      positionPda,
      positionTokenAccount: positionTokenAccountAddress,
      whirlpool: whirlpoolPda.publicKey,
      tickLowerIndex: tickLowerInitializableIndex,
      tickUpperIndex: tickUpperInitializableIndex,
    };
    const positionIx = openPositionWithTokenExtensionsIx(ctx.program, {
      ...params,
      positionMint: positionMintPubkey,
      withTokenMetadataExtension: true,
    });

    txBuilder.addInstruction(positionIx);
    txBuilder.addSigner(positionMintKeypair);

    const [ataA, ataB] = await resolveOrCreateATAs(
      ctx.connection,
      wallet.publicKey,
      [
        { tokenMint: mintA, wrappedSolAmountIn: tokenMaxA },
        { tokenMint: mintB, wrappedSolAmountIn: tokenMaxB },
      ],
      () => ctx.fetcher.getAccountRentExempt(),
      wallet.publicKey,
      undefined,
      ctx.accountResolverOpts.allowPDAOwnerAddress,
      "ata",
    );
    const { address: tokenOwnerAccountA, ...tokenOwnerAccountAIx } = ataA;
    const { address: tokenOwnerAccountB, ...tokenOwnerAccountBIx } = ataB;

    txBuilder.addInstruction(tokenOwnerAccountAIx);
    txBuilder.addInstruction(tokenOwnerAccountBIx);

    const tickArrayLowerStartIndex = TickUtil.getStartTickIndex(
      tickLowerInitializableIndex,
      tickSpacing,
    );
    const tickArrayUpperStartIndex = TickUtil.getStartTickIndex(
      tickUpperInitializableIndex,
      tickSpacing,
    );
    const tickArrayLowerPda = PDAUtil.getTickArray(
      ctx.program.programId,
      whirlpoolPda.publicKey,
      tickArrayLowerStartIndex,
    );
    const tickArrayUpperPda = PDAUtil.getTickArray(
      ctx.program.programId,
      whirlpoolPda.publicKey,
      tickArrayUpperStartIndex,
    );
    if (tickArrayUpperStartIndex !== tickArrayLowerStartIndex) {
      if (isCorrectMintOrder) {
        txBuilder.addInstruction(
          initTickArrayIx(ctx.program, {
            startTick: tickArrayUpperStartIndex,
            tickArrayPda: tickArrayUpperPda,
            whirlpool: whirlpoolPda.publicKey,
            funder: wallet.publicKey,
          }),
        );
      } else {
        txBuilder.addInstruction(
          initTickArrayIx(ctx.program, {
            startTick: tickArrayLowerStartIndex,
            tickArrayPda: tickArrayLowerPda,
            whirlpool: whirlpoolPda.publicKey,
            funder: wallet.publicKey,
          }),
        );
      }
    }

    const baseParamsLiquidity = {
      liquidityAmount: liquidity,
      tokenMaxA,
      tokenMaxB,
      whirlpool: whirlpoolPda.publicKey,
      positionAuthority: wallet.publicKey,
      position: positionPda.publicKey,
      positionTokenAccount: positionTokenAccountAddress,
      tokenOwnerAccountA,
      tokenOwnerAccountB,
      tokenVaultA: tokenVaultAKeypair.publicKey,
      tokenVaultB: tokenVaultBKeypair.publicKey,
      tickArrayLower: tickArrayLowerPda.publicKey,
      tickArrayUpper: tickArrayUpperPda.publicKey,
    };

    const liquidityIx = !TokenExtensionUtil.isV2IxRequiredPool(
      tokenExtensionCtx,
    )
      ? increaseLiquidityIx(ctx.program, baseParamsLiquidity)
      : increaseLiquidityV2Ix(ctx.program, {
          ...baseParamsLiquidity,
          tokenMintA: mintA,
          tokenMintB: mintB,
          tokenProgramA: tokenExtensionCtx.tokenMintWithProgramA.tokenProgram,
          tokenProgramB: tokenExtensionCtx.tokenMintWithProgramB.tokenProgram,
        });
    txBuilder.addInstruction(liquidityIx);

    const txPayload = await txBuilder.build();
    const instructions = TransactionMessage.decompile(
      (txPayload.transaction as VersionedTransaction).message,
    ).instructions;

    const txId = await sendTx(agent, instructions, [
      positionMintKeypair,
      tokenVaultAKeypair,
      tokenVaultBKeypair,
    ]);
    return txId;
  } catch (error) {
    throw new Error(`Failed to send transaction: ${JSON.stringify(error)}`);
  }
}


================================================
File: src/tools/orca/orca_fetch_positions.ts
================================================
import { SolanaAgentKit } from "../../agent";
import { Wallet } from "@coral-xyz/anchor";
import {
  ORCA_WHIRLPOOL_PROGRAM_ID,
  WhirlpoolContext,
  buildWhirlpoolClient,
  getAllPositionAccountsByOwner,
  PriceMath,
} from "@orca-so/whirlpools-sdk";

interface PositionInfo {
  whirlpoolAddress: string;
  positionInRange: boolean;
  distanceFromCenterBps: number;
}

type PositionDataMap = {
  [positionMintAddress: string]: PositionInfo;
};

/**
 * # Fetches Liquidity Position Data in Orca Whirlpools
 *
 * Fetches data for all liquidity positions owned by the provided wallet, including:
 * - Whirlpool address.
 * - Whether the position is in range.
 * - Distance from the center price to the current price in basis points.
 *
 * ## Parameters
 * - `agent`: The `SolanaAgentKit` instance representing the wallet and connection.
 *
 * ## Returns
 * A JSON string with an object mapping position mint addresses to position details:
 * ```json
 * {
 *   "positionMintAddress1": {
 *     "whirlpoolAddress": "whirlpoolAddress1",
 *     "positionInRange": true,
 *     "distanceFromCenterBps": 250
 *   }
 * }
 * ```
 *
 * ## Throws
 * - If positions cannot be fetched or processed.
 * - If the position mint address is invalid.
 *
 * @param agent - The `SolanaAgentKit` instance.
 * @returns A JSON string with position data.
 */
export async function orcaFetchPositions(
  agent: SolanaAgentKit,
): Promise<string> {
  try {
    const wallet = new Wallet(agent.wallet);
    const ctx = WhirlpoolContext.from(
      agent.connection,
      wallet,
      ORCA_WHIRLPOOL_PROGRAM_ID,
    );
    const client = buildWhirlpoolClient(ctx);

    const positions = await getAllPositionAccountsByOwner({
      ctx,
      owner: agent.wallet.publicKey,
    });
    const positionDatas = [
      ...positions.positions.entries(),
      ...positions.positionsWithTokenExtensions.entries(),
    ];
    const result: PositionDataMap = {};
    for (const [, positionData] of positionDatas) {
      const positionMintAddress = positionData.positionMint;
      const whirlpoolAddress = positionData.whirlpool;
      const whirlpool = await client.getPool(whirlpoolAddress);
      const whirlpoolData = whirlpool.getData();
      const sqrtPrice = whirlpoolData.sqrtPrice;
      const currentTick = whirlpoolData.tickCurrentIndex;
      const mintA = whirlpool.getTokenAInfo();
      const mintB = whirlpool.getTokenBInfo();
      const currentPrice = PriceMath.sqrtPriceX64ToPrice(
        sqrtPrice,
        mintA.decimals,
        mintB.decimals,
      );
      const lowerTick = positionData.tickLowerIndex;
      const upperTick = positionData.tickUpperIndex;
      const lowerPrice = PriceMath.tickIndexToPrice(
        lowerTick,
        mintA.decimals,
        mintB.decimals,
      );
      const upperPrice = PriceMath.tickIndexToPrice(
        upperTick,
        mintA.decimals,
        mintB.decimals,
      );
      const centerPosition = lowerPrice.add(upperPrice).div(2);

      const positionInRange =
        currentTick > lowerTick && currentTick < upperTick ? true : false;
      const distanceFromCenterBps = Math.ceil(
        currentPrice
          .sub(centerPosition)
          .abs()
          .div(centerPosition)
          .mul(10000)
          .toNumber(),
      );

      result[positionMintAddress.toString()] = {
        whirlpoolAddress: whirlpoolAddress.toString(),
        positionInRange,
        distanceFromCenterBps,
      };
    }
    return JSON.stringify(result);
  } catch (error) {
    throw new Error(`${error}`);
  }
}


================================================
File: src/tools/orca/orca_open_centered_position_with_liquidity.ts
================================================
import {
  Keypair,
  PublicKey,
  TransactionInstruction,
  TransactionMessage,
  VersionedTransaction,
} from "@solana/web3.js";
import { SolanaAgentKit } from "../../agent";
import { Wallet } from "../../utils/keypair";
import { Decimal } from "decimal.js";
import {
  ORCA_WHIRLPOOL_PROGRAM_ID,
  WhirlpoolContext,
  PriceMath,
  buildWhirlpoolClient,
  increaseLiquidityQuoteByInputToken,
  TokenExtensionContextForPool,
  NO_TOKEN_EXTENSION_CONTEXT,
} from "@orca-so/whirlpools-sdk";

import { sendTx } from "../../utils/send_tx";
import { Percentage } from "@orca-so/common-sdk";
import { TOKEN_2022_PROGRAM_ID } from "@solana/spl-token";

/**
 * # Opens a Centered Liquidity Position in an Orca Whirlpool
 *
 * This function opens a centered liquidity position in a specified Orca Whirlpool. The user defines
 * a basis point (bps) offset from the current price of the pool to set the lower and upper bounds of the position.
 * The user also specifies the token mint and the amount to deposit. The required amount of the other token
 * is calculated automatically.
 *
 * ## Parameters
 * - `agent`: The `SolanaAgentKit` instance representing the wallet and connection details.
 * - `whirlpoolAddress`: The address of the Orca Whirlpool where the position will be opened.
 * - `priceOffsetBps`: The basis point (bps) offset (on one side) from the current price fo the pool. For example,
 *   500 bps (5%) creates a range from 95% to 105% of the current pool price.
 * - `inputTokenMint`: The mint address of the token being deposited (e.g., USDC or another token).
 * - `inputAmount`: The amount of the input token to deposit, specified as a `Decimal` value.
 *
 * ## Returns
 * A `Promise` that resolves to the transaction ID (`string`) of the transaction that opens the position.
 *
 * ## Notes
 * - The `priceOffsetBps` specifies the range symmetrically around the current price.
 * - The specified `inputTokenMint` determines which token is deposited directly. The function calculates
 *   the required amount of the other token based on the specified price range.
 * - This function supports Orca's token extensions for managing tokens with special behaviors.
 * - The function assumes a maximum slippage of 1% for liquidity provision.
 *
 * ## Throws
 * An error will be thrown if:
 * - The specified Whirlpool address is invalid or inaccessible.
 * - The transaction fails to send.
 * - Any required mint information cannot be fetched.
 *
 * @param agent - The `SolanaAgentKit` instance representing the wallet and connection.
 * @param whirlpoolAddress - The address of the Orca Whirlpool.
 * @param priceOffsetBps - The basis point offset (one side) from the current pool price.
 * @param inputTokenMint - The mint address of the token to deposit.
 * @param inputAmount - The amount of the input token to deposit.
 * @returns A promise resolving to the transaction ID (`string`).
 */
export async function orcaOpenCenteredPositionWithLiquidity(
  agent: SolanaAgentKit,
  whirlpoolAddress: PublicKey,
  priceOffsetBps: number,
  inputTokenMint: PublicKey,
  inputAmount: Decimal,
): Promise<string> {
  try {
    const wallet = new Wallet(agent.wallet);
    const ctx = WhirlpoolContext.from(
      agent.connection,
      wallet,
      ORCA_WHIRLPOOL_PROGRAM_ID,
    );
    const client = buildWhirlpoolClient(ctx);

    const whirlpool = await client.getPool(whirlpoolAddress);
    const whirlpoolData = whirlpool.getData();
    const mintInfoA = whirlpool.getTokenAInfo();
    const mintInfoB = whirlpool.getTokenBInfo();
    const price = PriceMath.sqrtPriceX64ToPrice(
      whirlpoolData.sqrtPrice,
      mintInfoA.decimals,
      mintInfoB.decimals,
    );

    const lowerPrice = price.mul(1 - priceOffsetBps / 10000);
    const upperPrice = price.mul(1 + priceOffsetBps / 10000);
    const lowerTick = PriceMath.priceToInitializableTickIndex(
      lowerPrice,
      mintInfoA.decimals,
      mintInfoB.decimals,
      whirlpoolData.tickSpacing,
    );
    const upperTick = PriceMath.priceToInitializableTickIndex(
      upperPrice,
      mintInfoA.decimals,
      mintInfoB.decimals,
      whirlpoolData.tickSpacing,
    );

    const txBuilderTickArrays = await whirlpool.initTickArrayForTicks([
      lowerTick,
      upperTick,
    ]);
    let instructions: TransactionInstruction[] = [];
    let signers: Keypair[] = [];
    if (txBuilderTickArrays !== null) {
      const txPayloadTickArrays = await txBuilderTickArrays.build();
      const txPayloadTickArraysDecompiled = TransactionMessage.decompile(
        (txPayloadTickArrays.transaction as VersionedTransaction).message,
      );
      const instructionsTickArrays = txPayloadTickArraysDecompiled.instructions;
      instructions = instructions.concat(instructionsTickArrays);
      signers = signers.concat(txPayloadTickArrays.signers as Keypair[]);
    }

    const tokenExtensionCtx: TokenExtensionContextForPool = {
      ...NO_TOKEN_EXTENSION_CONTEXT,
      tokenMintWithProgramA: mintInfoA,
      tokenMintWithProgramB: mintInfoB,
    };
    const increaseLiquiditQuote = increaseLiquidityQuoteByInputToken(
      inputTokenMint,
      inputAmount,
      lowerTick,
      upperTick,
      Percentage.fromFraction(1, 100),
      whirlpool,
      tokenExtensionCtx,
    );
    const { positionMint, tx: txBuilder } =
      await whirlpool.openPositionWithMetadata(
        lowerTick,
        upperTick,
        increaseLiquiditQuote,
        undefined,
        undefined,
        undefined,
        TOKEN_2022_PROGRAM_ID,
      );

    const txPayload = await txBuilder.build();
    const txPayloadDecompiled = TransactionMessage.decompile(
      (txPayload.transaction as VersionedTransaction).message,
    );
    instructions = instructions.concat(txPayloadDecompiled.instructions);
    signers = signers.concat(txPayload.signers as Keypair[]);

    const txId = await sendTx(agent, instructions, signers);
    return JSON.stringify({
      transactionId: txId,
      positionMint: positionMint.toString(),
    });
  } catch (error) {
    throw new Error(`${error}`);
  }
}


================================================
File: src/tools/orca/orca_open_single_sided_position.ts
================================================
import {
  Keypair,
  PublicKey,
  TransactionInstruction,
  TransactionMessage,
  VersionedTransaction,
} from "@solana/web3.js";
import { SolanaAgentKit } from "../../agent";
import { Wallet } from "../../utils/keypair";
import { Decimal } from "decimal.js";
import {
  ORCA_WHIRLPOOL_PROGRAM_ID,
  WhirlpoolContext,
  PriceMath,
  buildWhirlpoolClient,
  increaseLiquidityQuoteByInputToken,
  TokenExtensionContextForPool,
  NO_TOKEN_EXTENSION_CONTEXT,
} from "@orca-so/whirlpools-sdk";
import { sendTx } from "../../utils/send_tx";
import { Percentage } from "@orca-so/common-sdk";
import { TOKEN_2022_PROGRAM_ID } from "@solana/spl-token";

/**
 * # Opens a Single-Sided Liquidity Position in an Orca Whirlpool
 *
 * This function opens a single-sided liquidity position in a specified Orca Whirlpool. The user specifies
 * a basis point (bps) offset from the current price for the lower bound and a width (bps) for the range width.
 * The required amount of the other token is calculated automatically.
 *
 * ## Parameters
 * - `agent`: The `SolanaAgentKit` instance representing the wallet and connection details.
 * - `whirlpoolAddress`: The address of the Orca Whirlpool where the position will be opened.
 * - `distanceFromCurrentPriceBps`: The basis point offset from the current price for the lower bound.
 * - `widthBps`: The width of the range as a percentage increment from the lower bound.
 * - `inputTokenMint`: The mint address of the token being deposited (e.g., USDC or another token).
 * - `inputAmount`: The amount of the input token to deposit, specified as a `Decimal` value.
 *
 * ## Returns
 * A `Promise` that resolves to the transaction ID (`string`) of the transaction that opens the position.
 *
 * ## Notes
 * - The `distanceFromCurrentPriceBps` specifies the starting point of the range.
 * - The `widthBps` determines the range size from the lower bound.
 * - The specified `inputTokenMint` determines which token is deposited directly.
 *
 * @param agent - The `SolanaAgentKit` instance representing the wallet and connection.
 * @param whirlpoolAddress - The address of the Orca Whirlpool.
 * @param distanceFromCurrentPriceBps - The basis point offset from the current price for the lower bound.
 * @param widthBps - The width of the range as a percentage increment from the lower bound.
 * @param inputTokenMint - The mint address of the token to deposit.
 * @param inputAmount - The amount of the input token to deposit.
 * @returns A promise resolving to the transaction ID (`string`).
 */
export async function orcaOpenSingleSidedPosition(
  agent: SolanaAgentKit,
  whirlpoolAddress: PublicKey,
  distanceFromCurrentPriceBps: number,
  widthBps: number,
  inputTokenMint: PublicKey,
  inputAmount: Decimal,
): Promise<string> {
  try {
    const wallet = new Wallet(agent.wallet);
    const ctx = WhirlpoolContext.from(
      agent.connection,
      wallet,
      ORCA_WHIRLPOOL_PROGRAM_ID,
    );
    const client = buildWhirlpoolClient(ctx);

    const whirlpool = await client.getPool(whirlpoolAddress);
    const whirlpoolData = whirlpool.getData();
    const mintInfoA = whirlpool.getTokenAInfo();
    const mintInfoB = whirlpool.getTokenBInfo();
    const price = PriceMath.sqrtPriceX64ToPrice(
      whirlpoolData.sqrtPrice,
      mintInfoA.decimals,
      mintInfoB.decimals,
    );

    const isTokenA = inputTokenMint.equals(mintInfoA.mint);
    let lowerBoundPrice;
    let upperBoundPrice;
    let lowerTick;
    let upperTick;
    if (isTokenA) {
      lowerBoundPrice = price.mul(1 + distanceFromCurrentPriceBps / 10000);
      upperBoundPrice = lowerBoundPrice.mul(1 + widthBps / 10000);
      upperTick = PriceMath.priceToInitializableTickIndex(
        upperBoundPrice,
        mintInfoA.decimals,
        mintInfoB.decimals,
        whirlpoolData.tickSpacing,
      );
      lowerTick = PriceMath.priceToInitializableTickIndex(
        lowerBoundPrice,
        mintInfoA.decimals,
        mintInfoB.decimals,
        whirlpoolData.tickSpacing,
      );
    } else {
      lowerBoundPrice = price.mul(1 - distanceFromCurrentPriceBps / 10000);
      upperBoundPrice = lowerBoundPrice.mul(1 - widthBps / 10000);
      lowerTick = PriceMath.priceToInitializableTickIndex(
        upperBoundPrice,
        mintInfoA.decimals,
        mintInfoB.decimals,
        whirlpoolData.tickSpacing,
      );
      upperTick = PriceMath.priceToInitializableTickIndex(
        lowerBoundPrice,
        mintInfoA.decimals,
        mintInfoB.decimals,
        whirlpoolData.tickSpacing,
      );
    }

    const txBuilderTickArrays = await whirlpool.initTickArrayForTicks([
      lowerTick,
      upperTick,
    ]);
    let instructions: TransactionInstruction[] = [];
    let signers: Keypair[] = [];
    if (txBuilderTickArrays !== null) {
      const txPayloadTickArrays = await txBuilderTickArrays.build();
      const txPayloadTickArraysDecompiled = TransactionMessage.decompile(
        (txPayloadTickArrays.transaction as VersionedTransaction).message,
      );
      instructions = instructions.concat(
        txPayloadTickArraysDecompiled.instructions,
      );
      signers = signers.concat(txPayloadTickArrays.signers as Keypair[]);
    }

    const tokenExtensionCtx: TokenExtensionContextForPool = {
      ...NO_TOKEN_EXTENSION_CONTEXT,
      tokenMintWithProgramA: mintInfoA,
      tokenMintWithProgramB: mintInfoB,
    };
    const increaseLiquiditQuote = increaseLiquidityQuoteByInputToken(
      inputTokenMint,
      inputAmount,
      lowerTick,
      upperTick,
      Percentage.fromFraction(1, 100),
      whirlpool,
      tokenExtensionCtx,
    );
    const { positionMint, tx: txBuilder } =
      await whirlpool.openPositionWithMetadata(
        lowerTick,
        upperTick,
        increaseLiquiditQuote,
        undefined,
        undefined,
        undefined,
        TOKEN_2022_PROGRAM_ID,
      );

    const txPayload = await txBuilder.build();
    const txPayloadDecompiled = TransactionMessage.decompile(
      (txPayload.transaction as VersionedTransaction).message,
    );
    instructions = instructions.concat(txPayloadDecompiled.instructions);
    signers = signers.concat(txPayload.signers as Keypair[]);

    const txId = await sendTx(agent, instructions, signers);

    return JSON.stringify({
      transactionIds: txId,
      positionMint: positionMint.toString(),
    });
  } catch (error) {
    throw new Error(`${error}`);
  }
}


================================================
File: src/tools/pumpfun/index.ts
================================================
export * from "./launch_pumpfun_token";


================================================
File: src/tools/pumpfun/launch_pumpfun_token.ts
================================================
// src/tools/launch_pumpfun_token.ts
import { VersionedTransaction, Keypair } from "@solana/web3.js";
import {
  PumpfunLaunchResponse,
  PumpFunTokenOptions,
  SolanaAgentKit,
} from "../../index";

async function uploadMetadata(
  tokenName: string,
  tokenTicker: string,
  description: string,
  imageUrl: string,
  options?: PumpFunTokenOptions,
): Promise<any> {
  // Create metadata object
  const formData = new URLSearchParams();
  formData.append("name", tokenName);
  formData.append("symbol", tokenTicker);
  formData.append("description", description);

  formData.append("showName", "true");

  if (options?.twitter) {
    formData.append("twitter", options.twitter);
  }
  if (options?.telegram) {
    formData.append("telegram", options.telegram);
  }
  if (options?.website) {
    formData.append("website", options.website);
  }

  const imageResponse = await fetch(imageUrl);
  const imageBlob = await imageResponse.blob();
  const files = {
    file: new File([imageBlob], "token_image.png", { type: "image/png" }),
  };

  // Create form data with both metadata and file
  const finalFormData = new FormData();
  // Add all metadata fields
  for (const [key, value] of formData.entries()) {
    finalFormData.append(key, value);
  }
  // Add file if exists
  if (files?.file) {
    finalFormData.append("file", files.file);
  }

  const metadataResponse = await fetch("https://pump.fun/api/ipfs", {
    method: "POST",
    body: finalFormData,
  });

  if (!metadataResponse.ok) {
    throw new Error(`Metadata upload failed: ${metadataResponse.statusText}`);
  }

  return await metadataResponse.json();
}

async function createTokenTransaction(
  agent: SolanaAgentKit,
  mintKeypair: Keypair,
  metadataResponse: any,
  options?: PumpFunTokenOptions,
) {
  const payload = {
    publicKey: agent.wallet_address.toBase58(),
    action: "create",
    tokenMetadata: {
      name: metadataResponse.metadata.name,
      symbol: metadataResponse.metadata.symbol,
      uri: metadataResponse.metadataUri,
    },
    mint: mintKeypair.publicKey.toBase58(),
    denominatedInSol: "true", // API expects string "true"
    amount: options?.initialLiquiditySOL || 0.0001,
    slippage: options?.slippageBps || 5,
    priorityFee: options?.priorityFee || 0.00005,
    pool: "pump",
  };

  const response = await fetch("https://pumpportal.fun/api/trade-local", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(payload),
  });

  if (!response.ok) {
    const errorText = await response.text();
    throw new Error(
      `Transaction creation failed: ${response.status} - ${errorText}`,
    );
  }

  return response;
}

async function signAndSendTransaction(
  kit: SolanaAgentKit,
  tx: VersionedTransaction,
  mintKeypair: Keypair,
) {
  try {
    // Get the latest blockhash
    const { blockhash, lastValidBlockHeight } =
      await kit.connection.getLatestBlockhash();

    // Update transaction with latest blockhash
    tx.message.recentBlockhash = blockhash;

    // Sign the transaction
    tx.sign([mintKeypair, kit.wallet]);

    // Send and confirm transaction with options
    const signature = await kit.connection.sendTransaction(tx, {
      skipPreflight: false,
      preflightCommitment: "confirmed",
      maxRetries: 5,
    });

    // Wait for confirmation
    const confirmation = await kit.connection.confirmTransaction({
      signature,
      blockhash,
      lastValidBlockHeight,
    });

    if (confirmation.value.err) {
      throw new Error(`Transaction failed: ${confirmation.value.err}`);
    }

    return signature;
  } catch (error) {
    console.error("Transaction send error:", error);
    if (error instanceof Error && "logs" in error) {
      console.error("Transaction logs:", error.logs);
    }
    throw error;
  }
}

/**
 * Launch a token on Pump.fun
 * @param agent - SolanaAgentKit instance
 * @param tokenName - Name of the token
 * @param tokenTicker - Ticker of the token
 * @param description - Description of the token
 * @param imageUrl - URL of the token image
 * @param options - Optional token options (twitter, telegram, website, initialLiquiditySOL, slippageBps, priorityFee)
 * @returns - Signature of the transaction, mint address and metadata URI, if successful, else error
 */
export async function launchPumpFunToken(
  agent: SolanaAgentKit,
  tokenName: string,
  tokenTicker: string,
  description: string,
  imageUrl: string,
  options?: PumpFunTokenOptions,
): Promise<PumpfunLaunchResponse> {
  try {
    const mintKeypair = Keypair.generate();
    const metadataResponse = await uploadMetadata(
      tokenName,
      tokenTicker,
      description,
      imageUrl,
      options,
    );
    const response = await createTokenTransaction(
      agent,
      mintKeypair,
      metadataResponse,
      options,
    );
    const transactionData = await response.arrayBuffer();
    const tx = VersionedTransaction.deserialize(
      new Uint8Array(transactionData),
    );
    const signature = await signAndSendTransaction(agent, tx, mintKeypair);

    return {
      signature,
      mint: mintKeypair.publicKey.toBase58(),
      metadataUri: metadataResponse.metadataUri,
    };
  } catch (error) {
    console.error("Error in launchpumpfuntoken:", error);
    if (error instanceof Error && "logs" in error) {
      console.error("Transaction logs:", (error as any).logs);
    }
    throw error;
  }
}


================================================
File: src/tools/pyth/index.ts
================================================
export * from "./pyth_fetch_price";


================================================
File: src/tools/pyth/pyth_fetch_price.ts
================================================
import BN from "bn.js";
import { PythPriceFeedIDItem } from "../../types";

/**
 * Fetch the price feed ID for a given token symbol from Pyth
 * @param tokenSymbol Token symbol
 * @returns Price feed ID
 */
export async function fetchPythPriceFeedID(
  tokenSymbol: string,
): Promise<string> {
  try {
    const stableHermesServiceUrl: string = "https://hermes.pyth.network";

    const response = await fetch(
      `${stableHermesServiceUrl}/v2/price_feeds?query=${tokenSymbol}&asset_type=crypto`,
    );

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();

    if (data.length === 0) {
      throw new Error(`No price feed found for ${tokenSymbol}`);
    }

    if (data.length > 1) {
      const filteredData = data.filter(
        (item: PythPriceFeedIDItem) =>
          item.attributes.base.toLowerCase() === tokenSymbol.toLowerCase(),
      );

      if (filteredData.length === 0) {
        throw new Error(`No price feed found for ${tokenSymbol}`);
      }

      return filteredData[0].id;
    }

    return data[0].id;
  } catch (error: any) {
    throw new Error(
      `Fetching price feed ID from Pyth failed: ${error.message}`,
    );
  }
}

/**
 * Fetch the price of a given price feed from Pyth
 * @param priceFeedID Price feed ID
 * @returns Latest price value from feed
 *
 * You can find priceFeedIDs here: https://www.pyth.network/developers/price-feed-ids#stable
 */
export async function fetchPythPrice(feedID: string): Promise<string> {
  try {
    const stableHermesServiceUrl: string = "https://hermes.pyth.network";

    const response = await fetch(
      `${stableHermesServiceUrl}/v2/updates/price/latest?ids[]=${feedID}`,
    );

    const data = await response.json();

    const parsedData = data.parsed;

    if (parsedData.length === 0) {
      throw new Error(`No price data found for ${feedID}`);
    }

    const price = new BN(parsedData[0].price.price);
    const exponent = parsedData[0].price.expo;

    if (exponent < 0) {
      const adjustedPrice = price.mul(new BN(100));
      const divisor = new BN(10).pow(new BN(-exponent));
      const scaledPrice = adjustedPrice.div(divisor);

      const priceStr = scaledPrice.toString();
      const formattedPrice = `${priceStr.slice(0, -2)}.${priceStr.slice(-2)}`;
      return formattedPrice.startsWith(".")
        ? `0${formattedPrice}`
        : formattedPrice;
    }

    const scaledPrice = price.div(new BN(10).pow(new BN(exponent)));
    return scaledPrice.toString();
  } catch (error: any) {
    throw new Error(`Fetching price from Pyth failed: ${error.message}`);
  }
}


================================================
File: src/tools/raydium/index.ts
================================================
export * from "./raydium_create_ammV4";
export * from "./raydium_create_clmm";
export * from "./raydium_create_cpmm";


================================================
File: src/tools/raydium/raydium_create_ammV4.ts
================================================
import {
  AMM_V4,
  FEE_DESTINATION_ID,
  MARKET_STATE_LAYOUT_V3,
  OPEN_BOOK_PROGRAM,
  Raydium,
  TxVersion,
} from "@raydium-io/raydium-sdk-v2";
import { MintLayout, TOKEN_PROGRAM_ID } from "@solana/spl-token";
import { PublicKey } from "@solana/web3.js";
import BN from "bn.js";
import { SolanaAgentKit } from "../../index";

export async function raydiumCreateAmmV4(
  agent: SolanaAgentKit,
  marketId: PublicKey,
  baseAmount: BN,
  quoteAmount: BN,
  startTime: BN,
): Promise<string> {
  const raydium = await Raydium.load({
    owner: agent.wallet,
    connection: agent.connection,
  });

  const marketBufferInfo = await agent.connection.getAccountInfo(
    new PublicKey(marketId),
  );
  const { baseMint, quoteMint } = MARKET_STATE_LAYOUT_V3.decode(
    marketBufferInfo!.data,
  );

  const baseMintInfo = await agent.connection.getAccountInfo(baseMint);
  const quoteMintInfo = await agent.connection.getAccountInfo(quoteMint);

  if (
    baseMintInfo?.owner.toString() !== TOKEN_PROGRAM_ID.toBase58() ||
    quoteMintInfo?.owner.toString() !== TOKEN_PROGRAM_ID.toBase58()
  ) {
    throw new Error(
      "amm pools with openbook market only support TOKEN_PROGRAM_ID mints, if you want to create pool with token-2022, please create cpmm pool instead",
    );
  }

  if (
    baseAmount
      .mul(quoteAmount)
      .lte(
        new BN(1)
          .mul(new BN(10 ** MintLayout.decode(baseMintInfo.data).decimals))
          .pow(new BN(2)),
      )
  ) {
    throw new Error(
      "initial liquidity too low, try adding more baseAmount/quoteAmount",
    );
  }

  const { execute } = await raydium.liquidity.createPoolV4({
    programId: AMM_V4,
    marketInfo: {
      marketId,
      programId: OPEN_BOOK_PROGRAM,
    },
    baseMintInfo: {
      mint: baseMint,
      decimals: MintLayout.decode(baseMintInfo.data).decimals,
    },
    quoteMintInfo: {
      mint: quoteMint,
      decimals: MintLayout.decode(quoteMintInfo.data).decimals,
    },
    baseAmount,
    quoteAmount,

    startTime,
    ownerInfo: {
      useSOLBalance: true,
    },
    associatedOnly: false,
    txVersion: TxVersion.V0,
    feeDestinationId: FEE_DESTINATION_ID,
  });

  const { txId } = await execute({ sendAndConfirm: true });

  return txId;
}


================================================
File: src/tools/raydium/raydium_create_clmm.ts
================================================
import {
  CLMM_PROGRAM_ID,
  Raydium,
  TxVersion,
} from "@raydium-io/raydium-sdk-v2";
import { MintLayout } from "@solana/spl-token";
import { PublicKey } from "@solana/web3.js";
import BN from "bn.js";
import Decimal from "decimal.js";
import { SolanaAgentKit } from "../../index";

export async function raydiumCreateClmm(
  agent: SolanaAgentKit,
  mint1: PublicKey,
  mint2: PublicKey,
  configId: PublicKey,
  initialPrice: Decimal,
  startTime: BN,
): Promise<string> {
  const raydium = await Raydium.load({
    owner: agent.wallet,
    connection: agent.connection,
  });

  const [mintInfo1, mintInfo2] = await agent.connection.getMultipleAccountsInfo(
    [mint1, mint2],
  );
  if (mintInfo1 === null || mintInfo2 === null) {
    throw Error("fetch mint info error");
  }

  const mintDecodeInfo1 = MintLayout.decode(mintInfo1.data);
  const mintDecodeInfo2 = MintLayout.decode(mintInfo2.data);

  const mintFormatInfo1 = {
    chainId: 101,
    address: mint1.toString(),
    programId: mintInfo1.owner.toString(),
    logoURI: "",
    symbol: "",
    name: "",
    decimals: mintDecodeInfo1.decimals,
    tags: [],
    extensions: {},
  };
  const mintFormatInfo2 = {
    chainId: 101,
    address: mint2.toString(),
    programId: mintInfo2.owner.toString(),
    logoURI: "",
    symbol: "",
    name: "",
    decimals: mintDecodeInfo2.decimals,
    tags: [],
    extensions: {},
  };

  const { execute } = await raydium.clmm.createPool({
    programId: CLMM_PROGRAM_ID,
    // programId: DEVNET_PROGRAM_ID.CLMM,
    mint1: mintFormatInfo1,
    mint2: mintFormatInfo2,
    // @ts-expect-error sdk bug
    ammConfig: { id: configId },
    initialPrice,
    startTime,
    txVersion: TxVersion.V0,
    // computeBudgetConfig: {
    //   units: 600000,
    //   microLamports: 46591500,
    // },
  });

  const { txId } = await execute({ sendAndConfirm: true });

  return txId;
}


================================================
File: src/tools/raydium/raydium_create_cpmm.ts
================================================
import {
  CREATE_CPMM_POOL_FEE_ACC,
  CREATE_CPMM_POOL_PROGRAM,
  Raydium,
  TxVersion,
} from "@raydium-io/raydium-sdk-v2";
import { MintLayout } from "@solana/spl-token";
import { PublicKey } from "@solana/web3.js";
import BN from "bn.js";
import { SolanaAgentKit } from "../../index";

export async function raydiumCreateCpmm(
  agent: SolanaAgentKit,
  mintA: PublicKey,
  mintB: PublicKey,
  configId: PublicKey,
  mintAAmount: BN,
  mintBAmount: BN,
  startTime: BN,
): Promise<string> {
  const raydium = await Raydium.load({
    owner: agent.wallet,
    connection: agent.connection,
  });

  const [mintInfoA, mintInfoB] = await agent.connection.getMultipleAccountsInfo(
    [mintA, mintB],
  );
  if (mintInfoA === null || mintInfoB === null) {
    throw Error("fetch mint info error");
  }

  const mintDecodeInfoA = MintLayout.decode(mintInfoA.data);
  const mintDecodeInfoB = MintLayout.decode(mintInfoB.data);

  const mintFormatInfoA = {
    chainId: 101,
    address: mintA.toString(),
    programId: mintInfoA.owner.toString(),
    logoURI: "",
    symbol: "",
    name: "",
    decimals: mintDecodeInfoA.decimals,
    tags: [],
    extensions: {},
  };
  const mintFormatInfoB = {
    chainId: 101,
    address: mintB.toString(),
    programId: mintInfoB.owner.toString(),
    logoURI: "",
    symbol: "",
    name: "",
    decimals: mintDecodeInfoB.decimals,
    tags: [],
    extensions: {},
  };

  const { execute } = await raydium.cpmm.createPool({
    programId: CREATE_CPMM_POOL_PROGRAM,
    poolFeeAccount: CREATE_CPMM_POOL_FEE_ACC,
    mintA: mintFormatInfoA,
    mintB: mintFormatInfoB,
    mintAAmount,
    mintBAmount,
    startTime,
    //@ts-expect-error sdk bug
    feeConfig: { id: configId.toString() },
    associatedOnly: false,
    ownerInfo: {
      useSOLBalance: true,
    },
    txVersion: TxVersion.V0,
    // computeBudgetConfig: {
    //   units: 600000,
    //   microLamports: 46591500,
    // },
  });

  const { txId } = await execute({ sendAndConfirm: true });

  return txId;
}


================================================
File: src/tools/rugcheck/index.ts
================================================
export * from "./rugcheck";


================================================
File: src/tools/rugcheck/rugcheck.ts
================================================
import { TokenCheck } from "../../types";

const BASE_URL = "https://api.rugcheck.xyz/v1";

/**
 * Fetches a summary report for a specific token.
 * @async
 * @param {string} mint - The mint address of the token.
 * @returns {Promise<TokenCheck>} The token summary report.
 * @throws {Error} If the API call fails.
 */
export async function fetchTokenReportSummary(
  mint: string,
): Promise<TokenCheck> {
  try {
    const response = await fetch(`${BASE_URL}/tokens/${mint}/report/summary`);
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    return await response.json();
  } catch (error: any) {
    console.error(
      `Error fetching report summary for token ${mint}:`,
      error.message,
    );
    throw new Error(`Failed to fetch report summary for token ${mint}.`);
  }
}

/**
 * Fetches a detailed report for a specific token.
 * @async
 * @param {string} mint - The mint address of the token.
 * @returns {Promise<TokenCheck>} The detailed token report.
 * @throws {Error} If the API call fails.
 */
export async function fetchTokenDetailedReport(
  mint: string,
): Promise<TokenCheck> {
  try {
    const response = await fetch(`${BASE_URL}/tokens/${mint}/report`);
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    return await response.json();
  } catch (error: any) {
    console.error(
      `Error fetching detailed report for token ${mint}:`,
      error.message,
    );
    throw new Error(`Failed to fetch detailed report for token ${mint}.`);
  }
}


================================================
File: src/tools/sendarcade/index.ts
================================================
export * from "./rock_paper_scissor";


================================================
File: src/tools/sendarcade/rock_paper_scissor.ts
================================================
import { sendAndConfirmTransaction, Transaction } from "@solana/web3.js";
import { SolanaAgentKit } from "../../agent";

export async function rock_paper_scissor(
  agent: SolanaAgentKit,
  amount: number,
  choice: "rock" | "paper" | "scissors",
) {
  try {
    const res = await fetch(
      `https://rps.sendarcade.fun/api/actions/bot?amount=${amount}&choice=${choice}`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          account: agent.wallet.publicKey.toBase58(),
        }),
      },
    );

    const data = await res.json();
    if (data.transaction) {
      const txn = Transaction.from(Buffer.from(data.transaction, "base64"));
      txn.sign(agent.wallet);
      txn.recentBlockhash = (
        await agent.connection.getLatestBlockhash()
      ).blockhash;
      const sig = await sendAndConfirmTransaction(
        agent.connection,
        txn,
        [agent.wallet],
        { commitment: "confirmed" },
      );
      const href = data.links?.next?.href;
      return await outcome(agent, sig, href);
    } else {
      return "failed";
    }
  } catch (error: any) {
    console.error(error);
    throw new Error(`RPS game failed: ${error.message}`);
  }
}
async function outcome(
  agent: SolanaAgentKit,
  sig: string,
  href: string,
): Promise<string> {
  try {
    const res = await fetch(
      "https://rps.sendarcade.fun" + href, // href = /api/actions/outcome?id=...
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          account: agent.wallet.publicKey.toBase58(),
          signature: sig,
        }),
      },
    );

    const data: any = await res.json();
    const title = data.title;
    if (title.startsWith("You lost")) {
      return title;
    }
    const next_href = data.links?.actions?.[0]?.href;
    return title + "\n" + (await won(agent, next_href));
  } catch (error: any) {
    console.error(error);
    throw new Error(`RPS outcome failed: ${error.message}`);
  }
}
async function won(agent: SolanaAgentKit, href: string): Promise<string> {
  try {
    const res = await fetch(
      "https://rps.sendarcade.fun" + href, // href = /api/actions/won?id=...
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          account: agent.wallet.publicKey.toBase58(),
        }),
      },
    );

    const data: any = await res.json();
    if (data.transaction) {
      const txn = Transaction.from(Buffer.from(data.transaction, "base64"));
      txn.partialSign(agent.wallet);
      await agent.connection.sendRawTransaction(txn.serialize(), {
        preflightCommitment: "confirmed",
      });
    } else {
      return "Failed to claim prize.";
    }
    const next_href = data.links?.next?.href;
    return await postWin(agent, next_href);
  } catch (error: any) {
    console.error(error);
    throw new Error(`RPS outcome failed: ${error.message}`);
  }
}
async function postWin(agent: SolanaAgentKit, href: string): Promise<string> {
  try {
    const res = await fetch(
      "https://rps.sendarcade.fun" + href, // href = /api/actions/postwin?id=...
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          account: agent.wallet.publicKey.toBase58(),
        }),
      },
    );

    const data: any = await res.json();
    const title = data.title;
    return "Prize claimed Successfully" + "\n" + title;
  } catch (error: any) {
    console.error(error);
    throw new Error(`RPS outcome failed: ${error.message}`);
  }
}


================================================
File: src/tools/sns/get_all_registered_all_domains.ts
================================================
import { getAllDomains } from "@bonfida/spl-name-service";
import { SolanaAgentKit } from "../../agent";
import { PublicKey } from "@solana/web3.js";
import { getAllDomainsTLDs } from "../alldomains/get_all_domains_tlds";

/**
 * Get all registered domains across all TLDs
 * @param agent SolanaAgentKit instance
 * @returns Array of all registered domain names with their TLDs
 */
export async function getAllRegisteredAllDomains(
  agent: SolanaAgentKit,
): Promise<string[]> {
  try {
    // First get all TLDs
    const tlds = await getAllDomainsTLDs(agent);
    const allDomains: string[] = [];

    // For each TLD, fetch all registered domains
    for (const tld of tlds) {
      const domains = await getAllDomains(
        agent.connection,
        new PublicKey("namesLPneVptA9Z5rqUDD9tMTWEJwofgaYwp8cawRkX"),
      );

      // Add domains with TLD suffix
      domains.forEach((domain) => {
        allDomains.push(`${domain}.${tld}`);
      });
    }

    return allDomains;
  } catch (error: any) {
    throw new Error(`Failed to fetch all registered domains: ${error.message}`);
  }
}


================================================
File: src/tools/sns/get_main_all_domains_domain.ts
================================================
import { getFavoriteDomain as _getFavoriteDomain } from "@bonfida/spl-name-service";
import { PublicKey } from "@solana/web3.js";

/**
 * Get the user's main/favorite domain for a SolanaAgentKit instance
 * @param agent SolanaAgentKit instance
 * @param owner Owner's public key
 * @returns Promise resolving to the main domain name or null if not found
 */
export async function getMainAllDomainsDomain(
  agent: any,
  owner: PublicKey,
): Promise<string | null> {
  let mainDomain = null;
  try {
    mainDomain = await _getFavoriteDomain(agent.connection, owner);
    return mainDomain.stale ? null : mainDomain.reverse;
  } catch (error: any) {
    console.error(error);
    return null;
  }
}


================================================
File: src/tools/sns/get_primary_domain.ts
================================================
import { getPrimaryDomain as _getPrimaryDomain } from "@bonfida/spl-name-service";
import { PublicKey } from "@solana/web3.js";
import { SolanaAgentKit } from "../../agent";

/**
 * Retrieves the primary .sol domain associated with a given Solana public key.
 *
 * This function queries the Bonfida SPL Name Service to get the primary .sol domain for
 * a specified Solana public key. If the primary domain is stale or an error occurs during
 * the resolution, it throws an error.
 *
 * @param agent SolanaAgentKit instance
 * @param account The Solana public key for which to retrieve the primary domain
 * @returns A promise that resolves to the primary .sol domain as a string
 * @throws Error if the domain is stale or if the domain resolution fails
 */
export async function getPrimaryDomain(
  agent: SolanaAgentKit,
  account: PublicKey,
): Promise<string> {
  try {
    const { reverse, stale } = await _getPrimaryDomain(
      agent.connection,
      account,
    );
    if (stale) {
      throw new Error(
        `Primary domain is stale for account: ${account.toBase58()}`,
      );
    }
    return reverse;
  } catch (error: any) {
    console.error(error);
    throw new Error(
      `Failed to get primary domain for account: ${account.toBase58()}`,
    );
  }
}


================================================
File: src/tools/sns/index.ts
================================================
export * from "./get_all_registered_all_domains";
export * from "./get_main_all_domains_domain";
export * from "./get_primary_domain";
export * from "./register_domain";
export * from "./resolve_sol_domain";


================================================
File: src/tools/sns/register_domain.ts
================================================
import { registerDomainNameV2 } from "@bonfida/spl-name-service";
import { Transaction } from "@solana/web3.js";
import { SolanaAgentKit } from "../../agent";
import { getAssociatedTokenAddressSync } from "@solana/spl-token";
import { TOKENS } from "../../constants";

/**
 * Register a .sol domain name using Bonfida Name Service
 * @param agent SolanaAgentKit instance
 * @param name Domain name to register (without .sol)
 * @param spaceKB Space allocation in KB (max 10KB)
 * @returns Transaction signature
 */
export async function registerDomain(
  agent: SolanaAgentKit,
  name: string,
  spaceKB: number = 1,
): Promise<string> {
  try {
    // Validate space size
    if (spaceKB > 10) {
      throw new Error("Maximum domain size is 10KB");
    }

    // Convert KB to bytes
    const space = spaceKB * 1_000;

    const buyerTokenAccount = await getAssociatedTokenAddressSync(
      agent.wallet_address,
      TOKENS.USDC,
    );

    // Create registration instruction
    const instruction = await registerDomainNameV2(
      agent.connection,
      name,
      space,
      agent.wallet_address,
      buyerTokenAccount,
    );

    // Create and sign transaction
    const transaction = new Transaction().add(...instruction);
    transaction.recentBlockhash = (
      await agent.connection.getLatestBlockhash()
    ).blockhash;
    transaction.feePayer = agent.wallet_address;

    // Sign and send transaction
    const signature = await agent.connection.sendTransaction(transaction, [
      agent.wallet,
    ]);

    return signature;
  } catch (error: any) {
    throw new Error(`Domain registration failed: ${error.message}`);
  }
}


================================================
File: src/tools/sns/resolve_sol_domain.ts
================================================
import { resolve } from "@bonfida/spl-name-service";
import { PublicKey } from "@solana/web3.js";
import { SolanaAgentKit } from "../../index";

/**
 * Resolves a .sol domain to a Solana PublicKey.
 *
 * This function uses the Bonfida SPL Name Service to resolve a given .sol domain
 * to the corresponding Solana PublicKey. The domain can be provided with or without
 * the .sol suffix.
 *
 * @param agent SolanaAgentKit instance
 * @param domain The .sol domain to resolve. This can be provided with or without the .sol TLD suffix
 * @returns A promise that resolves to the corresponding Solana PublicKey
 * @throws Error if the domain resolution fails
 */
export async function resolveSolDomain(
  agent: SolanaAgentKit,
  domain: string,
): Promise<PublicKey> {
  if (!domain || typeof domain !== "string") {
    throw new Error("Invalid domain. Expected a non-empty string.");
  }

  try {
    return await resolve(agent.connection, domain);
  } catch (error: any) {
    console.error(error);
    throw new Error(`Failed to resolve domain: ${domain}`);
  }
}


================================================
File: src/tools/solana/close_empty_token_accounts.ts
================================================
import {
  PublicKey,
  Transaction,
  TransactionInstruction,
} from "@solana/web3.js";
import { SolanaAgentKit } from "../../agent";
import {
  AccountLayout,
  createCloseAccountInstruction,
  TOKEN_2022_PROGRAM_ID,
  TOKEN_PROGRAM_ID,
} from "@solana/spl-token";

/**
 * Close Empty SPL Token accounts of the agent
 * @param agent SolanaAgentKit instance
 * @returns transaction signature and total number of accounts closed
 */
export async function closeEmptyTokenAccounts(
  agent: SolanaAgentKit,
): Promise<{ signature: string; size: number }> {
  try {
    const spl_token = await create_close_instruction(agent, TOKEN_PROGRAM_ID);
    const token_2022 = await create_close_instruction(
      agent,
      TOKEN_2022_PROGRAM_ID,
    );
    const transaction = new Transaction();

    const MAX_INSTRUCTIONS = 40; // 40 instructions can be processed in a single transaction without failing

    spl_token
      .slice(0, Math.min(MAX_INSTRUCTIONS, spl_token.length))
      .forEach((instruction) => transaction.add(instruction));

    token_2022
      .slice(0, Math.max(0, MAX_INSTRUCTIONS - spl_token.length))
      .forEach((instruction) => transaction.add(instruction));

    const size = spl_token.length + token_2022.length;

    if (size === 0) {
      return {
        signature: "",
        size: 0,
      };
    }

    const signature = await agent.connection.sendTransaction(transaction, [
      agent.wallet,
    ]);

    return { signature, size };
  } catch (error) {
    throw new Error(`Error closing empty token accounts: ${error}`);
  }
}

/**
 * creates the close instuctions of a spl token account
 * @param agnet SolanaAgentKit instance
 * @param token_program Token Program Id
 * @returns close instuction array
 */

async function create_close_instruction(
  agent: SolanaAgentKit,
  token_program: PublicKey,
): Promise<TransactionInstruction[]> {
  const instructions = [];

  const ata_accounts = await agent.connection.getTokenAccountsByOwner(
    agent.wallet_address,
    { programId: token_program },
    "confirmed",
  );

  const tokens = ata_accounts.value;

  const accountExceptions = [
    "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v", // USDC
  ];

  for (let i = 0; i < tokens.length; i++) {
    const token_data = AccountLayout.decode(tokens[i].account.data);
    if (
      token_data.amount === BigInt(0) &&
      !accountExceptions.includes(token_data.mint.toString())
    ) {
      const closeInstruction = createCloseAccountInstruction(
        ata_accounts.value[i].pubkey,
        agent.wallet_address,
        agent.wallet_address,
        [],
        token_program,
      );

      instructions.push(closeInstruction);
    }
  }

  return instructions;
}


================================================
File: src/tools/solana/get_balance.ts
================================================
import { LAMPORTS_PER_SOL, PublicKey } from "@solana/web3.js";
import { SolanaAgentKit } from "../../index";

/**
 * Get the balance of SOL or an SPL token for the agent's wallet
 * @param agent - SolanaAgentKit instance
 * @param token_address - Optional SPL token mint address. If not provided, returns SOL balance
 * @returns Promise resolving to the balance as a number (in UI units) or null if account doesn't exist
 */
export async function get_balance(
  agent: SolanaAgentKit,
  token_address?: PublicKey,
): Promise<number> {
  if (!token_address) {
    return (
      (await agent.connection.getBalance(agent.wallet_address)) /
      LAMPORTS_PER_SOL
    );
  }

  const token_account =
    await agent.connection.getTokenAccountBalance(token_address);
  return token_account.value.uiAmount || 0;
}


================================================
File: src/tools/solana/get_balance_other.ts
================================================
import {
  LAMPORTS_PER_SOL,
  ParsedAccountData,
  PublicKey,
} from "@solana/web3.js";
import { SolanaAgentKit } from "../../index";

/**
 * Get the balance of SOL or an SPL token for the specified wallet address (other than the agent's wallet)
 * @param agent - SolanaAgentKit instance
 * @param wallet_address - Public key of the wallet to check balance for
 * @param token_address - Optional SPL token mint address. If not provided, returns SOL balance
 * @returns Promise resolving to the balance as a number (in UI units) or 0 if account doesn't exist
 */
export async function get_balance_other(
  agent: SolanaAgentKit,
  wallet_address: PublicKey,
  token_address?: PublicKey,
): Promise<number> {
  try {
    if (!token_address) {
      return (
        (await agent.connection.getBalance(wallet_address)) / LAMPORTS_PER_SOL
      );
    }

    const tokenAccounts = await agent.connection.getTokenAccountsByOwner(
      wallet_address,
      { mint: token_address },
    );

    if (tokenAccounts.value.length === 0) {
      console.warn(
        `No token accounts found for wallet ${wallet_address.toString()} and token ${token_address.toString()}`,
      );
      return 0;
    }

    const tokenAccount = await agent.connection.getParsedAccountInfo(
      tokenAccounts.value[0].pubkey,
    );
    const tokenData = tokenAccount.value?.data as ParsedAccountData;

    return tokenData.parsed?.info?.tokenAmount?.uiAmount || 0;
  } catch (error) {
    throw new Error(
      `Error fetching on-chain balance for ${token_address?.toString()}: ${error}`,
    );
  }
}


================================================
File: src/tools/solana/get_token_balances.ts
================================================
import { LAMPORTS_PER_SOL, type PublicKey } from "@solana/web3.js";
import type { SolanaAgentKit } from "../../index";
import { TOKEN_PROGRAM_ID } from "@solana/spl-token";
import { getTokenMetadata } from "../../utils/tokenMetadata";

/**
 * Get the token balances of a Solana wallet
 * @param agent - SolanaAgentKit instance
 * @param token_address - Optional SPL token mint address. If not provided, returns SOL balance
 * @returns Promise resolving to the balance as an object containing sol balance and token balances with their respective mints, symbols, names and decimals
 */
export async function get_token_balance(
  agent: SolanaAgentKit,
  walletAddress?: PublicKey,
): Promise<{
  sol: number;
  tokens: Array<{
    tokenAddress: string;
    name: string;
    symbol: string;
    balance: number;
    decimals: number;
  }>;
}> {
  const [lamportsBalance, tokenAccountData] = await Promise.all([
    agent.connection.getBalance(walletAddress ?? agent.wallet_address),
    agent.connection.getParsedTokenAccountsByOwner(
      walletAddress ?? agent.wallet_address,
      {
        programId: TOKEN_PROGRAM_ID,
      },
    ),
  ]);

  const removedZeroBalance = tokenAccountData.value.filter(
    (v) => v.account.data.parsed.info.tokenAmount.uiAmount !== 0,
  );

  const tokenBalances = await Promise.all(
    removedZeroBalance.map(async (v) => {
      const mint = v.account.data.parsed.info.mint;
      const mintInfo = await getTokenMetadata(agent.connection, mint);
      return {
        tokenAddress: mint,
        name: mintInfo.name ?? "",
        symbol: mintInfo.symbol ?? "",
        balance: v.account.data.parsed.info.tokenAmount.uiAmount as number,
        decimals: v.account.data.parsed.info.tokenAmount.decimals as number,
      };
    }),
  );

  const solBalance = lamportsBalance / LAMPORTS_PER_SOL;

  return {
    sol: solBalance,
    tokens: tokenBalances,
  };
}


================================================
File: src/tools/solana/get_tps.ts
================================================
import { SolanaAgentKit } from "../../index";

export async function getTPS(agent: SolanaAgentKit): Promise<number> {
  const perfSamples = await agent.connection.getRecentPerformanceSamples();

  if (
    !perfSamples.length ||
    !perfSamples[0]?.numTransactions ||
    !perfSamples[0]?.samplePeriodSecs
  ) {
    throw new Error("No performance samples available");
  }

  const tps = perfSamples[0].numTransactions / perfSamples[0].samplePeriodSecs;

  return tps;
}


================================================
File: src/tools/solana/index.ts
================================================
export * from "./get_tps";
export * from "./request_faucet_funds";
export * from "./close_empty_token_accounts";
export * from "./transfer";
export * from "./get_balance";
export * from "./get_balance_other";
export * from "./get_token_balances";


================================================
File: src/tools/solana/request_faucet_funds.ts
================================================
import { SolanaAgentKit } from "../../index";
import { LAMPORTS_PER_SOL } from "@solana/web3.js";

/**
 * Request SOL from the Solana faucet (devnet/testnet only)
 * @param agent - SolanaAgentKit instance
 * @returns Transaction signature
 * @throws Error if the request fails or times out
 */
export async function request_faucet_funds(
  agent: SolanaAgentKit,
): Promise<string> {
  const tx = await agent.connection.requestAirdrop(
    agent.wallet_address,
    5 * LAMPORTS_PER_SOL,
  );

  const latestBlockHash = await agent.connection.getLatestBlockhash();

  await agent.connection.confirmTransaction({
    signature: tx,
    blockhash: latestBlockHash.blockhash,
    lastValidBlockHeight: latestBlockHash.lastValidBlockHeight,
  });

  return tx;
}


================================================
File: src/tools/solana/transfer.ts
================================================
import { SolanaAgentKit } from "../../index";
import { PublicKey, SystemProgram, Transaction } from "@solana/web3.js";
import { LAMPORTS_PER_SOL } from "@solana/web3.js";
import {
  getAssociatedTokenAddress,
  createTransferInstruction,
  getMint,
} from "@solana/spl-token";

/**
 * Transfer SOL or SPL tokens to a recipient
 * @param agent SolanaAgentKit instance
 * @param to Recipient's public key
 * @param amount Amount to transfer
 * @param mint Optional mint address for SPL tokens
 * @returns Transaction signature
 */
export async function transfer(
  agent: SolanaAgentKit,
  to: PublicKey,
  amount: number,
  mint?: PublicKey,
): Promise<string> {
  try {
    let tx: string;

    if (!mint) {
      // Transfer native SOL
      const transaction = new Transaction().add(
        SystemProgram.transfer({
          fromPubkey: agent.wallet_address,
          toPubkey: to,
          lamports: amount * LAMPORTS_PER_SOL,
        }),
      );

      tx = await agent.connection.sendTransaction(transaction, [agent.wallet]);
    } else {
      // Transfer SPL token
      const fromAta = await getAssociatedTokenAddress(
        mint,
        agent.wallet_address,
      );
      const toAta = await getAssociatedTokenAddress(mint, to);

      // Get mint info to determine decimals
      const mintInfo = await getMint(agent.connection, mint);
      const adjustedAmount = amount * Math.pow(10, mintInfo.decimals);

      const transaction = new Transaction().add(
        createTransferInstruction(
          fromAta,
          toAta,
          agent.wallet_address,
          adjustedAmount,
        ),
      );

      tx = await agent.connection.sendTransaction(transaction, [agent.wallet]);
    }

    return tx;
  } catch (error: any) {
    throw new Error(`Transfer failed: ${error.message}`);
  }
}


================================================
File: src/tools/solayer/index.ts
================================================
export * from "./stake_with_solayer";


================================================
File: src/tools/solayer/stake_with_solayer.ts
================================================
import { VersionedTransaction } from "@solana/web3.js";
import { SolanaAgentKit } from "../../index";

/**
 * Stake SOL with Solayer
 * @param agent SolanaAgentKit instance
 * @param amount Amount of SOL to stake
 * @returns Transaction signature
 */
export async function stakeWithSolayer(
  agent: SolanaAgentKit,
  amount: number,
): Promise<string> {
  try {
    const response = await fetch(
      `https://app.solayer.org/api/action/restake/ssol?amount=${amount}`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          account: agent.wallet.publicKey.toBase58(),
        }),
      },
    );

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || "Staking request failed");
    }

    const data = await response.json();

    // Deserialize and prepare transaction
    const txn = VersionedTransaction.deserialize(
      Buffer.from(data.transaction, "base64"),
    );

    // Update blockhash
    const { blockhash } = await agent.connection.getLatestBlockhash();
    txn.message.recentBlockhash = blockhash;

    // Sign and send transaction
    txn.sign([agent.wallet]);
    const signature = await agent.connection.sendTransaction(txn, {
      preflightCommitment: "confirmed",
      maxRetries: 3,
    });

    // Wait for confirmation
    const latestBlockhash = await agent.connection.getLatestBlockhash();
    await agent.connection.confirmTransaction({
      signature,
      blockhash: latestBlockhash.blockhash,
      lastValidBlockHeight: latestBlockhash.lastValidBlockHeight,
    });

    return signature;
  } catch (error: any) {
    console.error(error);
    throw new Error(`Solayer sSOL staking failed: ${error.message}`);
  }
}


================================================
File: src/tools/squads/approve_proposal.ts
================================================
import { SolanaAgentKit } from "../../index";
import * as multisig from "@sqds/multisig";
const { Multisig } = multisig.accounts;

/**
 * Approves a proposal in a Solana multisig wallet.
 *
 * @param {SolanaAgentKit} agent - The Solana agent kit instance.
 * @param {number | bigint} [transactionIndex] - The index of the transaction to approve. If not provided, the current transaction index will be used.
 * @returns {Promise<string>} - A promise that resolves to the transaction ID of the approved proposal.
 * @throws {Error} - Throws an error if the approval process fails.
 */
export async function multisig_approve_proposal(
  agent: SolanaAgentKit,
  transactionIndex?: number | bigint,
): Promise<string> {
  try {
    const createKey = agent.wallet;
    const [multisigPda] = multisig.getMultisigPda({
      createKey: createKey.publicKey,
    });
    const multisigInfo = await Multisig.fromAccountAddress(
      agent.connection,
      multisigPda,
    );
    const currentTransactionIndex = Number(multisigInfo.transactionIndex);
    if (!transactionIndex) {
      transactionIndex = BigInt(currentTransactionIndex);
    } else if (typeof transactionIndex !== "bigint") {
      transactionIndex = BigInt(transactionIndex);
    }
    // const [proposalPda, proposalBump] = multisig.getProposalPda({
    //   multisigPda,
    //   transactionIndex,
    // });
    const multisigTx = multisig.transactions.proposalApprove({
      blockhash: (await agent.connection.getLatestBlockhash()).blockhash,
      feePayer: agent.wallet.publicKey,
      multisigPda,
      transactionIndex: transactionIndex,
      member: agent.wallet.publicKey,
    });

    multisigTx.sign([agent.wallet]);
    const tx = await agent.connection.sendRawTransaction(
      multisigTx.serialize(),
    );
    return tx;
  } catch (error: any) {
    throw new Error(`Transfer failed: ${error}`);
  }
}


================================================
File: src/tools/squads/create_multisig.ts
================================================
import * as multisig from "@sqds/multisig";
import { PublicKey } from "@solana/web3.js";
import { SolanaAgentKit } from "../../index";

/**
 * Creates a new Squads multisig account.
 *
 * @param agent - The SolanaAgentKit instance containing the connection and wallet information.
 * @param creator - The public key of the creator who will be a member of the multisig.
 * @returns A promise that resolves to the transaction ID of the multisig creation transaction.
 *
 * @throws Will throw an error if the transaction fails.
 */
export async function create_squads_multisig(
  agent: SolanaAgentKit,
  creator: PublicKey,
): Promise<string> {
  const connection = agent.connection;
  const createKey = agent.wallet; // can be any keypair, using the agent wallet as only one multisig is required

  const [multisigPda] = multisig.getMultisigPda({
    createKey: createKey.publicKey,
  });

  const programConfigPda = multisig.getProgramConfigPda({})[0];

  const programConfig =
    await multisig.accounts.ProgramConfig.fromAccountAddress(
      connection,
      programConfigPda,
    );

  const configTreasury = programConfig.treasury;
  const tx = multisig.transactions.multisigCreateV2({
    blockhash: (await connection.getLatestBlockhash()).blockhash,
    treasury: configTreasury,
    createKey: createKey.publicKey,
    creator: agent.wallet.publicKey,
    multisigPda,
    configAuthority: null,
    timeLock: 0,
    threshold: 2,
    rentCollector: null,
    members: [
      {
        key: agent.wallet.publicKey,
        permissions: multisig.types.Permissions.all(),
      },
      {
        key: creator,
        permissions: multisig.types.Permissions.all(),
      },
    ],
  });

  tx.sign([agent.wallet, createKey]);

  const txId = connection.sendRawTransaction(tx.serialize());

  return txId;
}


================================================
File: src/tools/squads/create_proposal.ts
================================================
import { SolanaAgentKit } from "../../index";
import * as multisig from "@sqds/multisig";
const { Multisig } = multisig.accounts;

/**
 * Creates a proposal for a multisig transaction.
 *
 * @param {SolanaAgentKit} agent - The Solana agent kit instance.
 * @param {number | bigint} [transactionIndex] - Optional transaction index. If not provided, the current transaction index will be used.
 * @returns {Promise<string>} - The transaction ID of the created proposal.
 * @throws {Error} - Throws an error if the proposal creation fails.
 */
export async function multisig_create_proposal(
  agent: SolanaAgentKit,
  transactionIndex?: number | bigint,
): Promise<string> {
  try {
    const createKey = agent.wallet;
    const [multisigPda] = multisig.getMultisigPda({
      createKey: createKey.publicKey,
    });
    const multisigInfo = await Multisig.fromAccountAddress(
      agent.connection,
      multisigPda,
    );
    const currentTransactionIndex = Number(multisigInfo.transactionIndex);
    if (!transactionIndex) {
      transactionIndex = BigInt(currentTransactionIndex);
    } else if (typeof transactionIndex !== "bigint") {
      transactionIndex = BigInt(transactionIndex);
    }
    const multisigTx = multisig.transactions.proposalCreate({
      blockhash: (await agent.connection.getLatestBlockhash()).blockhash,
      feePayer: agent.wallet_address,
      multisigPda,
      transactionIndex,
      creator: agent.wallet_address,
    });

    multisigTx.sign([agent.wallet]);
    const tx = await agent.connection.sendRawTransaction(
      multisigTx.serialize(),
    );
    return tx;
  } catch (error: any) {
    throw new Error(`Transfer failed: ${error}`);
  }
}


================================================
File: src/tools/squads/deposit_to_treasury.ts
================================================
import { SolanaAgentKit } from "../../index";
import { PublicKey, SystemProgram, Transaction } from "@solana/web3.js";
import { LAMPORTS_PER_SOL } from "@solana/web3.js";
import {
  getAssociatedTokenAddress,
  createTransferInstruction,
  getMint,
  createAssociatedTokenAccountInstruction,
} from "@solana/spl-token";
import * as multisig from "@sqds/multisig";

/**
 * Transfer SOL or SPL tokens to a multisig vault.
 * @param agent SolanaAgentKit instance
 * @param amount Amount to transfer
 * @param vaultIndex Optional vault index, default is 0
 * @param mint Optional mint address for SPL tokens
 * @returns Transaction signature
 */
export async function multisig_deposit_to_treasury(
  agent: SolanaAgentKit,
  amount: number,
  vaultIndex?: number,
  mint?: PublicKey,
): Promise<string> {
  try {
    let tx: string;
    if (!vaultIndex) {
      vaultIndex = 0;
    }
    const createKey = agent.wallet;
    const [multisigPda] = multisig.getMultisigPda({
      createKey: createKey.publicKey,
    });
    const [vaultPda] = multisig.getVaultPda({
      multisigPda,
      index: vaultIndex,
    });
    const to = vaultPda;
    if (!mint) {
      // Transfer native SOL
      const transaction = new Transaction().add(
        SystemProgram.transfer({
          fromPubkey: agent.wallet_address,
          toPubkey: to,
          lamports: amount * LAMPORTS_PER_SOL,
        }),
      );

      tx = await agent.connection.sendTransaction(transaction, [agent.wallet]);
    } else {
      // Transfer SPL token
      const fromAta = await getAssociatedTokenAddress(
        mint,
        agent.wallet_address,
      );
      const transaction = new Transaction();
      const toAta = await getAssociatedTokenAddress(mint, to, true);
      const toTokenAccountInfo = await agent.connection.getAccountInfo(toAta);
      // Create associated token account if it doesn't exist
      if (!toTokenAccountInfo) {
        transaction.add(
          createAssociatedTokenAccountInstruction(
            agent.wallet_address,
            toAta,
            to,
            mint,
          ),
        );
      }
      // Get mint info to determine decimals
      const mintInfo = await getMint(agent.connection, mint);
      const adjustedAmount = amount * Math.pow(10, mintInfo.decimals);

      transaction.add(
        createTransferInstruction(
          fromAta,
          toAta,
          agent.wallet_address,
          adjustedAmount,
        ),
      );

      tx = await agent.connection.sendTransaction(transaction, [agent.wallet]);
    }

    return tx;
  } catch (error: any) {
    throw new Error(`Transfer failed: ${error}`);
  }
}


================================================
File: src/tools/squads/execute_proposal.ts
================================================
import { SolanaAgentKit } from "../../index";
import * as multisig from "@sqds/multisig";
const { Multisig } = multisig.accounts;

/**
 * Executes a transaction on the Solana blockchain using the provided agent.
 *
 * @param {SolanaAgentKit} agent - The Solana agent kit instance containing the wallet and connection.
 * @param {number | bigint} [transactionIndex] - Optional transaction index to execute. If not provided, the current transaction index from the multisig account will be used.
 * @returns {Promise<string>} - A promise that resolves to the transaction signature string.
 * @throws {Error} - Throws an error if the transaction execution fails.
 */
export async function multisig_execute_proposal(
  agent: SolanaAgentKit,
  transactionIndex?: number | bigint,
): Promise<string> {
  try {
    const createKey = agent.wallet;
    const [multisigPda] = multisig.getMultisigPda({
      createKey: createKey.publicKey,
    });
    const multisigInfo = await Multisig.fromAccountAddress(
      agent.connection,
      multisigPda,
    );
    const currentTransactionIndex = Number(multisigInfo.transactionIndex);
    if (!transactionIndex) {
      transactionIndex = BigInt(currentTransactionIndex);
    } else if (typeof transactionIndex !== "bigint") {
      transactionIndex = BigInt(transactionIndex);
    }
    const multisigTx = await multisig.transactions.vaultTransactionExecute({
      connection: agent.connection,
      blockhash: (await agent.connection.getLatestBlockhash()).blockhash,
      feePayer: agent.wallet.publicKey,
      multisigPda,
      transactionIndex,
      member: agent.wallet.publicKey,
    });

    multisigTx.sign([agent.wallet]);
    const tx = await agent.connection.sendRawTransaction(
      multisigTx.serialize(),
    );
    return tx;
  } catch (error: any) {
    throw new Error(`Transfer failed: ${error}`);
  }
}


================================================
File: src/tools/squads/index.ts
================================================
export * from "./create_multisig";
export * from "./create_proposal";
export * from "./approve_proposal";
export * from "./deposit_to_treasury";
export * from "./execute_proposal";
export * from "./reject_proposal";
export * from "./transfer_from_treasury";


================================================
File: src/tools/squads/reject_proposal.ts
================================================
import { SolanaAgentKit } from "../../index";
import * as multisig from "@sqds/multisig";
const { Multisig } = multisig.accounts;

/**
 * Rejects a proposal in a Solana multisig setup.
 *
 * @param agent - The SolanaAgentKit instance containing the wallet and connection.
 * @param transactionIndex - Optional. The index of the transaction to reject. If not provided, the current transaction index will be used.
 * @returns A promise that resolves to the transaction ID of the rejection transaction.
 * @throws Will throw an error if the transaction fails.
 */
export async function multisig_reject_proposal(
  agent: SolanaAgentKit,
  transactionIndex?: number | bigint,
): Promise<string> {
  try {
    const createKey = agent.wallet;
    const [multisigPda] = multisig.getMultisigPda({
      createKey: createKey.publicKey,
    });
    const multisigInfo = await Multisig.fromAccountAddress(
      agent.connection,
      multisigPda,
    );
    const currentTransactionIndex = Number(multisigInfo.transactionIndex);
    if (!transactionIndex) {
      transactionIndex = BigInt(currentTransactionIndex);
    } else if (typeof transactionIndex !== "bigint") {
      transactionIndex = BigInt(transactionIndex);
    }
    // const [proposalPda, proposalBump] = multisig.getProposalPda({
    //   multisigPda,
    //   transactionIndex,
    // });
    const multisigTx = multisig.transactions.proposalReject({
      blockhash: (await agent.connection.getLatestBlockhash()).blockhash,
      feePayer: agent.wallet.publicKey,
      multisigPda,
      transactionIndex: transactionIndex,
      member: agent.wallet.publicKey,
    });

    multisigTx.sign([agent.wallet]);
    const tx = await agent.connection.sendRawTransaction(
      multisigTx.serialize(),
    );
    return tx;
  } catch (error: any) {
    throw new Error(`Transfer failed: ${error}`);
  }
}


================================================
File: src/tools/squads/transfer_from_treasury.ts
================================================
import { SolanaAgentKit } from "../../index";
import {
  PublicKey,
  SystemProgram,
  TransactionInstruction,
  TransactionMessage,
} from "@solana/web3.js";
import { LAMPORTS_PER_SOL } from "@solana/web3.js";
import {
  getAssociatedTokenAddress,
  createTransferInstruction,
  getMint,
} from "@solana/spl-token";
import * as multisig from "@sqds/multisig";
const { Multisig } = multisig.accounts;

/**
 * Transfer SOL or SPL tokens to a recipient from a multisig vault.
 * @param agent - SolanaAgentKit instance.
 * @param amount - Amount to transfer.
 * @param to - Recipient's public key.
 * @param vaultIndex - Optional vault index, default is 0.
 * @param mint - Optional mint address for SPL tokens.
 * @returns Transaction signature.
 */
export async function multisig_transfer_from_treasury(
  agent: SolanaAgentKit,
  amount: number,
  to: PublicKey,
  vaultIndex: number = 0,
  mint?: PublicKey,
): Promise<string> {
  try {
    let transferInstruction: TransactionInstruction;

    const createKey = agent.wallet;
    const [multisigPda] = multisig.getMultisigPda({
      createKey: createKey.publicKey,
    });
    const multisigInfo = await Multisig.fromAccountAddress(
      agent.connection,
      multisigPda,
    );
    const currentTransactionIndex = Number(multisigInfo.transactionIndex);
    const transactionIndex = BigInt(currentTransactionIndex + 1);
    const [vaultPda] = multisig.getVaultPda({
      multisigPda,
      index: vaultIndex,
    });

    if (!mint) {
      // Transfer native SOL
      transferInstruction = SystemProgram.transfer({
        fromPubkey: agent.wallet_address,
        toPubkey: to,
        lamports: amount * LAMPORTS_PER_SOL,
      });
    } else {
      // Transfer SPL token
      const fromAta = await getAssociatedTokenAddress(mint, vaultPda, true);
      const toAta = await getAssociatedTokenAddress(mint, to, true);
      const mintInfo = await getMint(agent.connection, mint);
      const adjustedAmount = amount * Math.pow(10, mintInfo.decimals);

      transferInstruction = createTransferInstruction(
        fromAta,
        toAta,
        agent.wallet_address,
        adjustedAmount,
      );
    }

    const transferMessage = new TransactionMessage({
      payerKey: vaultPda,
      recentBlockhash: (await agent.connection.getLatestBlockhash()).blockhash,
      instructions: [transferInstruction],
    });

    const multisigTx = multisig.transactions.vaultTransactionCreate({
      blockhash: (await agent.connection.getLatestBlockhash()).blockhash,
      feePayer: agent.wallet_address,
      multisigPda,
      transactionIndex,
      creator: agent.wallet_address,
      vaultIndex: 0,
      ephemeralSigners: 0,
      transactionMessage: transferMessage,
    });

    multisigTx.sign([agent.wallet]);
    const tx = await agent.connection.sendRawTransaction(
      multisigTx.serialize(),
    );
    return tx;
  } catch (error: any) {
    throw new Error(`Transfer failed: ${error}`);
  }
}


================================================
File: src/tools/tensor/index.ts
================================================
export * from "./tensor_trade";


================================================
File: src/tools/tensor/tensor_trade.ts
================================================
import { SolanaAgentKit } from "../../index";
import { TensorSwapSDK } from "@tensor-oss/tensorswap-sdk";
import { PublicKey, Transaction } from "@solana/web3.js";
import { AnchorProvider, Wallet } from "@coral-xyz/anchor";
import { BN } from "bn.js";
import {
  getAssociatedTokenAddress,
  TOKEN_PROGRAM_ID,
  getAccount,
} from "@solana/spl-token";

export async function listNFTForSale(
  agent: SolanaAgentKit,
  nftMint: PublicKey,
  price: number,
): Promise<string> {
  try {
    if (!PublicKey.isOnCurve(nftMint)) {
      throw new Error("Invalid NFT mint address");
    }

    const mintInfo = await agent.connection.getAccountInfo(nftMint);
    if (!mintInfo) {
      throw new Error(`NFT mint ${nftMint.toString()} does not exist`);
    }

    const ata = await getAssociatedTokenAddress(nftMint, agent.wallet_address);

    try {
      const tokenAccount = await getAccount(agent.connection, ata);

      if (!tokenAccount || tokenAccount.amount <= 0) {
        throw new Error(`You don't own this NFT (${nftMint.toString()})`);
      }
    } catch (error: any) {
      console.error(error);
      throw new Error(
        `No token account found for mint ${nftMint.toString()}. Make sure you own this NFT.`,
      );
    }

    const provider = new AnchorProvider(
      agent.connection,
      new Wallet(agent.wallet),
      AnchorProvider.defaultOptions(),
    );

    const tensorSwapSdk = new TensorSwapSDK({ provider });
    const priceInLamports = new BN(price * 1e9);
    const nftSource = await getAssociatedTokenAddress(
      nftMint,
      agent.wallet_address,
    );

    const { tx } = await tensorSwapSdk.list({
      nftMint,
      nftSource,
      owner: agent.wallet_address,
      price: priceInLamports,
      tokenProgram: TOKEN_PROGRAM_ID,
      payer: agent.wallet_address,
    });

    const transaction = new Transaction();
    transaction.add(...tx.ixs);
    return await agent.connection.sendTransaction(transaction, [
      agent.wallet,
      ...tx.extraSigners,
    ]);
  } catch (error: any) {
    console.error("Full error details:", error);
    throw error;
  }
}

export async function cancelListing(
  agent: SolanaAgentKit,
  nftMint: PublicKey,
): Promise<string> {
  const provider = new AnchorProvider(
    agent.connection,
    new Wallet(agent.wallet),
    AnchorProvider.defaultOptions(),
  );

  const tensorSwapSdk = new TensorSwapSDK({ provider });
  const nftDest = await getAssociatedTokenAddress(
    nftMint,
    agent.wallet_address,
    false,
    TOKEN_PROGRAM_ID,
  );

  const { tx } = await tensorSwapSdk.delist({
    nftMint,
    nftDest,
    owner: agent.wallet_address,
    tokenProgram: TOKEN_PROGRAM_ID,
    payer: agent.wallet_address,
    authData: null,
  });

  const transaction = new Transaction();
  transaction.add(...tx.ixs);
  return await agent.connection.sendTransaction(transaction, [
    agent.wallet,
    ...tx.extraSigners,
  ]);
}


================================================
File: src/tools/tiplink/create_tiplinks.ts
================================================
import { TipLink } from "@tiplink/api";
import {
  Transaction,
  SystemProgram,
  LAMPORTS_PER_SOL,
  sendAndConfirmTransaction,
  PublicKey,
  ComputeBudgetProgram,
} from "@solana/web3.js";
import {
  getAssociatedTokenAddress,
  createTransferInstruction,
  getMint,
  createAssociatedTokenAccountInstruction,
} from "@solana/spl-token";
import { SolanaAgentKit } from "../../index";

const MINIMUM_SOL_BALANCE = 0.003 * LAMPORTS_PER_SOL;

export async function create_TipLink(
  agent: SolanaAgentKit,
  amount: number,
  splmintAddress?: PublicKey,
): Promise<{ url: string; signature: string }> {
  try {
    const tiplink = await TipLink.create();

    if (!splmintAddress) {
      const transaction = new Transaction();
      transaction.add(
        SystemProgram.transfer({
          fromPubkey: agent.wallet_address,
          toPubkey: tiplink.keypair.publicKey,
          lamports: amount * LAMPORTS_PER_SOL,
        }),
      );

      const signature = await sendAndConfirmTransaction(
        agent.connection,
        transaction,
        [agent.wallet],
        { commitment: "confirmed" },
      );

      return {
        url: tiplink.url.toString(),
        signature,
      };
    } else {
      const fromAta = await getAssociatedTokenAddress(
        splmintAddress,
        agent.wallet_address,
      );
      const toAta = await getAssociatedTokenAddress(
        splmintAddress,
        tiplink.keypair.publicKey,
      );

      const mintInfo = await getMint(agent.connection, splmintAddress);
      const adjustedAmount = amount * Math.pow(10, mintInfo.decimals);

      const transaction = new Transaction();

      transaction.add(
        ComputeBudgetProgram.setComputeUnitPrice({
          microLamports: 5000,
        }),
      );

      transaction.add(
        SystemProgram.transfer({
          fromPubkey: agent.wallet_address,
          toPubkey: tiplink.keypair.publicKey,
          lamports: MINIMUM_SOL_BALANCE,
        }),
      );

      transaction.add(
        createAssociatedTokenAccountInstruction(
          agent.wallet_address,
          toAta,
          tiplink.keypair.publicKey,
          splmintAddress,
        ),
      );

      transaction.add(
        createTransferInstruction(
          fromAta,
          toAta,
          agent.wallet_address,
          adjustedAmount,
        ),
      );

      const signature = await sendAndConfirmTransaction(
        agent.connection,
        transaction,
        [agent.wallet],
        { commitment: "confirmed" },
      );

      return {
        url: tiplink.url.toString(),
        signature,
      };
    }
  } catch (error: any) {
    console.error("Error creating TipLink or sending funds:", error.message);
    throw new Error(`Failed to create TipLink: ${error.message}`);
  }
}


================================================
File: src/tools/tiplink/index.ts
================================================
export * from "./create_tiplinks";


================================================
File: src/tools/voltr/index.ts
================================================
export * from "./voltr_deposit_strategy";
export * from "./voltr_withdraw_strategy";
export * from "./voltr_get_position_values";


================================================
File: src/tools/voltr/voltr_deposit_strategy.ts
================================================
import { TOKEN_PROGRAM_ID, TOKEN_2022_PROGRAM_ID } from "@solana/spl-token";
import { SolanaAgentKit } from "../../agent";
import {
  PublicKey,
  sendAndConfirmTransaction,
  Transaction,
} from "@solana/web3.js";
import { VoltrClient } from "@voltr/vault-sdk";
import BN from "bn.js";

/**
 * Deposits assets into a Voltr strategy
 * @param agent SolanaAgentKit instance
 * @param depositAmount Amount to deposit in base units (BN)
 * @param vault Public key of the target vault
 * @param strategy Public key of the target strategy
 * @returns Transaction signature for the deposit
 */
export async function voltrDepositStrategy(
  agent: SolanaAgentKit,
  depositAmount: BN,
  vault: PublicKey,
  strategy: PublicKey,
): Promise<string> {
  const vc = new VoltrClient(agent.connection, agent.wallet);
  const vaultAccount = await vc.fetchVaultAccount(vault);
  const vaultAssetMint = vaultAccount.asset.mint;
  const assetTokenProgram = await agent.connection
    .getAccountInfo(new PublicKey(vaultAssetMint))
    .then((account) => account?.owner);

  if (
    !assetTokenProgram ||
    !(
      assetTokenProgram.equals(TOKEN_PROGRAM_ID) ||
      assetTokenProgram.equals(TOKEN_2022_PROGRAM_ID)
    )
  ) {
    throw new Error("Invalid asset token program");
  }

  const response = await fetch(
    `https://voltr.xyz/api/remaining-accounts/deposit-strategy?vault=${vault.toBase58()}&strategy=${strategy.toBase58()}`,
    {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
      },
    },
  );

  const data = (await response.json()).data as {
    instructionDiscriminator: number[] | null;
    additionalArgs: number[] | null;
    remainingAccounts:
      | {
          pubkey: string;
          isSigner: boolean;
          isWritable: boolean;
        }[]
      | null;
  };

  const additionalArgs = data.additionalArgs
    ? Buffer.from(data.additionalArgs)
    : null;
  const instructionDiscriminator = data.instructionDiscriminator
    ? Buffer.from(data.instructionDiscriminator)
    : null;
  const remainingAccounts =
    data.remainingAccounts?.map((account) => ({
      pubkey: new PublicKey(account.pubkey),
      isSigner: account.isSigner,
      isWritable: account.isWritable,
    })) ?? [];

  const depositIx = await vc.createDepositStrategyIx(
    {
      depositAmount,
      additionalArgs,
      instructionDiscriminator,
    },
    {
      vault,
      vaultAssetMint,
      strategy: strategy,
      assetTokenProgram,
      remainingAccounts,
    },
  );

  const transaction = new Transaction();
  transaction.add(depositIx);

  const txSig = await sendAndConfirmTransaction(agent.connection, transaction, [
    agent.wallet,
  ]);
  return txSig;
}


================================================
File: src/tools/voltr/voltr_get_position_values.ts
================================================
import { SolanaAgentKit } from "../../agent";
import { PublicKey } from "@solana/web3.js";
import { VoltrClient } from "@voltr/vault-sdk";

/**
 * Gets the value of assets in a Voltr vault
 * @param agent SolanaAgentKit instance
 * @param vault Public key of the target vault
 * @returns Position and total values for the vault
 */
export async function voltrGetPositionValues(
  agent: SolanaAgentKit,
  vault: PublicKey,
): Promise<string> {
  const vc = new VoltrClient(agent.connection, agent.wallet);
  const positionAndTotalValues =
    await vc.getPositionAndTotalValuesForVault(vault);

  return JSON.stringify(positionAndTotalValues);
}


================================================
File: src/tools/voltr/voltr_withdraw_strategy.ts
================================================
import { SolanaAgentKit } from "../../agent";
import {
  PublicKey,
  sendAndConfirmTransaction,
  Transaction,
} from "@solana/web3.js";
import BN from "bn.js";
import { TOKEN_2022_PROGRAM_ID, TOKEN_PROGRAM_ID } from "@solana/spl-token";
import { VoltrClient } from "@voltr/vault-sdk";

/**
 * Withdraws assets from a Voltr strategy
 * @param agent SolanaAgentKit instance
 * @param withdrawAmount Amount to withdraw in base units (BN)
 * @param vault Public key of the target vault
 * @param strategy Public key of the target strategy
 * @returns Transaction signature for the deposit
 */
export async function voltrWithdrawStrategy(
  agent: SolanaAgentKit,
  withdrawAmount: BN,
  vault: PublicKey,
  strategy: PublicKey,
): Promise<string> {
  const vc = new VoltrClient(agent.connection, agent.wallet);
  const vaultAccount = await vc.fetchVaultAccount(vault);
  const vaultAssetMint = vaultAccount.asset.mint;
  const assetTokenProgram = await agent.connection
    .getAccountInfo(new PublicKey(vaultAssetMint))
    .then((account) => account?.owner);

  if (
    !assetTokenProgram ||
    !(
      assetTokenProgram.equals(TOKEN_PROGRAM_ID) ||
      assetTokenProgram.equals(TOKEN_2022_PROGRAM_ID)
    )
  ) {
    throw new Error("Invalid asset token program");
  }

  const response = await fetch(
    `https://voltr.xyz/api/remaining-accounts/deposit-strategy?vault=${vault.toBase58()}&strategy=${strategy.toBase58()}`,
    {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
      },
    },
  );

  const data = (await response.json()).data as {
    instructionDiscriminator: number[] | null;
    additionalArgs: number[] | null;
    remainingAccounts:
      | {
          pubkey: string;
          isSigner: boolean;
          isWritable: boolean;
        }[]
      | null;
  };

  const additionalArgs = data.additionalArgs
    ? Buffer.from(data.additionalArgs)
    : null;
  const instructionDiscriminator = data.instructionDiscriminator
    ? Buffer.from(data.instructionDiscriminator)
    : null;
  const remainingAccounts =
    data.remainingAccounts?.map((account) => ({
      pubkey: new PublicKey(account.pubkey),
      isSigner: account.isSigner,
      isWritable: account.isWritable,
    })) ?? [];

  const withdrawIx = await vc.createWithdrawStrategyIx(
    {
      withdrawAmount,
      additionalArgs,
      instructionDiscriminator,
    },
    {
      vault,
      vaultAssetMint,
      strategy,
      assetTokenProgram,
      remainingAccounts,
    },
  );

  const transaction = new Transaction();
  transaction.add(withdrawIx);

  const txSig = await sendAndConfirmTransaction(agent.connection, transaction, [
    agent.wallet,
  ]);
  return txSig;
}


================================================
File: src/types/action.ts
================================================
import { SolanaAgentKit } from "../agent";
import { z } from "zod";

/**
 * Example of an action with input and output
 */
export interface ActionExample {
  input: Record<string, any>;
  output: Record<string, any>;
  explanation: string;
}

/**
 * Handler function type for executing the action
 */
export type Handler = (
  agent: SolanaAgentKit,
  input: Record<string, any>,
) => Promise<Record<string, any>>;

/**
 * Main Action interface inspired by ELIZA
 * This interface makes it easier to implement actions across different frameworks
 */
export interface Action {
  /**
   * Unique name of the action
   */
  name: string;

  /**
   * Alternative names/phrases that can trigger this action
   */
  similes: string[];

  /**
   * Detailed description of what the action does
   */
  description: string;

  /**
   * Array of example inputs and outputs for the action
   * Each inner array represents a group of related examples
   */
  examples: ActionExample[][];

  /**
   * Zod schema for input validation
   */
  schema: z.ZodType<any>;

  /**
   * Function that executes the action
   */
  handler: Handler;
}


================================================
File: src/types/index.ts
================================================
import { PublicKey } from "@solana/web3.js";
import { SolanaAgentKit } from "../agent";
import { z } from "zod";
import { AlloraInference, AlloraTopic } from "@alloralabs/allora-sdk";

export interface Config {
  OPENAI_API_KEY?: string;
  PERPLEXITY_API_KEY?: string;
  JUPITER_REFERRAL_ACCOUNT?: string;
  JUPITER_FEE_BPS?: number;
  FLASH_PRIVILEGE?: string;
  FLEXLEND_API_KEY?: string;
  HELIUS_API_KEY?: string;
  PRIORITY_LEVEL?: string; // medium, high, or veryHigh
  ALLORA_API_KEY?: string;
  ALLORA_API_URL?: string;
  ALLORA_NETWORK?: string;
}

export interface Creator {
  address: string;
  percentage: number;
}

export interface CollectionOptions {
  name: string;
  uri: string;
  royaltyBasisPoints?: number;
  creators?: Creator[];
}

// Add return type interface
export interface CollectionDeployment {
  collectionAddress: PublicKey;
  signature: Uint8Array;
}

export interface MintCollectionNFTResponse {
  mint: PublicKey;
  metadata: PublicKey;
}

export interface PumpFunTokenOptions {
  twitter?: string;
  telegram?: string;
  website?: string;
  initialLiquiditySOL?: number;
  slippageBps?: number;
  priorityFee?: number;
}

export interface PumpfunLaunchResponse {
  signature: string;
  mint: string;
  metadataUri?: string;
  error?: string;
}

/**
 * Lulo Account Details response format
 */
export interface LuloAccountDetailsResponse {
  totalValue: number;
  interestEarned: number;
  realtimeApy: number;
  settings: {
    owner: string;
    allowedProtocols: string | null;
    homebase: string | null;
    minimumRate: string;
  };
}

export interface JupiterTokenData {
  address: string;
  name: string;
  symbol: string;
  decimals: number;
  tags: string[];
  logoURI: string;
  daily_volume: number;
  freeze_authority: string | null;
  mint_authority: string | null;
  permanent_delegate: string | null;
  extensions: {
    coingeckoId?: string;
  };
}

export interface FetchPriceResponse {
  status: "success" | "error";
  tokenId?: string;
  priceInUSDC?: string;
  message?: string;
  code?: string;
}

export interface PythFetchPriceResponse {
  status: "success" | "error";
  tokenSymbol: string;
  priceFeedID?: string;
  price?: string;
  message?: string;
  code?: string;
}

export interface GibworkCreateTaskReponse {
  status: "success" | "error";
  taskId?: string | undefined;
  signature?: string | undefined;
}

/**
 * Example of an action with input and output
 */
export interface ActionExample {
  input: Record<string, any>;
  output: Record<string, any>;
  explanation: string;
}

/**
 * Handler function type for executing the action
 */
export type Handler = (
  agent: SolanaAgentKit,
  input: Record<string, any>,
) => Promise<Record<string, any>>;

/**
 * Main Action interface inspired by ELIZA
 * This interface makes it easier to implement actions across different frameworks
 */
export interface Action {
  /**
   * Unique name of the action
   */
  name: string;

  /**
   * Alternative names/phrases that can trigger this action
   */
  similes: string[];

  /**
   * Detailed description of what the action does
   */
  description: string;

  /**
   * Array of example inputs and outputs for the action
   * Each inner array represents a group of related examples
   */
  examples: ActionExample[][];

  /**
   * Zod schema for input validation
   */
  schema: z.ZodType<any>;

  /**
   * Function that executes the action
   */
  handler: Handler;
}

export interface TokenCheck {
  tokenProgram: string;
  tokenType: string;
  risks: Array<{
    name: string;
    level: string;
    description: string;
    score: number;
  }>;
  score: number;
}

export interface PythPriceFeedIDItem {
  id: string;
  attributes: {
    asset_type: string;
    base: string;
  };
}

export interface PythPriceItem {
  binary: {
    data: string[];
    encoding: string;
  };
  parsed: [
    Array<{
      id: string;
      price: {
        price: string;
        conf: string;
        expo: number;
        publish_time: number;
      };
      ema_price: {
        price: string;
        conf: string;
        expo: number;
        publish_time: number;
      };
      metadata: {
        slot: number;
        proof_available_time: number;
        prev_publish_time: number;
      };
    }>,
  ];
}

export interface OrderParams {
  quantity: number;
  side: string;
  price: number;
}

export interface BatchOrderPattern {
  side: string;
  totalQuantity?: number;
  priceRange?: {
    min?: number;
    max?: number;
  };
  spacing?: {
    type: "percentage" | "fixed";
    value: number;
  };
  numberOfOrders?: number;
  individualQuantity?: number;
}

export interface FlashTradeParams {
  token: string;
  side: "long" | "short";
  collateralUsd: number;
  leverage: number;
}

export interface FlashCloseTradeParams {
  token: string;
  side: "long" | "short";
}

export interface HeliusWebhookResponse {
  webhookURL: string;
  webhookID: string;
}
export interface HeliusWebhookIdResponse {
  wallet: string;
  webhookURL: string;
  transactionTypes: string[];
  accountAddresses: string[];
  webhookType: string;
}

export interface PriorityFeeResponse {
  jsonrpc: string;
  id: string;
  method: string;
  params: Array<{
    transaction: string;
    options: { priorityLevel: string };
  }>;
}

export interface AlloraPriceInferenceResponse {
  status: "success" | "error";
  tokenSymbol?: string;
  timeframe?: string;
  priceInference?: string;
  message?: string;
  code?: string;
}

export interface AlloraGetAllTopicsResponse {
  status: "success" | "error";
  topics?: AlloraTopic[];
  message?: string;
  code?: string;
}

export interface AlloraGetInferenceByTopicIdResponse {
  status: "success" | "error";
  topicId?: number;
  inference?: AlloraInference;
  message?: string;
  code?: string;
}


================================================
File: src/utils/AdrenaClient.ts
================================================
import { Connection, PublicKey } from "@solana/web3.js";
import { SolanaAgentKit } from "../index";
import { AnchorProvider, IdlAccounts, Program } from "@coral-xyz/anchor";
import { Adrena, IDL as ADRENA_IDL } from "../idls/adrena";

import NodeWallet from "@coral-xyz/anchor/dist/cjs/nodewallet";
import {
  ASSOCIATED_TOKEN_PROGRAM_ID,
  createAssociatedTokenAccountInstruction,
  TOKEN_PROGRAM_ID,
} from "@solana/spl-token";
import { TOKENS } from "../constants";

export type AdrenaProgram = Program<Adrena>;

type Accounts = IdlAccounts<Adrena>;

export type Cortex = Accounts["cortex"];
export type Custody = Accounts["custody"] & { pubkey: PublicKey };
export type Pool = Accounts["pool"];

export default class AdrenaClient {
  public static programId = new PublicKey(
    "13gDzEXCdocbj8iAiqrScGo47NiSuYENGsRqi3SEAwet",
  );

  constructor(
    public program: AdrenaProgram,
    public mainPool: Pool,
    public cortex: Cortex,
    public custodies: Custody[],
  ) {}

  public static mainPool = new PublicKey(
    "4bQRutgDJs6vuh6ZcWaPVXiQaBzbHketjbCDjL4oRN34",
  );

  public static async load(agent: SolanaAgentKit): Promise<AdrenaClient> {
    const program = new Program<Adrena>(
      ADRENA_IDL,
      AdrenaClient.programId,
      new AnchorProvider(agent.connection, new NodeWallet(agent.wallet), {
        commitment: "processed",
        skipPreflight: true,
      }),
    );

    const [cortex, mainPool] = await Promise.all([
      program.account.cortex.fetch(AdrenaClient.cortex),
      program.account.pool.fetch(AdrenaClient.mainPool),
    ]);

    const custodiesAddresses = mainPool.custodies.filter(
      (custody) => !custody.equals(PublicKey.default),
    );

    const custodies =
      await program.account.custody.fetchMultiple(custodiesAddresses);

    if (!custodies.length || custodies.some((c) => c === null)) {
      throw new Error("Custodies not found");
    }

    return new AdrenaClient(
      program,
      mainPool,
      cortex,
      (custodies as Custody[]).map((c, i) => ({
        ...c,
        pubkey: custodiesAddresses[i],
      })),
    );
  }

  public static findCustodyAddress(mint: PublicKey): PublicKey {
    return PublicKey.findProgramAddressSync(
      [
        Buffer.from("custody"),
        AdrenaClient.mainPool.toBuffer(),
        mint.toBuffer(),
      ],
      AdrenaClient.programId,
    )[0];
  }

  public static findCustodyTokenAccountAddress(mint: PublicKey) {
    return PublicKey.findProgramAddressSync(
      [
        Buffer.from("custody_token_account"),
        AdrenaClient.mainPool.toBuffer(),
        mint.toBuffer(),
      ],
      AdrenaClient.programId,
    )[0];
  }

  public static findPositionAddress(
    owner: PublicKey,
    custody: PublicKey,
    side: "long" | "short",
  ) {
    return PublicKey.findProgramAddressSync(
      [
        Buffer.from("position"),
        owner.toBuffer(),
        AdrenaClient.mainPool.toBuffer(),
        custody.toBuffer(),
        Buffer.from([
          {
            long: 1,
            short: 2,
          }[side],
        ]),
      ],
      AdrenaClient.programId,
    )[0];
  }

  public static cortex = PublicKey.findProgramAddressSync(
    [Buffer.from("cortex")],
    AdrenaClient.programId,
  )[0];

  public static lpTokenMint = PublicKey.findProgramAddressSync(
    [Buffer.from("lp_token_mint"), AdrenaClient.mainPool.toBuffer()],
    AdrenaClient.programId,
  )[0];

  public static lmTokenMint = PublicKey.findProgramAddressSync(
    [Buffer.from("lm_token_mint")],
    AdrenaClient.programId,
  )[0];

  public static getStakingPda(stakedTokenMint: PublicKey) {
    return PublicKey.findProgramAddressSync(
      [Buffer.from("staking"), stakedTokenMint.toBuffer()],
      AdrenaClient.programId,
    )[0];
  }

  public static lmStaking = AdrenaClient.getStakingPda(
    AdrenaClient.lmTokenMint,
  );

  public static lpStaking = AdrenaClient.getStakingPda(
    AdrenaClient.lpTokenMint,
  );

  public static transferAuthority = PublicKey.findProgramAddressSync(
    [Buffer.from("transfer_authority")],
    AdrenaClient.programId,
  )[0];

  public static findATAAddressSync(
    wallet: PublicKey,
    mint: PublicKey,
  ): PublicKey {
    return PublicKey.findProgramAddressSync(
      [wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],
      ASSOCIATED_TOKEN_PROGRAM_ID,
    )[0];
  }

  public getCustodyByMint(mint: PublicKey): Custody {
    const custody = this.custodies.find((custody) => custody.mint.equals(mint));

    if (!custody) {
      throw new Error(`Cannot find custody for mint ${mint.toBase58()}`);
    }

    return custody;
  }

  public static getUserProfilePda(wallet: PublicKey) {
    return PublicKey.findProgramAddressSync(
      [Buffer.from("user_profile"), wallet.toBuffer()],
      AdrenaClient.programId,
    )[0];
  }

  public static stakingRewardTokenMint = TOKENS.USDC;

  public static getStakingRewardTokenVaultPda(stakingPda: PublicKey) {
    return PublicKey.findProgramAddressSync(
      [Buffer.from("staking_reward_token_vault"), stakingPda.toBuffer()],
      AdrenaClient.programId,
    )[0];
  }

  public static lmStakingRewardTokenVault =
    AdrenaClient.getStakingRewardTokenVaultPda(AdrenaClient.lmStaking);
  public static lpStakingRewardTokenVault =
    AdrenaClient.getStakingRewardTokenVaultPda(AdrenaClient.lpStaking);

  public static async isAccountInitialized(
    connection: Connection,
    address: PublicKey,
  ): Promise<boolean> {
    return !!(await connection.getAccountInfo(address));
  }

  public static createATAInstruction({
    ataAddress,
    mint,
    owner,
    payer = owner,
  }: {
    ataAddress: PublicKey;
    mint: PublicKey;
    owner: PublicKey;
    payer?: PublicKey;
  }) {
    return createAssociatedTokenAccountInstruction(
      payer,
      ataAddress,
      owner,
      mint,
    );
  }
}


================================================
File: src/utils/actionExecutor.ts
================================================
import { Action } from "../types/action";
import { SolanaAgentKit } from "../agent";
import { ACTIONS } from "../actions";

/**
 * Find an action by its name or one of its similes
 */
export function findAction(query: string): Action | undefined {
  const normalizedQuery = query.toLowerCase().trim();
  return Object.values(ACTIONS).find(
    (action) =>
      action.name.toLowerCase() === normalizedQuery ||
      action.similes.some((simile) => simile.toLowerCase() === normalizedQuery),
  );
}

/**
 * Execute an action with the given input
 */
export async function executeAction(
  action: Action,
  agent: SolanaAgentKit,
  input: Record<string, any>,
): Promise<Record<string, any>> {
  try {
    // Validate input using Zod schema
    const validatedInput = action.schema.parse(input);

    // Execute the action with validated input
    const result = await action.handler(agent, validatedInput);

    return {
      status: "success",
      ...result,
    };
  } catch (error: any) {
    // Handle Zod validation errors specially
    if (error.errors) {
      return {
        status: "error",
        message: "Validation error",
        details: error.errors,
        code: "VALIDATION_ERROR",
      };
    }

    return {
      status: "error",
      message: error.message,
      code: error.code || "EXECUTION_ERROR",
    };
  }
}

/**
 * Get examples for an action
 */
export function getActionExamples(action: Action): string {
  return action.examples
    .flat()
    .map((example) => {
      return `Input: ${JSON.stringify(example.input, null, 2)}
Output: ${JSON.stringify(example.output, null, 2)}
Explanation: ${example.explanation}
---`;
    })
    .join("\n");
}


================================================
File: src/utils/flashUtils.ts
================================================
import { HermesClient } from "@pythnetwork/hermes-client";
import { OraclePrice } from "flash-sdk";
import { AnchorProvider, BN, Wallet } from "@coral-xyz/anchor";
import {
  PoolConfig,
  Token,
  Referral,
  PerpetualsClient,
  Privilege,
} from "flash-sdk";
import { Cluster, PublicKey, Connection, Keypair } from "@solana/web3.js";
import { getAssociatedTokenAddressSync } from "@solana/spl-token";
import { SolanaAgentKit } from "../index";

const POOL_NAMES = [
  "Crypto.1",
  "Virtual.1",
  "Governance.1",
  "Community.1",
  "Community.2",
  "Community.3",
];

const DEFAULT_CLUSTER: Cluster = "mainnet-beta";
export const POOL_CONFIGS = POOL_NAMES.map((f) =>
  PoolConfig.fromIdsByName(f, DEFAULT_CLUSTER),
);

const DUPLICATE_TOKENS = POOL_CONFIGS.map((f) => f.tokens).flat();
const tokenMap = new Map();
for (const token of DUPLICATE_TOKENS) {
  tokenMap.set(token.symbol, token);
}
export const ALL_TOKENS: Token[] = Array.from(tokenMap.values());
export const ALL_CUSTODIES = POOL_CONFIGS.map((f) => f.custodies).flat();
const PROGRAM_ID = POOL_CONFIGS[0].programId;

// CU for trade instructions
export const OPEN_POSITION_CU = 150_000;
export const CLOSE_POSITION_CU = 180_000;

const HERMES_URL = "https://hermes.pyth.network"; // Replace with the actual Hermes URL if different

// Create a map of symbol to Pyth price ID
const PRICE_FEED_IDS = ALL_TOKENS.reduce(
  (acc, token) => {
    acc[token.symbol] = token.pythPriceId;
    return acc;
  },
  {} as { [key: string]: string },
);

const hermesClient = new HermesClient(HERMES_URL, {});

export interface PythPriceEntry {
  price: OraclePrice;
  emaPrice: OraclePrice;
  isStale: boolean;
  status: PriceStatus;
}

export enum PriceStatus {
  Trading,
  Unknown,
  Halted,
  Auction,
}

export const fetchOraclePrice = async (
  symbol: string,
): Promise<PythPriceEntry> => {
  const priceFeedId = PRICE_FEED_IDS[symbol];
  if (!priceFeedId) {
    throw new Error(`Price feed ID not found for symbol: ${symbol}`);
  }

  try {
    const hermesPriceFeed = await hermesClient.getPriceFeeds({
      query: symbol,
      filter: "crypto",
    });

    if (!hermesPriceFeed || hermesPriceFeed.length === 0) {
      throw new Error(`No price feed received for ${symbol}`);
    }

    const hemrmesPriceUdpate = await hermesClient.getLatestPriceUpdates(
      [priceFeedId],
      {
        encoding: "hex",
        parsed: true,
      },
    );

    if (!hemrmesPriceUdpate.parsed) {
      throw new Error(`No price feed received for ${symbol}`);
    }
    const hermesEma = hemrmesPriceUdpate.parsed[0].ema_price;
    const hermesPrice = hemrmesPriceUdpate.parsed[0].price;

    const hermesPriceOracle = new OraclePrice({
      price: new BN(hermesPrice.price),
      exponent: new BN(hermesPrice.expo),
      confidence: new BN(hermesPrice.conf),
      timestamp: new BN(hermesPrice.publish_time),
    });

    const hermesEmaOracle = new OraclePrice({
      price: new BN(hermesEma.price),
      exponent: new BN(hermesEma.expo),
      confidence: new BN(hermesEma.conf),
      timestamp: new BN(hermesEma.publish_time),
    });

    const token = ALL_TOKENS.find((t) => t.pythPriceId === priceFeedId);
    if (!token) {
      throw new Error(`Token not found for price feed ID: ${priceFeedId}`);
    }

    const status = !token.isVirtual ? PriceStatus.Trading : PriceStatus.Unknown;

    const pythPriceEntry: PythPriceEntry = {
      price: hermesPriceOracle,
      emaPrice: hermesEmaOracle,
      isStale: false,
      status: status,
    };

    return pythPriceEntry;
  } catch (error) {
    console.error(`Error in fetchOraclePrice for ${symbol}:`, error);
    throw error;
  }
};

export interface MarketInfo {
  [key: string]: {
    tokenPair: string;
    token: string;
    side: string;
    pool: string;
  };
}

const marketSdkInfo: MarketInfo = {};

// Loop through POOL_CONFIGS to process each market
POOL_CONFIGS.forEach((poolConfig) => {
  poolConfig.markets.forEach((market) => {
    const targetToken = ALL_TOKENS.find(
      (token) => token.mintKey.toString() === market.targetMint.toString(),
    );

    // Find collateral token by matching mintKey
    const collateralToken = ALL_TOKENS.find(
      (token) => token.mintKey.toString() === market.collateralMint.toString(),
    );

    if (targetToken?.symbol && collateralToken?.symbol) {
      marketSdkInfo[market.marketAccount.toString()] = {
        tokenPair: `${targetToken.symbol}/${collateralToken.symbol}`,
        token: targetToken.symbol,
        side: Object.keys(market.side)[0],
        pool: poolConfig.poolName,
      };
    }
  });
});

export { marketSdkInfo };

export interface MarketTokenSides {
  [token: string]: {
    long?: { marketID: string };
    short?: { marketID: string };
  };
}

const marketTokenMap: MarketTokenSides = {};

// Convert marketSdkInfo into marketTokenMap
Object.entries(marketSdkInfo).forEach(([marketID, info]) => {
  if (!marketTokenMap[info.token]) {
    marketTokenMap[info.token] = {};
  }

  marketTokenMap[info.token][info.side.toLowerCase() as "long" | "short"] = {
    marketID,
  };
});

export { marketTokenMap };

interface TradingAccountResult {
  nftReferralAccountPK: PublicKey | null;
  nftTradingAccountPk: PublicKey | null;
  nftOwnerRebateTokenAccountPk: PublicKey | null;
}

export async function getNftTradingAccountInfo(
  userPublicKey: PublicKey,
  perpClient: PerpetualsClient,
  poolConfig: PoolConfig,
  collateralCustodySymbol: string,
): Promise<TradingAccountResult> {
  const getNFTReferralAccountPK = (publicKey: PublicKey) => {
    return PublicKey.findProgramAddressSync(
      [Buffer.from("referral"), publicKey.toBuffer()],
      PROGRAM_ID,
    )[0];
  };
  const nftReferralAccountPK = getNFTReferralAccountPK(userPublicKey);
  const nftReferralAccountInfo =
    await perpClient.provider.connection.getAccountInfo(nftReferralAccountPK);

  let nftTradingAccountPk: PublicKey | null = null;
  let nftOwnerRebateTokenAccountPk: PublicKey | null = null;

  if (nftReferralAccountInfo) {
    const nftReferralAccountData = perpClient.program.coder.accounts.decode(
      "referral",
      nftReferralAccountInfo.data,
    ) as Referral;

    nftTradingAccountPk = nftReferralAccountData.refererTradingAccount;

    if (nftTradingAccountPk) {
      const nftTradingAccountInfo =
        await perpClient.provider.connection.getAccountInfo(
          nftTradingAccountPk,
        );
      if (nftTradingAccountInfo) {
        const nftTradingAccount = perpClient.program.coder.accounts.decode(
          "trading",
          nftTradingAccountInfo.data,
        ) as { owner: PublicKey };

        nftOwnerRebateTokenAccountPk = getAssociatedTokenAddressSync(
          poolConfig.getTokenFromSymbol(collateralCustodySymbol).mintKey,
          nftTradingAccount.owner,
        );
        // Check if the account exists
        const accountExists =
          await perpClient.provider.connection.getAccountInfo(
            nftOwnerRebateTokenAccountPk,
          );
        if (!accountExists) {
          console.error(
            "NFT owner rebate token account does not exist and may need to be created",
          );
        }
      }
    }
  }

  return {
    nftReferralAccountPK,
    nftTradingAccountPk,
    nftOwnerRebateTokenAccountPk,
  };
}

/**
 * Creates a new PerpetualsClient instance with the given connection and wallet
 * @param connection Solana connection
 * @param wallet Solana wallet
 * @returns PerpetualsClient instance
 */
export function createPerpClient(
  connection: Connection,
  wallet: Keypair,
): PerpetualsClient {
  const provider = new AnchorProvider(connection, new Wallet(wallet), {
    commitment: "confirmed",
    preflightCommitment: "confirmed",
    skipPreflight: true,
  });

  return new PerpetualsClient(
    provider,
    POOL_CONFIGS[0].programId,
    POOL_CONFIGS[0].perpComposibilityProgramId,
    POOL_CONFIGS[0].fbNftRewardProgramId,
    POOL_CONFIGS[0].rewardDistributionProgram.programId,
    {},
  );
}

export function get_flash_privilege(agent: SolanaAgentKit): Privilege {
  const FLASH_PRIVILEGE = agent.config.FLASH_PRIVILEGE || "None";

  switch (FLASH_PRIVILEGE.toLowerCase()) {
    case "referral":
      return Privilege.Referral;
    case "nft":
      return Privilege.NFT;
    default:
      return Privilege.None;
  }
}


================================================
File: src/utils/keypair.ts
================================================
import {
  Keypair,
  PublicKey,
  Transaction,
  VersionedTransaction,
} from "@solana/web3.js";

export const keypair = Keypair.generate();

export class Wallet {
  private _signer: Keypair;

  constructor(signer: Keypair) {
    this._signer = signer;
  }

  async signTransaction<T extends Transaction | VersionedTransaction>(
    tx: T,
  ): Promise<T> {
    if (tx instanceof Transaction) {
      tx.sign(this._signer);
    } else if (tx instanceof VersionedTransaction) {
      tx.sign([this._signer]);
    } else {
      throw new Error("Unsupported transaction type");
    }
    return tx;
  }

  async signAllTransactions<T extends Transaction | VersionedTransaction>(
    txs: T[],
  ): Promise<T[]> {
    return Promise.all(txs.map((tx) => this.signTransaction(tx)));
  }

  get publicKey(): PublicKey {
    return this._signer.publicKey;
  }
}


================================================
File: src/utils/send_tx.ts
================================================
import { SolanaAgentKit } from "../agent";
import {
  Keypair,
  Signer,
  TransactionInstruction,
  TransactionMessage,
  VersionedTransaction,
  Transaction,
} from "@solana/web3.js";
import { ComputeBudgetProgram } from "@solana/web3.js";
import bs58 from "bs58";
import { PriorityFeeResponse } from "../types/index";

const feeTiers = {
  min: 0.01,
  mid: 0.5,
  max: 0.95,
};

/**
 * Get priority fees for the current block
 * @param connection - Solana RPC connection
 * @returns Priority fees statistics and instructions for different fee levels
 */
export async function getComputeBudgetInstructions(
  agent: SolanaAgentKit,
  instructions: TransactionInstruction[],
  feeTier: keyof typeof feeTiers,
): Promise<{
  blockhash: string;
  computeBudgetLimitInstruction: TransactionInstruction;
  computeBudgetPriorityFeeInstructions: TransactionInstruction;
}> {
  const { blockhash, lastValidBlockHeight } =
    await agent.connection.getLatestBlockhash();
  const messageV0 = new TransactionMessage({
    payerKey: agent.wallet_address,
    recentBlockhash: blockhash,
    instructions: instructions,
  }).compileToV0Message();
  const transaction = new VersionedTransaction(messageV0);
  const simulatedTx = agent.connection.simulateTransaction(transaction);
  const estimatedComputeUnits = (await simulatedTx).value.unitsConsumed;
  const safeComputeUnits = Math.ceil(
    estimatedComputeUnits
      ? Math.max(estimatedComputeUnits + 100000, estimatedComputeUnits * 1.2)
      : 200000,
  );
  const computeBudgetLimitInstruction =
    ComputeBudgetProgram.setComputeUnitLimit({
      units: safeComputeUnits,
    });

  let priorityFee: number;

  if (agent.config.HELIUS_API_KEY) {
    // Create and set up a legacy transaction for Helius fee estimation
    const legacyTransaction = new Transaction();
    legacyTransaction.recentBlockhash = blockhash;
    legacyTransaction.lastValidBlockHeight = lastValidBlockHeight;
    legacyTransaction.feePayer = agent.wallet_address;

    // Add the compute budget instruction and original instructions
    legacyTransaction.add(computeBudgetLimitInstruction, ...instructions);

    // Sign the transaction
    legacyTransaction.sign(agent.wallet);

    // Use Helius API for priority fee calculation
    const response = await fetch(
      `https://mainnet.helius-rpc.com/?api-key=${agent.config.HELIUS_API_KEY}`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          jsonrpc: "2.0",
          id: "1",
          method: "getPriorityFeeEstimate",
          params: [
            {
              transaction: bs58.encode(legacyTransaction.serialize()),
              options: {
                priorityLevel:
                  feeTier === "min"
                    ? "Min"
                    : feeTier === "mid"
                      ? "Medium"
                      : "High",
              },
            },
          ],
        } as PriorityFeeResponse),
      },
    );

    const data = await response.json();
    if (data.error) {
      throw new Error("Error fetching priority fee from Helius API");
    }
    priorityFee = data.result.priorityFeeEstimate;
  } else {
    // Use default implementation for priority fee calculation
    priorityFee = await agent.connection
      .getRecentPrioritizationFees()
      .then(
        (fees) =>
          fees.sort((a, b) => a.prioritizationFee - b.prioritizationFee)[
            Math.floor(fees.length * feeTiers[feeTier])
          ].prioritizationFee,
      );
  }

  const computeBudgetPriorityFeeInstructions =
    ComputeBudgetProgram.setComputeUnitPrice({
      microLamports: priorityFee,
    });

  return {
    blockhash,
    computeBudgetLimitInstruction,
    computeBudgetPriorityFeeInstructions,
  };
}

/**
 * Send a transaction with priority fees
 * @param agent - SolanaAgentKit instance
 * @param tx - Transaction to send
 * @returns Transaction ID
 */
export async function sendTx(
  agent: SolanaAgentKit,
  instructions: TransactionInstruction[],
  otherKeypairs?: Keypair[],
) {
  const ixComputeBudget = await getComputeBudgetInstructions(
    agent,
    instructions,
    "mid",
  );
  const allInstructions = [
    ixComputeBudget.computeBudgetLimitInstruction,
    ixComputeBudget.computeBudgetPriorityFeeInstructions,
    ...instructions,
  ];
  const messageV0 = new TransactionMessage({
    payerKey: agent.wallet_address,
    recentBlockhash: ixComputeBudget.blockhash,
    instructions: allInstructions,
  }).compileToV0Message();
  const transaction = new VersionedTransaction(messageV0);
  transaction.sign([agent.wallet, ...(otherKeypairs ?? [])] as Signer[]);

  const timeoutMs = 90000;
  const startTime = Date.now();
  while (Date.now() - startTime < timeoutMs) {
    const transactionStartTime = Date.now();

    const signature = await agent.connection.sendTransaction(transaction, {
      maxRetries: 0,
      skipPreflight: false,
    });

    const statuses = await agent.connection.getSignatureStatuses([signature]);
    if (statuses.value[0]) {
      if (!statuses.value[0].err) {
        return signature;
      } else {
        throw new Error(
          `Transaction failed: ${statuses.value[0].err.toString()}`,
        );
      }
    }

    const elapsedTime = Date.now() - transactionStartTime;
    const remainingTime = Math.max(0, 1000 - elapsedTime);
    if (remainingTime > 0) {
      await new Promise((resolve) => setTimeout(resolve, remainingTime));
    }
  }
  throw new Error("Transaction timeout");
}


================================================
File: src/utils/tokenMetadata.ts
================================================
import { Connection, PublicKey } from "@solana/web3.js";

export async function getTokenMetadata(
  connection: Connection,
  tokenMint: string,
) {
  const METADATA_PROGRAM_ID = new PublicKey(
    "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s",
  );

  const [metadataPDA] = PublicKey.findProgramAddressSync(
    [
      Buffer.from("metadata"),
      METADATA_PROGRAM_ID.toBuffer(),
      new PublicKey(tokenMint).toBuffer(),
    ],
    METADATA_PROGRAM_ID,
  );

  const metadata = await connection.getAccountInfo(metadataPDA);
  if (!metadata?.data) {
    throw new Error("Metadata not found");
  }

  let offset = 1 + 32 + 32; // key + update auth + mint
  const data = metadata.data;
  const decoder = new TextDecoder();

  // Read variable length strings
  const readString = () => {
    let nameLength = data[offset];

    while (nameLength === 0) {
      offset++;
      nameLength = data[offset];
      if (offset >= data.length) {
        return null;
      }
    }

    offset++;
    const name = decoder
      .decode(data.slice(offset, offset + nameLength))
      // @eslint-disable-next-line no-control-regex
      .replace(new RegExp(String.fromCharCode(0), "g"), "");
    offset += nameLength;
    return name;
  };

  const name = readString();
  const symbol = readString();
  const uri = readString();

  // Read remaining data
  const sellerFeeBasisPoints = data.readUInt16LE(offset);
  offset += 2;

  let creators:
    | { address: PublicKey; verified: boolean; share: number }[]
    | null = null;
  if (data[offset] === 1) {
    offset++;
    const numCreators = data[offset];
    offset++;
    creators = [...Array(numCreators)].map(() => {
      const creator = {
        address: new PublicKey(data.slice(offset, offset + 32)),
        verified: data[offset + 32] === 1,
        share: data[offset + 33],
      };
      offset += 34;
      return creator;
    });
  }

  return {
    name,
    symbol,
    uri,
    sellerFeeBasisPoints,
    creators,
  };
}


================================================
File: src/vercel-ai/index.ts
================================================
import { tool, type CoreTool } from "ai";
import { SolanaAgentKit } from "../agent";
import { executeAction } from "../utils/actionExecutor";
import { ACTIONS } from "../actions";

export function createSolanaTools(
  solanaAgentKit: SolanaAgentKit,
): Record<string, CoreTool> {
  const tools: Record<string, CoreTool> = {};
  const actionKeys = Object.keys(ACTIONS);

  for (const key of actionKeys) {
    const action = ACTIONS[key as keyof typeof ACTIONS];
    tools[key] = tool({
      // @ts-expect-error Value matches type however TS still shows error
      id: action.name,
      description: `
      ${action.description}

      Similes: ${action.similes.map(
        (simile) => `
        ${simile}
      `,
      )}
      `.slice(0, 1023),
      parameters: action.schema,
      execute: async (params) =>
        await executeAction(action, solanaAgentKit, params),
    });
  }

  return tools;
}


================================================
File: test/index.ts
================================================
import { SolanaAgentKit, ACTIONS } from "../src";
import { createSolanaTools } from "../src/langchain";
import { HumanMessage } from "@langchain/core/messages";
import { MemorySaver } from "@langchain/langgraph";
import { createReactAgent } from "@langchain/langgraph/prebuilt";
import { ChatOpenAI } from "@langchain/openai";
import * as dotenv from "dotenv";
import * as fs from "fs";
import * as readline from "readline";

dotenv.config();

function validateEnvironment(): void {
  const missingVars: string[] = [];
  const requiredVars = ["OPENAI_API_KEY", "RPC_URL", "SOLANA_PRIVATE_KEY"];

  requiredVars.forEach((varName) => {
    if (!process.env[varName]) {
      missingVars.push(varName);
    }
  });

  if (missingVars.length > 0) {
    console.error("Error: Required environment variables are not set");
    missingVars.forEach((varName) => {
      console.error(`${varName}=your_${varName.toLowerCase()}_here`);
    });
    process.exit(1);
  }
}

validateEnvironment();

const WALLET_DATA_FILE = "wallet_data.txt";

async function initializeAgent() {
  try {
    const llm = new ChatOpenAI({
      modelName: "gpt-4o-mini",
      temperature: 0.3,
    });

    let walletDataStr: string | null = null;

    if (fs.existsSync(WALLET_DATA_FILE)) {
      try {
        walletDataStr = fs.readFileSync(WALLET_DATA_FILE, "utf8");
      } catch (error) {
        console.error("Error reading wallet data:", error);
      }
    }

    const solanaAgent = new SolanaAgentKit(
      process.env.SOLANA_PRIVATE_KEY!,
      process.env.RPC_URL!,
      {
        OPENAI_API_KEY: process.env.OPENAI_API_KEY!,
        HELIUS_API_KEY: process.env.HELIUS_API_KEY!,
        PERPLEXITY_API_KEY: process.env.PERPLEXITY_API_KEY!,
      },
    );

    const tools = createSolanaTools(solanaAgent);

    const memory = new MemorySaver();
    const config = { configurable: { thread_id: "Solana Agent Kit!" } };

    const agent = createReactAgent({
      llm,
      tools,
      checkpointSaver: memory,
      messageModifier: `
        You are a helpful agent that can interact onchain using the Solana Agent Kit. You are
        empowered to interact onchain using your tools. If you ever need funds, you can request them from the
        faucet. If not, you can provide your wallet details and request funds from the user. If there is a 5XX
        (internal) HTTP error code, ask the user to try again later. If someone asks you to do something you
        can't do with your currently available tools, you must say so, and encourage them to implement it
        themselves using the Solana Agent Kit, recommend they go to https://www.solanaagentkit.xyz for more information. Be
        concise and helpful with your responses. Refrain from restating your tools' descriptions unless it is explicitly requested.
      `,
    });

    if (walletDataStr) {
      fs.writeFileSync(WALLET_DATA_FILE, walletDataStr);
    }

    return { agent, config };
  } catch (error) {
    console.error("Failed to initialize agent:", error);
    throw error;
  }
}

async function runAutonomousMode(agent: any, config: any, interval = 10) {
  console.log("Starting autonomous mode...");

  while (true) {
    try {
      const thought =
        "Be creative and do something interesting on the blockchain. " +
        "Choose an action or set of actions and execute it that highlights your abilities.";

      const stream = await agent.stream(
        { messages: [new HumanMessage(thought)] },
        config,
      );

      for await (const chunk of stream) {
        if ("agent" in chunk) {
          console.log(chunk.agent.messages[0].content);
        } else if ("tools" in chunk) {
          console.log(chunk.tools.messages[0].content);
        }
        console.log("-------------------");
      }

      await new Promise((resolve) => setTimeout(resolve, interval * 1000));
    } catch (error) {
      if (error instanceof Error) {
        console.error("Error:", error.message);
      }
      process.exit(1);
    }
  }
}

async function runChatMode(agent: any, config: any) {
  console.log("Starting chat mode... Type 'exit' to end.");

  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });

  const question = (prompt: string): Promise<string> =>
    new Promise((resolve) => rl.question(prompt, resolve));

  try {
    while (true) {
      const userInput = await question("\nPrompt: ");

      if (userInput.toLowerCase() === "exit") {
        break;
      }

      const stream = await agent.stream(
        { messages: [new HumanMessage(userInput)] },
        config,
      );

      for await (const chunk of stream) {
        if ("agent" in chunk) {
          console.log(chunk.agent.messages[0].content);
        } else if ("tools" in chunk) {
          console.log(chunk.tools.messages[0].content);
        }
        console.log("-------------------");
      }
    }
  } catch (error) {
    if (error instanceof Error) {
      console.error("Error:", error.message);
    }
    process.exit(1);
  } finally {
    rl.close();
  }
}

async function chooseMode(): Promise<"chat" | "auto"> {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });

  const question = (prompt: string): Promise<string> =>
    new Promise((resolve) => rl.question(prompt, resolve));

  while (true) {
    console.log("\nAvailable modes:");
    console.log("1. chat    - Interactive chat mode");
    console.log("2. auto    - Autonomous action mode");

    const choice = (await question("\nChoose a mode (enter number or name): "))
      .toLowerCase()
      .trim();

    rl.close();

    if (choice === "1" || choice === "chat") {
      return "chat";
    } else if (choice === "2" || choice === "auto") {
      return "auto";
    }
    console.log("Invalid choice. Please try again.");
  }
}

async function main() {
  try {
    console.log("Starting Agent...");
    const { agent, config } = await initializeAgent();
    const mode = await chooseMode();

    if (mode === "chat") {
      await runChatMode(agent, config);
    } else {
      await runAutonomousMode(agent, config);
    }
  } catch (error) {
    if (error instanceof Error) {
      console.error("Error:", error.message);
    }
    process.exit(1);
  }
}

if (require.main === module) {
  main().catch((error) => {
    console.error("Fatal error:", error);
    process.exit(1);
  });
}


================================================
File: test/agent_sdks/vercel_ai.ts
================================================
import { SolanaAgentKit } from "../../src";
import { createVercelAITools } from "../../src";
import * as dotenv from "dotenv";
import * as readline from "readline";
import { streamText } from "ai";
import { createOpenAI } from "@ai-sdk/openai";

dotenv.config();

function validateEnvironment(): void {
  const missingVars: string[] = [];
  const requiredVars = ["OPENAI_API_KEY", "RPC_URL", "SOLANA_PRIVATE_KEY"];

  requiredVars.forEach((varName) => {
    if (!process.env[varName]) {
      missingVars.push(varName);
    }
  });

  if (missingVars.length > 0) {
    console.error("Error: Required environment variables are not set");
    missingVars.forEach((varName) => {
      console.error(`${varName}=your_${varName.toLowerCase()}_here`);
    });
    process.exit(1);
  }
}

validateEnvironment();

async function runAutonomousMode(interval = 10) {
  console.log("Starting autonomous mode...");
  const openai = createOpenAI({
    apiKey: process.env.OPENAI_API_KEY as string,
  });

  const solanaAgent = new SolanaAgentKit(
    process.env.SOLANA_PRIVATE_KEY!,
    process.env.RPC_URL!,
    {
      OPENAI_API_KEY: process.env.OPENAI_API_KEY!,
    },
  );

  const tools = createVercelAITools(solanaAgent);

  while (true) {
    try {
      const thought =
        "Be creative and do something interesting on the blockchain. " +
        "Choose an action or set of actions and execute it that highlights your abilities.";

      const response = streamText({
        prompt: thought,
        tools,
        model: openai("gpt-4o-mini"),
        temperature: 0.7,
        system: `You are a helpful agent that can interact onchain using the Solana Agent Kit. You are
        empowered to interact onchain using your tools. If you ever need funds, you can request them from the
        faucet. If not, you can provide your wallet details and request funds from the user. If there is a 5XX
        (internal) HTTP error code, ask the user to try again later. If someone asks you to do something you
        can't do with your currently available tools, you must say so, and encourage them to implement it
        themselves using the Solana Agent Kit, recommend they go to https://www.solanaagentkit.xyz for more information. Be
        concise and helpful with your responses. Refrain from restating your tools' descriptions unless it is explicitly requested.`,
        maxSteps: 10,
      });

      for await (const textPart of response.textStream) {
        process.stdout.write(textPart);
      }
      console.log();

      await new Promise((resolve) => setTimeout(resolve, interval * 1000));
    } catch (error) {
      if (error instanceof Error) {
        console.error("Error:", error.message);
      }
      process.exit(1);
    }
  }
}

async function runChatMode() {
  console.log("Starting chat mode... Type 'exit' to end.");
  const openai = createOpenAI({
    apiKey: process.env.OPENAI_API_KEY as string,
  });

  const solanaAgent = new SolanaAgentKit(
    process.env.SOLANA_PRIVATE_KEY!,
    process.env.RPC_URL!,
    {
      OPENAI_API_KEY: process.env.OPENAI_API_KEY!,
    },
  );

  const tools = createVercelAITools(solanaAgent);

  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });

  const question = (prompt: string): Promise<string> =>
    new Promise((resolve) => rl.question(prompt, resolve));

  try {
    while (true) {
      const userInput = await question("\nPrompt: ");

      if (userInput.toLowerCase() === "exit") {
        break;
      }

      const response = streamText({
        prompt: userInput,
        tools,
        model: openai("gpt-4o-mini"),
        temperature: 0.7,
        system: `You are a helpful agent that can interact onchain using the Solana Agent Kit. You are
        empowered to interact onchain using your tools. If you ever need funds, you can request them from the
        faucet. If not, you can provide your wallet details and request funds from the user. If there is a 5XX
        (internal) HTTP error code, ask the user to try again later. If someone asks you to do something you
        can't do with your currently available tools, you must say so, and encourage them to implement it
        themselves using the Solana Agent Kit, recommend they go to https://www.solanaagentkit.xyz for more information. Be
        concise and helpful with your responses. Refrain from restating your tools' descriptions unless it is explicitly requested.`,
        maxSteps: 10,
      });

      for await (const textPart of response.textStream) {
        process.stdout.write(textPart);
      }
      console.log();
    }
  } catch (error) {
    if (error instanceof Error) {
      console.error("Error:", error.message);
    }
    process.exit(1);
  } finally {
    rl.close();
  }
}

async function chooseMode(): Promise<"chat" | "auto"> {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });

  const question = (prompt: string): Promise<string> =>
    new Promise((resolve) => rl.question(prompt, resolve));

  while (true) {
    console.log("\nAvailable modes:");
    console.log("1. chat    - Interactive chat mode");
    console.log("2. auto    - Autonomous action mode");

    const choice = (await question("\nChoose a mode (enter number or name): "))
      .toLowerCase()
      .trim();

    rl.close();

    if (choice === "1" || choice === "chat") {
      return "chat";
    } else if (choice === "2" || choice === "auto") {
      return "auto";
    }
    console.log("Invalid choice. Please try again.");
  }
}

async function main() {
  try {
    console.log("Starting Agent...");
    const mode = await chooseMode();

    if (mode === "chat") {
      await runChatMode();
    } else {
      await runAutonomousMode();
    }
  } catch (error) {
    if (error instanceof Error) {
      console.error("Error:", error.message);
    }
    process.exit(1);
  }
}

if (require.main === module) {
  main().catch((error) => {
    console.error("Fatal error:", error);
    process.exit(1);
  });
}

================================================
File: test/tools/3land.ts
================================================
import {
  CreateCollectionOptions,
  CreateSingleOptions,
  StoreInitOptions,
} from "@3land/listings-sdk/dist/types/implementation/implementationTypes";

import "dotenv/config";
import { SolanaAgentKit, createSolanaTools } from "../../src";

const agent = new SolanaAgentKit(
  process.env.SOLANA_PRIVATE_KEY!,
  process.env.RPC_URL!,
  { OPENAI_API_KEY: process.env.OPENAI_API_KEY! },
);

const isDevnet = false;

/****************************** CREATING COLLECTION ******************************** */

const collectionOpts: CreateCollectionOptions = {
  collectionName: "",
  collectionSymbol: "",
  collectionDescription: "",
  mainImageUrl: "",
};

//const priorityFeeParam = 100000;

(async () => {
  const collection = await agent.create3LandCollection(
    collectionOpts,
    isDevnet,
    //priorityFeeParam,
  );

  console.log("collection: ", collection);
})();

/****************************** CREATING NFT ******************************** */
const collectionAccount = "";
const createItemOptions: CreateSingleOptions = {
  itemName: "",
  sellerFee: 500, //5%
  itemAmount: 333,
  itemSymbol: "",
  itemDescription: "",
  traits: [{ trait_type: "", value: "" }],
  price: 1000000, //100000000 == 0.1 sol,
  splHash: "",
  poolName: "",
  mainImageUrl: "",
};

const withPool = true;
//const priorityFeeParam = 100000;

(async () => {
  const result = agent.create3LandNft(
    collectionAccount,
    createItemOptions,
    isDevnet,
    withPool,
    //priorityFeeParam,
  );
  console.log("result: ", result);
})();

export { SolanaAgentKit, createSolanaTools };


================================================
File: test/tools/create_meteora_dlmm_pool.ts
================================================
import { SolanaAgentKit, createSolanaTools } from "../../src";
import { deploy_token } from "../../src/tools";

const agent = new SolanaAgentKit(
  process.env.SOLANA_PRIVATE_KEY!,
  process.env.RPC_URL!,
  { OPENAI_API_KEY: process.env.OPENAI_API_KEY! },
);

async function main() {
  console.log("<<< Test Create Meteora DLMM pool");

  const { mint: tokenAMint } = await deploy_token(
    agent,
    "token_a_mint",
    "www.example.com",
    "TOKEN_A",
    6,
    100_000,
  );
  const { mint: tokenBMint } = await deploy_token(
    agent,
    "token_b_mint",
    "www.example.com",
    "TOKEN_B",
    6,
    100_000,
  );

  // Delay for 5 seconds
  await new Promise((resolve) => setTimeout(resolve, 5000));

  const binStep = 20;
  const initialPrice = 0.25;
  const priceRoundingUp = true;
  const feeBps = 20;
  const activationType = 1; // timestamp
  const hasAlphaVault = false;
  const activationPoint = undefined;

  const txHash = await agent.meteoraCreateDlmmPool(
    tokenAMint,
    tokenBMint,
    binStep,
    initialPrice,
    priceRoundingUp,
    feeBps,
    activationType,
    hasAlphaVault,
    activationPoint,
  );
  console.log(`Tx successfully ${txHash.toString()}`);

  console.log(">>> Test Create Meteora DLMM Pool Passed");
}

main();

export { SolanaAgentKit, createSolanaTools };


================================================
File: test/tools/create_meteora_dynamic_amm_pool.ts
================================================
import { SolanaAgentKit, createSolanaTools } from "../../src";
import { deploy_token } from "../../src/tools";
import BN from "bn.js";
import AmmImpl from "@mercurial-finance/dynamic-amm-sdk";
import { deriveCustomizablePermissionlessConstantProductPoolAddress } from "@mercurial-finance/dynamic-amm-sdk/dist/cjs/src/amm/utils";
import { METEORA_DYNAMIC_AMM_PROGRAM_ID } from "../../src/constants";

const agent = new SolanaAgentKit(
  process.env.SOLANA_PRIVATE_KEY!,
  process.env.RPC_URL!,
  { OPENAI_API_KEY: process.env.OPENAI_API_KEY! },
);

async function main() {
  console.log("<<< Test Create Meteora Dynamic AMM pool");

  const { mint: tokenAMint } = await deploy_token(
    agent,
    "token_a_mint",
    "www.example.com",
    "TOKEN_A",
    6,
    100_000,
  );
  const { mint: tokenBMint } = await deploy_token(
    agent,
    "token_b_mint",
    "www.example.com",
    "TOKEN_B",
    6,
    100_000,
  );

  // Delay for 5 seconds
  await new Promise((resolve) => setTimeout(resolve, 5000));

  const tokenAAmount = new BN(1000 * 10 ** 6);
  const tokenBAmount = new BN(5 * 10 ** 6);
  const params = {
    tradeFeeNumerator: 2500,
    activationPoint: null,
    hasAlphaVault: false,
    activationType: 0,
  };
  const txHash = await agent.meteoraCreateDynamicPool(
    tokenAMint,
    tokenBMint,
    tokenAAmount,
    tokenBAmount,
    params.tradeFeeNumerator,
    params.activationPoint,
    params.hasAlphaVault,
    params.activationType,
  );
  console.log(`Tx successfully ${txHash.toString()}`);

  const poolKey = deriveCustomizablePermissionlessConstantProductPoolAddress(
    tokenAMint,
    tokenBMint,
    METEORA_DYNAMIC_AMM_PROGRAM_ID,
  );
  const pool = await AmmImpl.create(agent.connection, poolKey);
  await pool.updateState();

  console.log(">>> Test Create Meteora Dynamic AMM Pool Passed");
}

main();

export { SolanaAgentKit, createSolanaTools };


================================================
File: .github/pull_request_template.md
================================================
# Pull Request Description

## Related Issue
Fixes # (issue number)

## Changes Made
This PR adds the following changes:
<!-- List the key changes made in this PR -->
- 
- 
  
## Implementation Details
<!-- Provide technical details about the implementation -->
- 
- 

## Transaction executed by agent 
<!-- If applicable, provide example usage, transactions, or screenshots -->
Example transaction: 

## Prompt Used
<!-- If relevant, include the prompt or configuration used -->
```
```

## Additional Notes
<!-- Any additional information that reviewers should know -->

## Checklist
- [ ] I have tested these changes locally
- [ ] I have updated the documentation
- [ ] I have added a transaction link
- [ ] I have added the prompt used to test it 


================================================
File: .github/ISSUE_TEMPLATE/bug_report.md
================================================
---
name: Bug report
about: Create a report to help us improve
title: ''
labels: bug
assignees: ''

---

**Describe the bug**
A clear and concise description of what the bug is.

**To Reproduce**
Steps to reproduce the behavior:
1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error

**Expected behavior**
A clear and concise description of what you expected to happen.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Additional context**
Add any other context about the problem here.


================================================
File: .github/ISSUE_TEMPLATE/feature_request.md
================================================
---
name: Feature request
about: Suggest an idea for this project
title: ''
labels: ''
assignees: ''

---

**Is your feature request related to a problem? Please describe.**
A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]

**Describe the solution you'd like**
A clear and concise description of what you want to happen.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context or screenshots about the feature request here.


================================================
File: .github/workflows/build.yml
================================================
name: ci
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v3
        with:
          version: 9.4.0

      - name: Install node-gyp prerequisites
        run: sudo apt update && sudo apt install -y build-essential python3 pkg-config libudev-dev libusb-1.0-0-dev

      - uses: actions/setup-node@v4
        with:
          node-version: "23"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install -r --no-frozen-lockfile

      - name: Run lint and fix
        run: pnpm run lint:fix

      - name: Build packages
        run: pnpm run build


================================================
File: .husky/pre-commit
================================================
tsc && lint-staged

